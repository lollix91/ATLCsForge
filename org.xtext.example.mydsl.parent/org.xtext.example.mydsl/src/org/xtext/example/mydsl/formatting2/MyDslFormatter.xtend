/*
 * generated by Xtext 2.11.0
 */
package org.xtext.example.mydsl.formatting2

import atl.Helper
import atl.Library
import atl.LibraryRef
import atl.Unit
import com.google.inject.Inject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.xtext.example.mydsl.services.MyDslGrammarAccess

class MyDslFormatter extends AbstractFormatter2 {
	
	@Inject extension MyDslGrammarAccess

	def dispatch void format(Unit unit, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (LibraryRef libraryRef : unit.getLibraries()) {
			libraryRef.format;
		}
	}

	def dispatch void format(Library library, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (LibraryRef libraryRef : library.getLibraries()) {
			libraryRef.format;
		}
		for (Helper helper : library.getHelpers()) {
			helper.format;
		}
	}
	
	// TODO: implement for Query, Module, Helper, MatchedRule, LazyMatchedRule, CalledRule, InPattern, OutPattern, SimpleInPatternElement, SimpleOutPatternElement, ForEachOutPatternElement, Binding, RuleVariableDeclaration, ActionBlock, ExpressionStat, BindingStat, IfStat, ForStat, OclType, VariableExp, SuperExp, StringExp, BooleanExp, RealExp, IntegerExp, BagExp, OrderedSetExp, SequenceExp, SetExp, TupleExp, MapExp, EnumLiteralExp, OclUndefinedExp, NavigationOrAttributeCallExp, OperationCallExp, OperatorCallExp, CollectionOperationCallExp, IterateExp, IteratorExp, LetExp, IfExp, CollectionType, StringType, BooleanType, IntegerType, RealType, BagType, OrderedSetType, SequenceType, SetType, OclAnyType, TupleType, OclModelElement, MapType, VariableDeclaration, TuplePart, Iterator, Parameter, MapElement, TupleTypeAttribute, OclFeatureDefinition, OclContextDefinition, Attribute, Operation
}
