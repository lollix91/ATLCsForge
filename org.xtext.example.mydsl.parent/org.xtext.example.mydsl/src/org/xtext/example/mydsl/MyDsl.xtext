// automatically generated by Xtext
grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/gmt/2005/ATL" 
import "http://www.eclipse.org/gmt/2005/ATL-PrimitiveTypes" as PrimitiveTypes
import "http://www.eclipse.org/gmt/2005/OCL" as ocl
import "http://www.eclipse.org/emf/2002/Ecore" as ecore




OclExpression returns ocl::OclExpression:
	VariableExp | SuperExp | StringExp | BooleanExp | RealExp | IntegerExp | BagExp | OrderedSetExp | SequenceExp | SetExp | TupleExp | MapExp | EnumLiteralExp | OclUndefinedExp | NavigationOrAttributeCallExp | OperationCallExp_Impl | OperatorCallExp | CollectionOperationCallExp | IterateExp | IteratorExp | LetExp | IfExp | CollectionType_Impl | OclType_Impl | StringType | BooleanType | IntegerType | RealType | BagType | OrderedSetType | SequenceType | SetType | OclAnyType | TupleType | OclModelElement | MapType;


ModuleElement returns ModuleElement:
	Helper | MatchedRule_Impl | LazyMatchedRule | CalledRule;






MatchedRule returns MatchedRule:
	MatchedRule_Impl | LazyMatchedRule;


InPatternElement returns InPatternElement:
	SimpleInPatternElement;


OutPatternElement returns OutPatternElement:
	SimpleOutPatternElement | ForEachOutPatternElement;

OclType returns ocl::OclType:
	OclType_Impl | CollectionType_Impl | StringType | BooleanType | IntegerType | RealType | BagType | OrderedSetType | SequenceType | SetType | OclAnyType | TupleType | OclModelElement | MapType;




Statement returns Statement:
	ExpressionStat | BindingStat | IfStat | ForStat;

VariableDeclaration returns ocl::VariableDeclaration:
	VariableDeclaration_Impl | TuplePart | Iterator | Parameter;





OclFeature returns ocl::OclFeature:
	Attribute | Operation;


String0 returns PrimitiveTypes::String:
	'String' /* TODO: implement this rule and an appropriate IValueConverter */;

Unit_Impl returns Unit:
	'Unit'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'name' name=String0
		('libraries' '{' libraries+=LibraryRef ( "," libraries+=LibraryRef)* '}' )?
	'}';

Library returns Library:
	'Library'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'name' name=String0
		('libraries' '{' libraries+=LibraryRef ( "," libraries+=LibraryRef)* '}' )?
		('helpers' '{' helpers+=Helper ( "," helpers+=Helper)* '}' )?
	'}';

Query returns Query:
	'Query'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'name' name=String0
		('libraries' '{' libraries+=LibraryRef ( "," libraries+=LibraryRef)* '}' )?
		'body' body=OclExpression
		('helpers' '{' helpers+=Helper ( "," helpers+=Helper)* '}' )?
	'}';

Module returns Module:
	'Module'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'name' name=String0
		'isRefining' isRefining=Boolean
		('libraries' '{' libraries+=LibraryRef ( "," libraries+=LibraryRef)* '}' )?
		'inModels' '{' inModels+=OclModel ( "," inModels+=OclModel)* '}' 
		'outModels' '{' outModels+=OclModel ( "," outModels+=OclModel)* '}' 
		('elements' '{' elements+=ModuleElement ( "," elements+=ModuleElement)* '}' )?
	'}';

Helper returns Helper:
	'Helper'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'definition' definition=OclFeatureDefinition
	'}';

MatchedRule_Impl returns MatchedRule:
	'MatchedRule'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'name' name=String0
		'isAbstract' isAbstract=Boolean
		'isRefining' isRefining=Boolean
		'isNoDefault' isNoDefault=Boolean
		('children' '(' children+=[MatchedRule|EString] ( "," children+=[MatchedRule|EString])* ')' )?
		('superRule' superRule=[MatchedRule|EString])?
		('outPattern' outPattern=OutPattern)?
		('actionBlock' actionBlock=ActionBlock)?
		('variables' '{' variables+=RuleVariableDeclaration ( "," variables+=RuleVariableDeclaration)* '}' )?
		('inPattern' inPattern=InPattern)?
	'}';

LazyMatchedRule returns LazyMatchedRule:
	'LazyMatchedRule'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'name' name=String0
		'isAbstract' isAbstract=Boolean
		'isRefining' isRefining=Boolean
		'isNoDefault' isNoDefault=Boolean
		'isUnique' isUnique=Boolean
		('children' '(' children+=[MatchedRule|EString] ( "," children+=[MatchedRule|EString])* ')' )?
		('superRule' superRule=[MatchedRule|EString])?
		('outPattern' outPattern=OutPattern)?
		('actionBlock' actionBlock=ActionBlock)?
		('variables' '{' variables+=RuleVariableDeclaration ( "," variables+=RuleVariableDeclaration)* '}' )?
		('inPattern' inPattern=InPattern)?
	'}';

CalledRule returns CalledRule:
	'CalledRule'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'name' name=String0
		'isEntrypoint' isEntrypoint=Boolean
		'isEndpoint' isEndpoint=Boolean
		('outPattern' outPattern=OutPattern)?
		('actionBlock' actionBlock=ActionBlock)?
		('variables' '{' variables+=RuleVariableDeclaration ( "," variables+=RuleVariableDeclaration)* '}' )?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
	'}';

InPattern returns InPattern:
	'InPattern'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'elements' '{' elements+=InPatternElement ( "," elements+=InPatternElement)* '}' 
		('filter' filter=OclExpression)?
	'}';

OutPattern returns OutPattern:
	'OutPattern'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		('dropPattern' dropPattern=DropPattern)?
		'elements' '{' elements+=OutPatternElement ( "," elements+=OutPatternElement)* '}' 
	'}';

DropPattern returns DropPattern:
	{DropPattern}
	'DropPattern'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
	'}';

SimpleInPatternElement returns SimpleInPatternElement:
	'SimpleInPatternElement'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		('id' id=String0)?
		'varName' varName=String0
		('variableExp' '(' variableExp+=[ocl::VariableExp|EString] ( "," variableExp+=[ocl::VariableExp|EString])* ')' )?
		'mapsTo' mapsTo=[OutPatternElement|EString]
		('models' '(' models+=[ocl::OclModel|EString] ( "," models+=[ocl::OclModel|EString])* ')' )?
		('type' type=OclType)?
		('initExpression' initExpression=OclExpression)?
	'}';

SimpleOutPatternElement returns SimpleOutPatternElement:
	'SimpleOutPatternElement'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		('id' id=String0)?
		'varName' varName=String0
		('variableExp' '(' variableExp+=[ocl::VariableExp|EString] ( "," variableExp+=[ocl::VariableExp|EString])* ')' )?
		('sourceElement' sourceElement=[InPatternElement|EString])?
		('model' model=[ocl::OclModel|EString])?
		('type' type=OclType)?
		('initExpression' initExpression=OclExpression)?
		('bindings' '{' bindings+=Binding ( "," bindings+=Binding)* '}' )?
		('reverseBindings' '{' reverseBindings+=OclExpression ( "," reverseBindings+=OclExpression)* '}' )?
	'}';

ForEachOutPatternElement returns ForEachOutPatternElement:
	'ForEachOutPatternElement'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		('id' id=String0)?
		'varName' varName=String0
		('variableExp' '(' variableExp+=[ocl::VariableExp|EString] ( "," variableExp+=[ocl::VariableExp|EString])* ')' )?
		('sourceElement' sourceElement=[InPatternElement|EString])?
		('model' model=[ocl::OclModel|EString])?
		('type' type=OclType)?
		('initExpression' initExpression=OclExpression)?
		('bindings' '{' bindings+=Binding ( "," bindings+=Binding)* '}' )?
		'collection' collection=OclExpression
		'iterator' iterator=Iterator
	'}';

Binding returns Binding:
	'Binding'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'propertyName' propertyName=String0
		'isAssignment' isAssignment=Boolean
		'value' value=OclExpression
	'}';

RuleVariableDeclaration returns RuleVariableDeclaration:
	'RuleVariableDeclaration'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		('id' id=String0)?
		'varName' varName=String0
		('variableExp' '(' variableExp+=[ocl::VariableExp|EString] ( "," variableExp+=[ocl::VariableExp|EString])* ')' )?
		('type' type=OclType)?
		('initExpression' initExpression=OclExpression)?
	'}';

LibraryRef returns LibraryRef:
	'LibraryRef'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'name' name=String0
	'}';

ActionBlock returns ActionBlock:
	{ActionBlock}
	'ActionBlock'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		('statements' '{' statements+=Statement ( "," statements+=Statement)* '}' )?
	'}';

ExpressionStat returns ExpressionStat:
	'ExpressionStat'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'expression' expression=OclExpression
	'}';

BindingStat returns BindingStat:
	'BindingStat'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'propertyName' propertyName=String0
		'isAssignment' isAssignment=Boolean
		'source' source=OclExpression
		'value' value=OclExpression
	'}';

IfStat returns IfStat:
	'IfStat'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'condition' condition=OclExpression
		('thenStatements' '{' thenStatements+=Statement ( "," thenStatements+=Statement)* '}' )?
		('elseStatements' '{' elseStatements+=Statement ( "," elseStatements+=Statement)* '}' )?
	'}';

ForStat returns ForStat:
	'ForStat'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'iterator' iterator=Iterator
		'collection' collection=OclExpression
		('statements' '{' statements+=Statement ( "," statements+=Statement)* '}' )?
	'}';

OclType_Impl returns ocl::OclType:
	'OclType'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'name' name=String0
		('type' type=OclType)?
	'}';

VariableExp returns ocl::VariableExp:
	'VariableExp'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'referredVariable' referredVariable=[ocl::VariableDeclaration|EString]
		('type' type=OclType)?
	'}';

SuperExp returns ocl::SuperExp:
	{ocl::SuperExp}
	'SuperExp'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		('type' type=OclType)?
	'}';

StringExp returns ocl::StringExp:
	'StringExp'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'stringSymbol' stringSymbol=String0
		('type' type=OclType)?
	'}';

BooleanExp returns ocl::BooleanExp:
	'BooleanExp'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'booleanSymbol' booleanSymbol=Boolean
		('type' type=OclType)?
	'}';

RealExp returns ocl::RealExp:
	'RealExp'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'realSymbol' realSymbol=Double
		('type' type=OclType)?
	'}';

IntegerExp returns ocl::IntegerExp:
	'IntegerExp'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'integerSymbol' integerSymbol=Integer
		('type' type=OclType)?
	'}';

BagExp returns ocl::BagExp:
	{ocl::BagExp}
	'BagExp'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		('type' type=OclType)?
		('elements' '{' elements+=OclExpression ( "," elements+=OclExpression)* '}' )?
	'}';

OrderedSetExp returns ocl::OrderedSetExp:
	{ocl::OrderedSetExp}
	'OrderedSetExp'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		('type' type=OclType)?
		('elements' '{' elements+=OclExpression ( "," elements+=OclExpression)* '}' )?
	'}';

SequenceExp returns ocl::SequenceExp:
	{ocl::SequenceExp}
	'SequenceExp'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		('type' type=OclType)?
		('elements' '{' elements+=OclExpression ( "," elements+=OclExpression)* '}' )?
	'}';

SetExp returns ocl::SetExp:
	{ocl::SetExp}
	'SetExp'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		('type' type=OclType)?
		('elements' '{' elements+=OclExpression ( "," elements+=OclExpression)* '}' )?
	'}';

TupleExp returns ocl::TupleExp:
	{ocl::TupleExp}
	'TupleExp'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		('type' type=OclType)?
		('tuplePart' '{' tuplePart+=TuplePart ( "," tuplePart+=TuplePart)* '}' )?
	'}';

MapExp returns ocl::MapExp:
	{ocl::MapExp}
	'MapExp'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		('type' type=OclType)?
		('elements' '{' elements+=MapElement ( "," elements+=MapElement)* '}' )?
	'}';

EnumLiteralExp returns ocl::EnumLiteralExp:
	'EnumLiteralExp'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'name' name=String0
		('type' type=OclType)?
	'}';

OclUndefinedExp returns ocl::OclUndefinedExp:
	{ocl::OclUndefinedExp}
	'OclUndefinedExp'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		('type' type=OclType)?
	'}';

NavigationOrAttributeCallExp returns ocl::NavigationOrAttributeCallExp:
	'NavigationOrAttributeCallExp'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'name' name=String0
		('type' type=OclType)?
		'source' source=OclExpression
	'}';

OperationCallExp_Impl returns ocl::OperationCallExp:
	'OperationCallExp'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'operationName' operationName=String0
		('type' type=OclType)?
		'source' source=OclExpression
		('arguments' '{' arguments+=OclExpression ( "," arguments+=OclExpression)* '}' )?
	'}';

OperatorCallExp returns ocl::OperatorCallExp:
	'OperatorCallExp'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'operationName' operationName=String0
		('type' type=OclType)?
		'source' source=OclExpression
		('arguments' '{' arguments+=OclExpression ( "," arguments+=OclExpression)* '}' )?
	'}';

CollectionOperationCallExp returns ocl::CollectionOperationCallExp:
	'CollectionOperationCallExp'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'operationName' operationName=String0
		('type' type=OclType)?
		'source' source=OclExpression
		('arguments' '{' arguments+=OclExpression ( "," arguments+=OclExpression)* '}' )?
	'}';

IterateExp returns ocl::IterateExp:
	'IterateExp'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		('type' type=OclType)?
		'source' source=OclExpression
		'body' body=OclExpression
		'iterators' '{' iterators+=Iterator ( "," iterators+=Iterator)* '}' 
		'result' result=VariableDeclaration
	'}';

IteratorExp returns ocl::IteratorExp:
	'IteratorExp'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'name' name=String0
		('type' type=OclType)?
		'source' source=OclExpression
		'body' body=OclExpression
		'iterators' '{' iterators+=Iterator ( "," iterators+=Iterator)* '}' 
	'}';

LetExp returns ocl::LetExp:
	'LetExp'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		('type' type=OclType)?
		'variable' variable=VariableDeclaration
		'in_' in_=OclExpression
	'}';

IfExp returns ocl::IfExp:
	'IfExp'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		('type' type=OclType)?
		'thenExpression' thenExpression=OclExpression
		'condition' condition=OclExpression
		'elseExpression' elseExpression=OclExpression
	'}';

CollectionType_Impl returns ocl::CollectionType:
	'CollectionType'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'name' name=String0
		('type' type=OclType)?
		'elementType' elementType=OclType
	'}';

StringType returns ocl::StringType:
	'StringType'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'name' name=String0
		('type' type=OclType)?
	'}';

BooleanType returns ocl::BooleanType:
	'BooleanType'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'name' name=String0
		('type' type=OclType)?
	'}';

IntegerType returns ocl::IntegerType:
	'IntegerType'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'name' name=String0
		('type' type=OclType)?
	'}';

RealType returns ocl::RealType:
	'RealType'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'name' name=String0
		('type' type=OclType)?
	'}';

BagType returns ocl::BagType:
	'BagType'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'name' name=String0
		('type' type=OclType)?
		'elementType' elementType=OclType
	'}';

OrderedSetType returns ocl::OrderedSetType:
	'OrderedSetType'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'name' name=String0
		('type' type=OclType)?
		'elementType' elementType=OclType
	'}';

SequenceType returns ocl::SequenceType:
	'SequenceType'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'name' name=String0
		('type' type=OclType)?
		'elementType' elementType=OclType
	'}';

SetType returns ocl::SetType:
	'SetType'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'name' name=String0
		('type' type=OclType)?
		'elementType' elementType=OclType
	'}';

OclAnyType returns ocl::OclAnyType:
	'OclAnyType'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'name' name=String0
		('type' type=OclType)?
	'}';

TupleType returns ocl::TupleType:
	'TupleType'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'name' name=String0
		('type' type=OclType)?
		('attributes' '{' attributes+=TupleTypeAttribute ( "," attributes+=TupleTypeAttribute)* '}' )?
	'}';

OclModelElement returns ocl::OclModelElement:
	'OclModelElement'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'name' name=String0
		'model' model=[ocl::OclModel|EString]
		('type' type=OclType)?
	'}';

MapType returns ocl::MapType:
	'MapType'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'name' name=String0
		('type' type=OclType)?
		'valueType' valueType=OclType
		'keyType' keyType=OclType
	'}';

VariableDeclaration_Impl returns ocl::VariableDeclaration:
	'VariableDeclaration'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		('id' id=String0)?
		'varName' varName=String0
		('variableExp' '(' variableExp+=[ocl::VariableExp|EString] ( "," variableExp+=[ocl::VariableExp|EString])* ')' )?
		('type' type=OclType)?
		('initExpression' initExpression=OclExpression)?
	'}';

TuplePart returns ocl::TuplePart:
	'TuplePart'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		('id' id=String0)?
		'varName' varName=String0
		('variableExp' '(' variableExp+=[ocl::VariableExp|EString] ( "," variableExp+=[ocl::VariableExp|EString])* ')' )?
		('type' type=OclType)?
		('initExpression' initExpression=OclExpression)?
	'}';

Iterator returns ocl::Iterator:
	'Iterator'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		('id' id=String0)?
		'varName' varName=String0
		('variableExp' '(' variableExp+=[ocl::VariableExp|EString] ( "," variableExp+=[ocl::VariableExp|EString])* ')' )?
		('type' type=OclType)?
		('initExpression' initExpression=OclExpression)?
	'}';

Parameter returns ocl::Parameter:
	'Parameter'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		('id' id=String0)?
		'varName' varName=String0
		('variableExp' '(' variableExp+=[ocl::VariableExp|EString] ( "," variableExp+=[ocl::VariableExp|EString])* ')' )?
		('type' type=OclType)?
		('initExpression' initExpression=OclExpression)?
	'}';

Boolean returns PrimitiveTypes::Boolean:
	'Boolean' /* TODO: implement this rule and an appropriate IValueConverter */;

Double returns PrimitiveTypes::Double:
	'Double' /* TODO: implement this rule and an appropriate IValueConverter */;

Integer returns PrimitiveTypes::Integer:
	'Integer' /* TODO: implement this rule and an appropriate IValueConverter */;

MapElement returns ocl::MapElement:
	'MapElement'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'key' key=OclExpression
		'value' value=OclExpression
	'}';

TupleTypeAttribute returns ocl::TupleTypeAttribute:
	'TupleTypeAttribute'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'name' name=String0
		'type' type=OclType
	'}';

OclModel returns ocl::OclModel:
	'OclModel'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'name' name=String0
		'metamodel' metamodel=[ocl::OclModel|EString]
		('elements' '(' elements+=[ocl::OclModelElement|EString] ( "," elements+=[ocl::OclModelElement|EString])* ')' )?
		('model' '(' model+=[ocl::OclModel|EString] ( "," model+=[ocl::OclModel|EString])* ')' )?
	'}';

OclFeatureDefinition returns ocl::OclFeatureDefinition:
	'OclFeatureDefinition'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'feature' feature=OclFeature
		('context_' context_=OclContextDefinition)?
	'}';

OclContextDefinition returns ocl::OclContextDefinition:
	'OclContextDefinition'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'context_' context_=OclType
	'}';

Attribute returns ocl::Attribute:
	'Attribute'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'name' name=String0
		'initExpression' initExpression=OclExpression
		'type' type=OclType
	'}';

Operation returns ocl::Operation:
	'Operation'
	'{'
		('location' location=String0)?
		('commentsBefore' '{' commentsBefore+=String0 ( "," commentsBefore+=String0)* '}' )?
		('commentsAfter' '{' commentsAfter+=String0 ( "," commentsAfter+=String0)* '}' )?
		'name' name=String0
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		'returnType' returnType=OclType
		'body' body=OclExpression
	'}';

EString returns ecore::EString:
'EString' /* TODO: implement this rule and an appropriate IValueConverter */; 