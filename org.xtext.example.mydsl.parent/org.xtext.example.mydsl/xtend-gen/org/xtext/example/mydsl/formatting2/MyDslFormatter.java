/**
 * generated by Xtext 2.11.0
 */
package org.xtext.example.mydsl.formatting2;

import atl.Helper;
import atl.Library;
import atl.LibraryRef;
import atl.Unit;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MyDslGrammarAccess _myDslGrammarAccess;
  
  protected void _format(final Unit unit, @Extension final IFormattableDocument document) {
    EList<LibraryRef> _libraries = unit.getLibraries();
    for (final LibraryRef libraryRef : _libraries) {
      document.<LibraryRef>format(libraryRef);
    }
  }
  
  protected void _format(final Library library, @Extension final IFormattableDocument document) {
    EList<LibraryRef> _libraries = library.getLibraries();
    for (final LibraryRef libraryRef : _libraries) {
      document.<LibraryRef>format(libraryRef);
    }
    EList<Helper> _helpers = library.getHelpers();
    for (final Helper helper : _helpers) {
      document.<Helper>format(helper);
    }
  }
  
  public void format(final Object library, final IFormattableDocument document) {
    if (library instanceof Library) {
      _format((Library)library, document);
      return;
    } else if (library instanceof XtextResource) {
      _format((XtextResource)library, document);
      return;
    } else if (library instanceof Unit) {
      _format((Unit)library, document);
      return;
    } else if (library instanceof EObject) {
      _format((EObject)library, document);
      return;
    } else if (library == null) {
      _format((Void)null, document);
      return;
    } else if (library != null) {
      _format(library, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(library, document).toString());
    }
  }
}
