/**
 * <copyright>
 * </copyright>
 *
 * 
 */
package atl.resource.atl.mopp;

public class AtlPrinter implements atl.resource.atl.IAtlTextPrinter {
	
	protected atl.resource.atl.IAtlTokenResolverFactory tokenResolverFactory = new atl.resource.atl.mopp.AtlTokenResolverFactory();
	
	protected java.io.OutputStream outputStream;
	
	/**
	 * Holds the resource that is associated with this printer. This may be null if
	 * the printer is used stand alone.
	 */
	private atl.resource.atl.IAtlTextResource resource;
	
	private java.util.Map<?, ?> options;
	private String encoding = System.getProperty("file.encoding");
	
	public AtlPrinter(java.io.OutputStream outputStream, atl.resource.atl.IAtlTextResource resource) {
		super();
		this.outputStream = outputStream;
		this.resource = resource;
	}
	
	protected int matchCount(java.util.Map<String, Integer> featureCounter, java.util.Collection<String> needed) {
		int pos = 0;
		int neg = 0;
		
		for (String featureName : featureCounter.keySet()) {
			if (needed.contains(featureName)) {
				int value = featureCounter.get(featureName);
				if (value == 0) {
					neg += 1;
				} else {
					pos += 1;
				}
			}
		}
		return neg > 0 ? -neg : pos;
	}
	
	protected void doPrint(org.eclipse.emf.ecore.EObject element, java.io.PrintWriter out, String globaltab) {
		if (element == null) {
			throw new java.lang.IllegalArgumentException("Nothing to write.");
		}
		if (out == null) {
			throw new java.lang.IllegalArgumentException("Nothing to write on.");
		}
		
		if (element instanceof atl.Library) {
			print_atl_Library((atl.Library) element, globaltab, out);
			return;
		}
		if (element instanceof atl.Query) {
			print_atl_Query((atl.Query) element, globaltab, out);
			return;
		}
		if (element instanceof atl.Module) {
			print_atl_Module((atl.Module) element, globaltab, out);
			return;
		}
		if (element instanceof atl.Helper) {
			print_atl_Helper((atl.Helper) element, globaltab, out);
			return;
		}
		if (element instanceof atl.LazyMatchedRule) {
			print_atl_LazyMatchedRule((atl.LazyMatchedRule) element, globaltab, out);
			return;
		}
		if (element instanceof atl.CalledRule) {
			print_atl_CalledRule((atl.CalledRule) element, globaltab, out);
			return;
		}
		if (element instanceof atl.InPattern) {
			print_atl_InPattern((atl.InPattern) element, globaltab, out);
			return;
		}
		if (element instanceof atl.OutPattern) {
			print_atl_OutPattern((atl.OutPattern) element, globaltab, out);
			return;
		}
		if (element instanceof atl.DropPattern) {
			print_atl_DropPattern((atl.DropPattern) element, globaltab, out);
			return;
		}
		if (element instanceof atl.SimpleInPatternElement) {
			print_atl_SimpleInPatternElement((atl.SimpleInPatternElement) element, globaltab, out);
			return;
		}
		if (element instanceof atl.SimpleOutPatternElement) {
			print_atl_SimpleOutPatternElement((atl.SimpleOutPatternElement) element, globaltab, out);
			return;
		}
		if (element instanceof atl.ForEachOutPatternElement) {
			print_atl_ForEachOutPatternElement((atl.ForEachOutPatternElement) element, globaltab, out);
			return;
		}
		if (element instanceof atl.Binding) {
			print_atl_Binding((atl.Binding) element, globaltab, out);
			return;
		}
		if (element instanceof atl.RuleVariableDeclaration) {
			print_atl_RuleVariableDeclaration((atl.RuleVariableDeclaration) element, globaltab, out);
			return;
		}
		if (element instanceof atl.LibraryRef) {
			print_atl_LibraryRef((atl.LibraryRef) element, globaltab, out);
			return;
		}
		if (element instanceof atl.ActionBlock) {
			print_atl_ActionBlock((atl.ActionBlock) element, globaltab, out);
			return;
		}
		if (element instanceof atl.ExpressionStat) {
			print_atl_ExpressionStat((atl.ExpressionStat) element, globaltab, out);
			return;
		}
		if (element instanceof atl.BindingStat) {
			print_atl_BindingStat((atl.BindingStat) element, globaltab, out);
			return;
		}
		if (element instanceof atl.IfStat) {
			print_atl_IfStat((atl.IfStat) element, globaltab, out);
			return;
		}
		if (element instanceof atl.ForStat) {
			print_atl_ForStat((atl.ForStat) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.VariableExp) {
			print_ocl_VariableExp((ocl.VariableExp) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.SuperExp) {
			print_ocl_SuperExp((ocl.SuperExp) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.StringExp) {
			print_ocl_StringExp((ocl.StringExp) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.BooleanExp) {
			print_ocl_BooleanExp((ocl.BooleanExp) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.RealExp) {
			print_ocl_RealExp((ocl.RealExp) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.IntegerExp) {
			print_ocl_IntegerExp((ocl.IntegerExp) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.BagExp) {
			print_ocl_BagExp((ocl.BagExp) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.OrderedSetExp) {
			print_ocl_OrderedSetExp((ocl.OrderedSetExp) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.SequenceExp) {
			print_ocl_SequenceExp((ocl.SequenceExp) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.SetExp) {
			print_ocl_SetExp((ocl.SetExp) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.TupleExp) {
			print_ocl_TupleExp((ocl.TupleExp) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.TuplePart) {
			print_ocl_TuplePart((ocl.TuplePart) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.MapExp) {
			print_ocl_MapExp((ocl.MapExp) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.MapElement) {
			print_ocl_MapElement((ocl.MapElement) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.EnumLiteralExp) {
			print_ocl_EnumLiteralExp((ocl.EnumLiteralExp) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.OclUndefinedExp) {
			print_ocl_OclUndefinedExp((ocl.OclUndefinedExp) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.NavigationOrAttributeCallExp) {
			print_ocl_NavigationOrAttributeCallExp((ocl.NavigationOrAttributeCallExp) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.OperatorCallExp) {
			print_ocl_OperatorCallExp((ocl.OperatorCallExp) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.CollectionOperationCallExp) {
			print_ocl_CollectionOperationCallExp((ocl.CollectionOperationCallExp) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.IterateExp) {
			print_ocl_IterateExp((ocl.IterateExp) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.IteratorExp) {
			print_ocl_IteratorExp((ocl.IteratorExp) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.LetExp) {
			print_ocl_LetExp((ocl.LetExp) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.IfExp) {
			print_ocl_IfExp((ocl.IfExp) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.Iterator) {
			print_ocl_Iterator((ocl.Iterator) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.Parameter) {
			print_ocl_Parameter((ocl.Parameter) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.StringType) {
			print_ocl_StringType((ocl.StringType) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.BooleanType) {
			print_ocl_BooleanType((ocl.BooleanType) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.IntegerType) {
			print_ocl_IntegerType((ocl.IntegerType) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.RealType) {
			print_ocl_RealType((ocl.RealType) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.BagType) {
			print_ocl_BagType((ocl.BagType) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.OrderedSetType) {
			print_ocl_OrderedSetType((ocl.OrderedSetType) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.SequenceType) {
			print_ocl_SequenceType((ocl.SequenceType) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.SetType) {
			print_ocl_SetType((ocl.SetType) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.OclAnyType) {
			print_ocl_OclAnyType((ocl.OclAnyType) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.TupleType) {
			print_ocl_TupleType((ocl.TupleType) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.TupleTypeAttribute) {
			print_ocl_TupleTypeAttribute((ocl.TupleTypeAttribute) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.OclModelElement) {
			print_ocl_OclModelElement((ocl.OclModelElement) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.MapType) {
			print_ocl_MapType((ocl.MapType) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.OclFeatureDefinition) {
			print_ocl_OclFeatureDefinition((ocl.OclFeatureDefinition) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.OclContextDefinition) {
			print_ocl_OclContextDefinition((ocl.OclContextDefinition) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.Attribute) {
			print_ocl_Attribute((ocl.Attribute) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.Operation) {
			print_ocl_Operation((ocl.Operation) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.OclModel) {
			print_ocl_OclModel((ocl.OclModel) element, globaltab, out);
			return;
		}
		if (element instanceof atl.Unit) {
			print_atl_Unit((atl.Unit) element, globaltab, out);
			return;
		}
		if (element instanceof atl.MatchedRule) {
			print_atl_MatchedRule((atl.MatchedRule) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.OperationCallExp) {
			print_ocl_OperationCallExp((ocl.OperationCallExp) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.VariableDeclaration) {
			print_ocl_VariableDeclaration((ocl.VariableDeclaration) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.CollectionType) {
			print_ocl_CollectionType((ocl.CollectionType) element, globaltab, out);
			return;
		}
		if (element instanceof ocl.OclType) {
			print_ocl_OclType((ocl.OclType) element, globaltab, out);
			return;
		}
		
		addWarningToResource("The printer can not handle " + element.eClass().getName() + " elements", element);
	}
	
	protected atl.resource.atl.mopp.AtlReferenceResolverSwitch getReferenceResolverSwitch() {
		return (atl.resource.atl.mopp.AtlReferenceResolverSwitch) new atl.resource.atl.mopp.AtlMetaInformation().getReferenceResolverSwitch();
	}
	
	protected void addWarningToResource(final String errorMessage, org.eclipse.emf.ecore.EObject cause) {
		atl.resource.atl.IAtlTextResource resource = getResource();
		if (resource == null) {
			// the resource can be null if the printer is used stand alone
			return;
		}
		resource.addProblem(new atl.resource.atl.mopp.AtlProblem(errorMessage, atl.resource.atl.AtlEProblemType.PRINT_PROBLEM, atl.resource.atl.AtlEProblemSeverity.WARNING), cause);
	}
	
	public void setOptions(java.util.Map<?,?> options) {
		this.options = options;
	}
	
	public java.util.Map<?,?> getOptions() {
		return options;
	}
	
	public void setEncoding(String encoding) {
		if (encoding != null) {
			this.encoding = encoding;
		}
	}
	
	public String getEncoding() {
		return encoding;
	}
	
	public atl.resource.atl.IAtlTextResource getResource() {
		return resource;
	}
	
	/**
	 * Calls {@link #doPrint(EObject, PrintWriter, String)} and writes the result to
	 * the underlying output stream.
	 */
	public void print(org.eclipse.emf.ecore.EObject element) throws java.io.IOException {
		java.io.PrintWriter out = new java.io.PrintWriter(new java.io.OutputStreamWriter(new java.io.BufferedOutputStream(outputStream), encoding));
		doPrint(element, out, "");
		out.flush();
		out.close();
	}
	
	public void print_atl_Unit(atl.Unit element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(5);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.UNIT__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.UNIT__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.UNIT__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.UNIT__LIBRARIES));
		printCountingMap.put("libraries", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.UNIT__NAME));
		printCountingMap.put("name", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("Unit");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_atl_Unit_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_atl_Unit_0(atl.Unit element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"libraries"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"name"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.UNIT__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.UNIT__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.UNIT__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.UNIT__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("libraries");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("libraries");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.UNIT__LIBRARIES));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("libraries", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("name");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("name");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.UNIT__NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.UNIT__NAME), element));
						out.print(" ");
					}
					printCountingMap.put("name", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.UNIT__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.UNIT__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_atl_Library(atl.Library element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(6);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LIBRARY__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LIBRARY__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LIBRARY__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LIBRARY__LIBRARIES));
		printCountingMap.put("libraries", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LIBRARY__NAME));
		printCountingMap.put("name", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LIBRARY__HELPERS));
		printCountingMap.put("helpers", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("Library");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_atl_Library_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_atl_Library_0(atl.Library element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"libraries"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"name"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"helpers"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LIBRARY__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.LIBRARY__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LIBRARY__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.LIBRARY__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("libraries");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("libraries");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LIBRARY__LIBRARIES));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("libraries", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("name");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("name");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LIBRARY__NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.LIBRARY__NAME), element));
						out.print(" ");
					}
					printCountingMap.put("name", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("helpers");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("helpers");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LIBRARY__HELPERS));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("helpers", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LIBRARY__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.LIBRARY__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_atl_Query(atl.Query element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(7);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.QUERY__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.QUERY__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.QUERY__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.QUERY__LIBRARIES));
		printCountingMap.put("libraries", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.QUERY__NAME));
		printCountingMap.put("name", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.QUERY__BODY));
		printCountingMap.put("body", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.QUERY__HELPERS));
		printCountingMap.put("helpers", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("Query");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_atl_Query_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_atl_Query_0(atl.Query element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"libraries"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"name"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"body"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"helpers"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.QUERY__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.QUERY__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.QUERY__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.QUERY__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("libraries");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("libraries");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.QUERY__LIBRARIES));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("libraries", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("name");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("name");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.QUERY__NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.QUERY__NAME), element));
						out.print(" ");
					}
					printCountingMap.put("name", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("body");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("body");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.QUERY__BODY));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("body", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("helpers");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("helpers");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.QUERY__HELPERS));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("helpers", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.QUERY__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.QUERY__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_atl_Module(atl.Module element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(9);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MODULE__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MODULE__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MODULE__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MODULE__LIBRARIES));
		printCountingMap.put("libraries", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MODULE__NAME));
		printCountingMap.put("name", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MODULE__IS_REFINING));
		printCountingMap.put("isRefining", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MODULE__IN_MODELS));
		printCountingMap.put("inModels", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MODULE__OUT_MODELS));
		printCountingMap.put("outModels", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MODULE__ELEMENTS));
		printCountingMap.put("elements", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		// print collected hidden tokens
		int count;
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (BooleanTerminal)
		count = printCountingMap.get("isRefining");
		if (count > 0) {
			Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MODULE__IS_REFINING));
			if (o != null) {
			}
			printCountingMap.put("isRefining", count - 1);
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("Module");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_atl_Module_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_atl_Module_0(atl.Module element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"libraries"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"name"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"inModels"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"outModels"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"elements"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MODULE__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.MODULE__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MODULE__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.MODULE__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("libraries");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("libraries");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MODULE__LIBRARIES));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("libraries", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("name");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("name");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MODULE__NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.MODULE__NAME), element));
						out.print(" ");
					}
					printCountingMap.put("name", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("inModels");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("inModels");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MODULE__IN_MODELS));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("inModels", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("outModels");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("outModels");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MODULE__OUT_MODELS));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("outModels", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("elements");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("elements");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MODULE__ELEMENTS));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("elements", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MODULE__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.MODULE__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_atl_Helper(atl.Helper element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(7);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.HELPER__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.HELPER__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.HELPER__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.HELPER__MODULE));
		printCountingMap.put("module", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.HELPER__QUERY));
		printCountingMap.put("query", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.HELPER__LIBRARY));
		printCountingMap.put("library", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.HELPER__DEFINITION));
		printCountingMap.put("definition", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("Helper");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_atl_Helper_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_atl_Helper_0(atl.Helper element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"module"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"query"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"library"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"definition"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.HELPER__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.HELPER__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.HELPER__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.HELPER__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("module");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("module");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.HELPER__MODULE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getModuleElementModuleReferenceResolver().deResolve((atl.Module) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(atl.AtlPackage.HELPER__MODULE)), element.eClass().getEStructuralFeature(atl.AtlPackage.HELPER__MODULE), element));
						out.print(" ");
					}
					printCountingMap.put("module", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("query");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("query");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.HELPER__QUERY));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getHelperQueryReferenceResolver().deResolve((atl.Query) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(atl.AtlPackage.HELPER__QUERY)), element.eClass().getEStructuralFeature(atl.AtlPackage.HELPER__QUERY), element));
						out.print(" ");
					}
					printCountingMap.put("query", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("library");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("library");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.HELPER__LIBRARY));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getHelperLibraryReferenceResolver().deResolve((atl.Library) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(atl.AtlPackage.HELPER__LIBRARY)), element.eClass().getEStructuralFeature(atl.AtlPackage.HELPER__LIBRARY), element));
						out.print(" ");
					}
					printCountingMap.put("library", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("definition");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("definition");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.HELPER__DEFINITION));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("definition", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.HELPER__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.HELPER__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_atl_MatchedRule(atl.MatchedRule element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(14);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MATCHED_RULE__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MATCHED_RULE__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MATCHED_RULE__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MATCHED_RULE__MODULE));
		printCountingMap.put("module", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MATCHED_RULE__OUT_PATTERN));
		printCountingMap.put("outPattern", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MATCHED_RULE__ACTION_BLOCK));
		printCountingMap.put("actionBlock", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MATCHED_RULE__VARIABLES));
		printCountingMap.put("variables", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MATCHED_RULE__NAME));
		printCountingMap.put("name", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MATCHED_RULE__IN_PATTERN));
		printCountingMap.put("inPattern", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MATCHED_RULE__CHILDREN));
		printCountingMap.put("children", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MATCHED_RULE__SUPER_RULE));
		printCountingMap.put("superRule", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MATCHED_RULE__IS_ABSTRACT));
		printCountingMap.put("isAbstract", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MATCHED_RULE__IS_REFINING));
		printCountingMap.put("isRefining", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MATCHED_RULE__IS_NO_DEFAULT));
		printCountingMap.put("isNoDefault", temp == null ? 0 : 1);
		// print collected hidden tokens
		int count;
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (BooleanTerminal)
		count = printCountingMap.get("isAbstract");
		if (count > 0) {
			Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MATCHED_RULE__IS_ABSTRACT));
			if (o != null) {
			}
			printCountingMap.put("isAbstract", count - 1);
		}
		// DEFINITION PART BEGINS (BooleanTerminal)
		count = printCountingMap.get("isRefining");
		if (count > 0) {
			Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MATCHED_RULE__IS_REFINING));
			if (o != null) {
			}
			printCountingMap.put("isRefining", count - 1);
		}
		// DEFINITION PART BEGINS (BooleanTerminal)
		count = printCountingMap.get("isNoDefault");
		if (count > 0) {
			Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MATCHED_RULE__IS_NO_DEFAULT));
			if (o != null) {
			}
			printCountingMap.put("isNoDefault", count - 1);
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("MatchedRule");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_atl_MatchedRule_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_atl_MatchedRule_0(atl.MatchedRule element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"module"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"outPattern"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"actionBlock"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"variables"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"name"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"inPattern"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"children"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"superRule"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MATCHED_RULE__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.MATCHED_RULE__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MATCHED_RULE__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.MATCHED_RULE__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("module");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("module");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MATCHED_RULE__MODULE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getModuleElementModuleReferenceResolver().deResolve((atl.Module) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(atl.AtlPackage.MATCHED_RULE__MODULE)), element.eClass().getEStructuralFeature(atl.AtlPackage.MATCHED_RULE__MODULE), element));
						out.print(" ");
					}
					printCountingMap.put("module", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("outPattern");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("outPattern");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MATCHED_RULE__OUT_PATTERN));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("outPattern", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("actionBlock");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("actionBlock");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MATCHED_RULE__ACTION_BLOCK));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("actionBlock", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("variables");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("variables");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MATCHED_RULE__VARIABLES));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("variables", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("name");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("name");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MATCHED_RULE__NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.MATCHED_RULE__NAME), element));
						out.print(" ");
					}
					printCountingMap.put("name", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("inPattern");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("inPattern");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MATCHED_RULE__IN_PATTERN));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("inPattern", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("children");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("children");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MATCHED_RULE__CHILDREN));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getMatchedRuleChildrenReferenceResolver().deResolve((atl.MatchedRule) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(atl.AtlPackage.MATCHED_RULE__CHILDREN)), element.eClass().getEStructuralFeature(atl.AtlPackage.MATCHED_RULE__CHILDREN), element));
						out.print(" ");
					}
					printCountingMap.put("children", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("superRule");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("superRule");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MATCHED_RULE__SUPER_RULE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getMatchedRuleSuperRuleReferenceResolver().deResolve((atl.MatchedRule) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(atl.AtlPackage.MATCHED_RULE__SUPER_RULE)), element.eClass().getEStructuralFeature(atl.AtlPackage.MATCHED_RULE__SUPER_RULE), element));
						out.print(" ");
					}
					printCountingMap.put("superRule", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.MATCHED_RULE__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.MATCHED_RULE__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_atl_LazyMatchedRule(atl.LazyMatchedRule element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(15);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LAZY_MATCHED_RULE__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LAZY_MATCHED_RULE__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LAZY_MATCHED_RULE__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LAZY_MATCHED_RULE__MODULE));
		printCountingMap.put("module", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LAZY_MATCHED_RULE__OUT_PATTERN));
		printCountingMap.put("outPattern", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LAZY_MATCHED_RULE__ACTION_BLOCK));
		printCountingMap.put("actionBlock", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LAZY_MATCHED_RULE__VARIABLES));
		printCountingMap.put("variables", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LAZY_MATCHED_RULE__NAME));
		printCountingMap.put("name", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LAZY_MATCHED_RULE__IN_PATTERN));
		printCountingMap.put("inPattern", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LAZY_MATCHED_RULE__CHILDREN));
		printCountingMap.put("children", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LAZY_MATCHED_RULE__SUPER_RULE));
		printCountingMap.put("superRule", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LAZY_MATCHED_RULE__IS_ABSTRACT));
		printCountingMap.put("isAbstract", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LAZY_MATCHED_RULE__IS_REFINING));
		printCountingMap.put("isRefining", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LAZY_MATCHED_RULE__IS_NO_DEFAULT));
		printCountingMap.put("isNoDefault", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LAZY_MATCHED_RULE__IS_UNIQUE));
		printCountingMap.put("isUnique", temp == null ? 0 : 1);
		// print collected hidden tokens
		int count;
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (BooleanTerminal)
		count = printCountingMap.get("isAbstract");
		if (count > 0) {
			Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LAZY_MATCHED_RULE__IS_ABSTRACT));
			if (o != null) {
			}
			printCountingMap.put("isAbstract", count - 1);
		}
		// DEFINITION PART BEGINS (BooleanTerminal)
		count = printCountingMap.get("isRefining");
		if (count > 0) {
			Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LAZY_MATCHED_RULE__IS_REFINING));
			if (o != null) {
			}
			printCountingMap.put("isRefining", count - 1);
		}
		// DEFINITION PART BEGINS (BooleanTerminal)
		count = printCountingMap.get("isNoDefault");
		if (count > 0) {
			Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LAZY_MATCHED_RULE__IS_NO_DEFAULT));
			if (o != null) {
			}
			printCountingMap.put("isNoDefault", count - 1);
		}
		// DEFINITION PART BEGINS (BooleanTerminal)
		count = printCountingMap.get("isUnique");
		if (count > 0) {
			Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LAZY_MATCHED_RULE__IS_UNIQUE));
			if (o != null) {
			}
			printCountingMap.put("isUnique", count - 1);
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("LazyMatchedRule");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_atl_LazyMatchedRule_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_atl_LazyMatchedRule_0(atl.LazyMatchedRule element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"module"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"outPattern"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"actionBlock"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"variables"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"name"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"inPattern"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"children"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"superRule"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LAZY_MATCHED_RULE__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.LAZY_MATCHED_RULE__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LAZY_MATCHED_RULE__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.LAZY_MATCHED_RULE__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("module");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("module");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LAZY_MATCHED_RULE__MODULE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getModuleElementModuleReferenceResolver().deResolve((atl.Module) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(atl.AtlPackage.LAZY_MATCHED_RULE__MODULE)), element.eClass().getEStructuralFeature(atl.AtlPackage.LAZY_MATCHED_RULE__MODULE), element));
						out.print(" ");
					}
					printCountingMap.put("module", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("outPattern");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("outPattern");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LAZY_MATCHED_RULE__OUT_PATTERN));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("outPattern", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("actionBlock");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("actionBlock");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LAZY_MATCHED_RULE__ACTION_BLOCK));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("actionBlock", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("variables");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("variables");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LAZY_MATCHED_RULE__VARIABLES));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("variables", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("name");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("name");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LAZY_MATCHED_RULE__NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.LAZY_MATCHED_RULE__NAME), element));
						out.print(" ");
					}
					printCountingMap.put("name", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("inPattern");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("inPattern");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LAZY_MATCHED_RULE__IN_PATTERN));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("inPattern", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("children");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("children");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LAZY_MATCHED_RULE__CHILDREN));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getMatchedRuleChildrenReferenceResolver().deResolve((atl.MatchedRule) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(atl.AtlPackage.LAZY_MATCHED_RULE__CHILDREN)), element.eClass().getEStructuralFeature(atl.AtlPackage.LAZY_MATCHED_RULE__CHILDREN), element));
						out.print(" ");
					}
					printCountingMap.put("children", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("superRule");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("superRule");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LAZY_MATCHED_RULE__SUPER_RULE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getMatchedRuleSuperRuleReferenceResolver().deResolve((atl.MatchedRule) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(atl.AtlPackage.LAZY_MATCHED_RULE__SUPER_RULE)), element.eClass().getEStructuralFeature(atl.AtlPackage.LAZY_MATCHED_RULE__SUPER_RULE), element));
						out.print(" ");
					}
					printCountingMap.put("superRule", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LAZY_MATCHED_RULE__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.LAZY_MATCHED_RULE__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_atl_CalledRule(atl.CalledRule element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(11);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.CALLED_RULE__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.CALLED_RULE__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.CALLED_RULE__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.CALLED_RULE__MODULE));
		printCountingMap.put("module", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.CALLED_RULE__OUT_PATTERN));
		printCountingMap.put("outPattern", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.CALLED_RULE__ACTION_BLOCK));
		printCountingMap.put("actionBlock", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.CALLED_RULE__VARIABLES));
		printCountingMap.put("variables", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.CALLED_RULE__NAME));
		printCountingMap.put("name", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.CALLED_RULE__PARAMETERS));
		printCountingMap.put("parameters", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.CALLED_RULE__IS_ENTRYPOINT));
		printCountingMap.put("isEntrypoint", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.CALLED_RULE__IS_ENDPOINT));
		printCountingMap.put("isEndpoint", temp == null ? 0 : 1);
		// print collected hidden tokens
		int count;
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (BooleanTerminal)
		count = printCountingMap.get("isEntrypoint");
		if (count > 0) {
			Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.CALLED_RULE__IS_ENTRYPOINT));
			if (o != null) {
			}
			printCountingMap.put("isEntrypoint", count - 1);
		}
		// DEFINITION PART BEGINS (BooleanTerminal)
		count = printCountingMap.get("isEndpoint");
		if (count > 0) {
			Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.CALLED_RULE__IS_ENDPOINT));
			if (o != null) {
			}
			printCountingMap.put("isEndpoint", count - 1);
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("CalledRule");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_atl_CalledRule_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_atl_CalledRule_0(atl.CalledRule element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"module"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"outPattern"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"actionBlock"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"variables"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"name"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"parameters"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.CALLED_RULE__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.CALLED_RULE__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.CALLED_RULE__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.CALLED_RULE__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("module");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("module");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.CALLED_RULE__MODULE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getModuleElementModuleReferenceResolver().deResolve((atl.Module) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(atl.AtlPackage.CALLED_RULE__MODULE)), element.eClass().getEStructuralFeature(atl.AtlPackage.CALLED_RULE__MODULE), element));
						out.print(" ");
					}
					printCountingMap.put("module", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("outPattern");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("outPattern");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.CALLED_RULE__OUT_PATTERN));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("outPattern", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("actionBlock");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("actionBlock");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.CALLED_RULE__ACTION_BLOCK));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("actionBlock", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("variables");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("variables");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.CALLED_RULE__VARIABLES));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("variables", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("name");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("name");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.CALLED_RULE__NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.CALLED_RULE__NAME), element));
						out.print(" ");
					}
					printCountingMap.put("name", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("parameters");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("parameters");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.CALLED_RULE__PARAMETERS));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("parameters", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.CALLED_RULE__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.CALLED_RULE__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_atl_InPattern(atl.InPattern element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(6);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.IN_PATTERN__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.IN_PATTERN__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.IN_PATTERN__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.IN_PATTERN__ELEMENTS));
		printCountingMap.put("elements", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.IN_PATTERN__RULE));
		printCountingMap.put("rule", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.IN_PATTERN__FILTER));
		printCountingMap.put("filter", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("InPattern");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_atl_InPattern_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_atl_InPattern_0(atl.InPattern element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"elements"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"rule"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"filter"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.IN_PATTERN__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.IN_PATTERN__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.IN_PATTERN__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.IN_PATTERN__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("elements");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("elements");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.IN_PATTERN__ELEMENTS));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("elements", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("rule");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("rule");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.IN_PATTERN__RULE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getInPatternRuleReferenceResolver().deResolve((atl.MatchedRule) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(atl.AtlPackage.IN_PATTERN__RULE)), element.eClass().getEStructuralFeature(atl.AtlPackage.IN_PATTERN__RULE), element));
						out.print(" ");
					}
					printCountingMap.put("rule", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("filter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("filter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.IN_PATTERN__FILTER));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("filter", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.IN_PATTERN__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.IN_PATTERN__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_atl_OutPattern(atl.OutPattern element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(6);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.OUT_PATTERN__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.OUT_PATTERN__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.OUT_PATTERN__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.OUT_PATTERN__RULE));
		printCountingMap.put("rule", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.OUT_PATTERN__DROP_PATTERN));
		printCountingMap.put("dropPattern", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.OUT_PATTERN__ELEMENTS));
		printCountingMap.put("elements", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("OutPattern");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_atl_OutPattern_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_atl_OutPattern_0(atl.OutPattern element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"rule"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"dropPattern"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"elements"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.OUT_PATTERN__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.OUT_PATTERN__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.OUT_PATTERN__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.OUT_PATTERN__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("rule");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("rule");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.OUT_PATTERN__RULE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOutPatternRuleReferenceResolver().deResolve((atl.Rule) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(atl.AtlPackage.OUT_PATTERN__RULE)), element.eClass().getEStructuralFeature(atl.AtlPackage.OUT_PATTERN__RULE), element));
						out.print(" ");
					}
					printCountingMap.put("rule", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("dropPattern");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("dropPattern");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.OUT_PATTERN__DROP_PATTERN));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("dropPattern", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("elements");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("elements");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.OUT_PATTERN__ELEMENTS));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("elements", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.OUT_PATTERN__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.OUT_PATTERN__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_atl_DropPattern(atl.DropPattern element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(4);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.DROP_PATTERN__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.DROP_PATTERN__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.DROP_PATTERN__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.DROP_PATTERN__OUT_PATTERN));
		printCountingMap.put("outPattern", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("DropPattern");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_atl_DropPattern_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_atl_DropPattern_0(atl.DropPattern element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"outPattern"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.DROP_PATTERN__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.DROP_PATTERN__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.DROP_PATTERN__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.DROP_PATTERN__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("outPattern");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("outPattern");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.DROP_PATTERN__OUT_PATTERN));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getDropPatternOutPatternReferenceResolver().deResolve((atl.OutPattern) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(atl.AtlPackage.DROP_PATTERN__OUT_PATTERN)), element.eClass().getEStructuralFeature(atl.AtlPackage.DROP_PATTERN__OUT_PATTERN), element));
						out.print(" ");
					}
					printCountingMap.put("outPattern", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.DROP_PATTERN__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.DROP_PATTERN__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_atl_SimpleInPatternElement(atl.SimpleInPatternElement element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(13);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__ID));
		printCountingMap.put("id", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__VAR_NAME));
		printCountingMap.put("varName", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__INIT_EXPRESSION));
		printCountingMap.put("initExpression", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__BASE_EXP));
		printCountingMap.put("baseExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__VARIABLE_EXP));
		printCountingMap.put("variableExp", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__MAPS_TO));
		printCountingMap.put("mapsTo", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__IN_PATTERN));
		printCountingMap.put("inPattern", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__MODELS));
		printCountingMap.put("models", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("SimpleInPatternElement");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_atl_SimpleInPatternElement_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_atl_SimpleInPatternElement_0(atl.SimpleInPatternElement element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"id"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"varName"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initExpression"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"baseExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"variableExp"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"mapsTo"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"inPattern"		));
		if (tempMatchCount > matches) {
			alt = 11;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"models"		));
		if (tempMatchCount > matches) {
			alt = 12;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("id");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("id");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__ID));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__ID), element));
						out.print(" ");
					}
					printCountingMap.put("id", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("varName");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("varName");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__VAR_NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__VAR_NAME), element));
						out.print(" ");
					}
					printCountingMap.put("varName", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initExpression");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("initExpression");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__INIT_EXPRESSION));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("initExpression", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getVariableDeclarationLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__LET_EXP)), element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("baseExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("baseExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__BASE_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getVariableDeclarationBaseExpReferenceResolver().deResolve((ocl.IterateExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__BASE_EXP)), element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__BASE_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("baseExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("variableExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("variableExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__VARIABLE_EXP));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getVariableDeclarationVariableExpReferenceResolver().deResolve((ocl.VariableExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__VARIABLE_EXP)), element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__VARIABLE_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("variableExp", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("mapsTo");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("mapsTo");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__MAPS_TO));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getInPatternElementMapsToReferenceResolver().deResolve((atl.OutPatternElement) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__MAPS_TO)), element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__MAPS_TO), element));
						out.print(" ");
					}
					printCountingMap.put("mapsTo", count - 1);
				}
			}
			break;
			case 11:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("inPattern");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("inPattern");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__IN_PATTERN));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getInPatternElementInPatternReferenceResolver().deResolve((atl.InPattern) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__IN_PATTERN)), element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__IN_PATTERN), element));
						out.print(" ");
					}
					printCountingMap.put("inPattern", count - 1);
				}
			}
			break;
			case 12:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("models");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("models");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__MODELS));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getInPatternElementModelsReferenceResolver().deResolve((ocl.OclModel) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__MODELS)), element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__MODELS), element));
						out.print(" ");
					}
					printCountingMap.put("models", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_IN_PATTERN_ELEMENT__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_atl_SimpleOutPatternElement(atl.SimpleOutPatternElement element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(15);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__ID));
		printCountingMap.put("id", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__VAR_NAME));
		printCountingMap.put("varName", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__INIT_EXPRESSION));
		printCountingMap.put("initExpression", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__BASE_EXP));
		printCountingMap.put("baseExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__VARIABLE_EXP));
		printCountingMap.put("variableExp", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__OUT_PATTERN));
		printCountingMap.put("outPattern", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__SOURCE_ELEMENT));
		printCountingMap.put("sourceElement", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__BINDINGS));
		printCountingMap.put("bindings", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__MODEL));
		printCountingMap.put("model", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__REVERSE_BINDINGS));
		printCountingMap.put("reverseBindings", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("SimpleOutPatternElement");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_atl_SimpleOutPatternElement_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_atl_SimpleOutPatternElement_0(atl.SimpleOutPatternElement element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"id"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"varName"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initExpression"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"baseExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"variableExp"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"outPattern"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"sourceElement"		));
		if (tempMatchCount > matches) {
			alt = 11;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"bindings"		));
		if (tempMatchCount > matches) {
			alt = 12;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"model"		));
		if (tempMatchCount > matches) {
			alt = 13;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"reverseBindings"		));
		if (tempMatchCount > matches) {
			alt = 14;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("id");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("id");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__ID));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__ID), element));
						out.print(" ");
					}
					printCountingMap.put("id", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("varName");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("varName");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__VAR_NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__VAR_NAME), element));
						out.print(" ");
					}
					printCountingMap.put("varName", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initExpression");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("initExpression");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__INIT_EXPRESSION));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("initExpression", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getVariableDeclarationLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__LET_EXP)), element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("baseExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("baseExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__BASE_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getVariableDeclarationBaseExpReferenceResolver().deResolve((ocl.IterateExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__BASE_EXP)), element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__BASE_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("baseExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("variableExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("variableExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__VARIABLE_EXP));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getVariableDeclarationVariableExpReferenceResolver().deResolve((ocl.VariableExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__VARIABLE_EXP)), element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__VARIABLE_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("variableExp", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("outPattern");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("outPattern");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__OUT_PATTERN));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOutPatternElementOutPatternReferenceResolver().deResolve((atl.OutPattern) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__OUT_PATTERN)), element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__OUT_PATTERN), element));
						out.print(" ");
					}
					printCountingMap.put("outPattern", count - 1);
				}
			}
			break;
			case 11:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("sourceElement");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("sourceElement");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__SOURCE_ELEMENT));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOutPatternElementSourceElementReferenceResolver().deResolve((atl.InPatternElement) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__SOURCE_ELEMENT)), element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__SOURCE_ELEMENT), element));
						out.print(" ");
					}
					printCountingMap.put("sourceElement", count - 1);
				}
			}
			break;
			case 12:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("bindings");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("bindings");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__BINDINGS));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("bindings", count - 1);
				}
			}
			break;
			case 13:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("model");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("model");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__MODEL));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOutPatternElementModelReferenceResolver().deResolve((ocl.OclModel) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__MODEL)), element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__MODEL), element));
						out.print(" ");
					}
					printCountingMap.put("model", count - 1);
				}
			}
			break;
			case 14:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("reverseBindings");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("reverseBindings");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__REVERSE_BINDINGS));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("reverseBindings", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.SIMPLE_OUT_PATTERN_ELEMENT__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_atl_ForEachOutPatternElement(atl.ForEachOutPatternElement element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(16);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__ID));
		printCountingMap.put("id", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__VAR_NAME));
		printCountingMap.put("varName", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__INIT_EXPRESSION));
		printCountingMap.put("initExpression", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__BASE_EXP));
		printCountingMap.put("baseExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__VARIABLE_EXP));
		printCountingMap.put("variableExp", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__OUT_PATTERN));
		printCountingMap.put("outPattern", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__SOURCE_ELEMENT));
		printCountingMap.put("sourceElement", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__BINDINGS));
		printCountingMap.put("bindings", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__MODEL));
		printCountingMap.put("model", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__COLLECTION));
		printCountingMap.put("collection", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__ITERATOR));
		printCountingMap.put("iterator", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("ForEachOutPatternElement");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_atl_ForEachOutPatternElement_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_atl_ForEachOutPatternElement_0(atl.ForEachOutPatternElement element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"id"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"varName"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initExpression"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"baseExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"variableExp"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"outPattern"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"sourceElement"		));
		if (tempMatchCount > matches) {
			alt = 11;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"bindings"		));
		if (tempMatchCount > matches) {
			alt = 12;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"model"		));
		if (tempMatchCount > matches) {
			alt = 13;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collection"		));
		if (tempMatchCount > matches) {
			alt = 14;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"iterator"		));
		if (tempMatchCount > matches) {
			alt = 15;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("id");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("id");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__ID));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__ID), element));
						out.print(" ");
					}
					printCountingMap.put("id", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("varName");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("varName");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__VAR_NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__VAR_NAME), element));
						out.print(" ");
					}
					printCountingMap.put("varName", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initExpression");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("initExpression");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__INIT_EXPRESSION));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("initExpression", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getVariableDeclarationLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__LET_EXP)), element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("baseExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("baseExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__BASE_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getVariableDeclarationBaseExpReferenceResolver().deResolve((ocl.IterateExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__BASE_EXP)), element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__BASE_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("baseExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("variableExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("variableExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__VARIABLE_EXP));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getVariableDeclarationVariableExpReferenceResolver().deResolve((ocl.VariableExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__VARIABLE_EXP)), element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__VARIABLE_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("variableExp", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("outPattern");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("outPattern");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__OUT_PATTERN));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOutPatternElementOutPatternReferenceResolver().deResolve((atl.OutPattern) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__OUT_PATTERN)), element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__OUT_PATTERN), element));
						out.print(" ");
					}
					printCountingMap.put("outPattern", count - 1);
				}
			}
			break;
			case 11:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("sourceElement");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("sourceElement");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__SOURCE_ELEMENT));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOutPatternElementSourceElementReferenceResolver().deResolve((atl.InPatternElement) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__SOURCE_ELEMENT)), element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__SOURCE_ELEMENT), element));
						out.print(" ");
					}
					printCountingMap.put("sourceElement", count - 1);
				}
			}
			break;
			case 12:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("bindings");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("bindings");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__BINDINGS));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("bindings", count - 1);
				}
			}
			break;
			case 13:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("model");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("model");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__MODEL));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOutPatternElementModelReferenceResolver().deResolve((ocl.OclModel) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__MODEL)), element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__MODEL), element));
						out.print(" ");
					}
					printCountingMap.put("model", count - 1);
				}
			}
			break;
			case 14:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collection");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("collection");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__COLLECTION));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("collection", count - 1);
				}
			}
			break;
			case 15:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("iterator");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("iterator");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__ITERATOR));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("iterator", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_atl_Binding(atl.Binding element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(7);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.BINDING__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.BINDING__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.BINDING__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.BINDING__VALUE));
		printCountingMap.put("value", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.BINDING__OUT_PATTERN_ELEMENT));
		printCountingMap.put("outPatternElement", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.BINDING__PROPERTY_NAME));
		printCountingMap.put("propertyName", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.BINDING__IS_ASSIGNMENT));
		printCountingMap.put("isAssignment", temp == null ? 0 : 1);
		// print collected hidden tokens
		int count;
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (BooleanTerminal)
		count = printCountingMap.get("isAssignment");
		if (count > 0) {
			Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.BINDING__IS_ASSIGNMENT));
			if (o != null) {
			}
			printCountingMap.put("isAssignment", count - 1);
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("Binding");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_atl_Binding_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_atl_Binding_0(atl.Binding element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"value"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"outPatternElement"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"propertyName"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.BINDING__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.BINDING__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.BINDING__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.BINDING__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("value");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("value");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.BINDING__VALUE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("value", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("outPatternElement");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("outPatternElement");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.BINDING__OUT_PATTERN_ELEMENT));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getBindingOutPatternElementReferenceResolver().deResolve((atl.OutPatternElement) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(atl.AtlPackage.BINDING__OUT_PATTERN_ELEMENT)), element.eClass().getEStructuralFeature(atl.AtlPackage.BINDING__OUT_PATTERN_ELEMENT), element));
						out.print(" ");
					}
					printCountingMap.put("outPatternElement", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("propertyName");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("propertyName");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.BINDING__PROPERTY_NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.BINDING__PROPERTY_NAME), element));
						out.print(" ");
					}
					printCountingMap.put("propertyName", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.BINDING__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.BINDING__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_atl_RuleVariableDeclaration(atl.RuleVariableDeclaration element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(11);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.RULE_VARIABLE_DECLARATION__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.RULE_VARIABLE_DECLARATION__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.RULE_VARIABLE_DECLARATION__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.RULE_VARIABLE_DECLARATION__ID));
		printCountingMap.put("id", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.RULE_VARIABLE_DECLARATION__VAR_NAME));
		printCountingMap.put("varName", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.RULE_VARIABLE_DECLARATION__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.RULE_VARIABLE_DECLARATION__INIT_EXPRESSION));
		printCountingMap.put("initExpression", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.RULE_VARIABLE_DECLARATION__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.RULE_VARIABLE_DECLARATION__BASE_EXP));
		printCountingMap.put("baseExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.RULE_VARIABLE_DECLARATION__VARIABLE_EXP));
		printCountingMap.put("variableExp", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.RULE_VARIABLE_DECLARATION__RULE));
		printCountingMap.put("rule", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("RuleVariableDeclaration");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_atl_RuleVariableDeclaration_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_atl_RuleVariableDeclaration_0(atl.RuleVariableDeclaration element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"id"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"varName"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initExpression"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"baseExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"variableExp"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"rule"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.RULE_VARIABLE_DECLARATION__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.RULE_VARIABLE_DECLARATION__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.RULE_VARIABLE_DECLARATION__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.RULE_VARIABLE_DECLARATION__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("id");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("id");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.RULE_VARIABLE_DECLARATION__ID));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.RULE_VARIABLE_DECLARATION__ID), element));
						out.print(" ");
					}
					printCountingMap.put("id", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("varName");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("varName");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.RULE_VARIABLE_DECLARATION__VAR_NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.RULE_VARIABLE_DECLARATION__VAR_NAME), element));
						out.print(" ");
					}
					printCountingMap.put("varName", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.RULE_VARIABLE_DECLARATION__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initExpression");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("initExpression");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.RULE_VARIABLE_DECLARATION__INIT_EXPRESSION));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("initExpression", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.RULE_VARIABLE_DECLARATION__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getVariableDeclarationLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(atl.AtlPackage.RULE_VARIABLE_DECLARATION__LET_EXP)), element.eClass().getEStructuralFeature(atl.AtlPackage.RULE_VARIABLE_DECLARATION__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("baseExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("baseExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.RULE_VARIABLE_DECLARATION__BASE_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getVariableDeclarationBaseExpReferenceResolver().deResolve((ocl.IterateExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(atl.AtlPackage.RULE_VARIABLE_DECLARATION__BASE_EXP)), element.eClass().getEStructuralFeature(atl.AtlPackage.RULE_VARIABLE_DECLARATION__BASE_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("baseExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("variableExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("variableExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.RULE_VARIABLE_DECLARATION__VARIABLE_EXP));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getVariableDeclarationVariableExpReferenceResolver().deResolve((ocl.VariableExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(atl.AtlPackage.RULE_VARIABLE_DECLARATION__VARIABLE_EXP)), element.eClass().getEStructuralFeature(atl.AtlPackage.RULE_VARIABLE_DECLARATION__VARIABLE_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("variableExp", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("rule");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("rule");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.RULE_VARIABLE_DECLARATION__RULE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getRuleVariableDeclarationRuleReferenceResolver().deResolve((atl.Rule) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(atl.AtlPackage.RULE_VARIABLE_DECLARATION__RULE)), element.eClass().getEStructuralFeature(atl.AtlPackage.RULE_VARIABLE_DECLARATION__RULE), element));
						out.print(" ");
					}
					printCountingMap.put("rule", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.RULE_VARIABLE_DECLARATION__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.RULE_VARIABLE_DECLARATION__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_atl_LibraryRef(atl.LibraryRef element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(5);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LIBRARY_REF__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LIBRARY_REF__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LIBRARY_REF__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LIBRARY_REF__UNIT));
		printCountingMap.put("unit", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LIBRARY_REF__NAME));
		printCountingMap.put("name", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("LibraryRef");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_atl_LibraryRef_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_atl_LibraryRef_0(atl.LibraryRef element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"unit"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"name"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LIBRARY_REF__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.LIBRARY_REF__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LIBRARY_REF__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.LIBRARY_REF__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("unit");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("unit");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LIBRARY_REF__UNIT));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getLibraryRefUnitReferenceResolver().deResolve((atl.Unit) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(atl.AtlPackage.LIBRARY_REF__UNIT)), element.eClass().getEStructuralFeature(atl.AtlPackage.LIBRARY_REF__UNIT), element));
						out.print(" ");
					}
					printCountingMap.put("unit", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("name");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("name");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LIBRARY_REF__NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.LIBRARY_REF__NAME), element));
						out.print(" ");
					}
					printCountingMap.put("name", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.LIBRARY_REF__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.LIBRARY_REF__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_atl_ActionBlock(atl.ActionBlock element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(5);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.ACTION_BLOCK__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.ACTION_BLOCK__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.ACTION_BLOCK__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.ACTION_BLOCK__RULE));
		printCountingMap.put("rule", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.ACTION_BLOCK__STATEMENTS));
		printCountingMap.put("statements", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("ActionBlock");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_atl_ActionBlock_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_atl_ActionBlock_0(atl.ActionBlock element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"rule"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"statements"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.ACTION_BLOCK__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.ACTION_BLOCK__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.ACTION_BLOCK__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.ACTION_BLOCK__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("rule");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("rule");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.ACTION_BLOCK__RULE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getActionBlockRuleReferenceResolver().deResolve((atl.Rule) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(atl.AtlPackage.ACTION_BLOCK__RULE)), element.eClass().getEStructuralFeature(atl.AtlPackage.ACTION_BLOCK__RULE), element));
						out.print(" ");
					}
					printCountingMap.put("rule", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("statements");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("statements");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.ACTION_BLOCK__STATEMENTS));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("statements", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.ACTION_BLOCK__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.ACTION_BLOCK__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_atl_ExpressionStat(atl.ExpressionStat element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(4);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.EXPRESSION_STAT__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.EXPRESSION_STAT__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.EXPRESSION_STAT__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.EXPRESSION_STAT__EXPRESSION));
		printCountingMap.put("expression", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("ExpressionStat");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_atl_ExpressionStat_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_atl_ExpressionStat_0(atl.ExpressionStat element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"expression"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.EXPRESSION_STAT__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.EXPRESSION_STAT__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.EXPRESSION_STAT__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.EXPRESSION_STAT__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("expression");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("expression");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.EXPRESSION_STAT__EXPRESSION));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("expression", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.EXPRESSION_STAT__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.EXPRESSION_STAT__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_atl_BindingStat(atl.BindingStat element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(7);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.BINDING_STAT__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.BINDING_STAT__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.BINDING_STAT__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.BINDING_STAT__SOURCE));
		printCountingMap.put("source", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.BINDING_STAT__PROPERTY_NAME));
		printCountingMap.put("propertyName", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.BINDING_STAT__IS_ASSIGNMENT));
		printCountingMap.put("isAssignment", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.BINDING_STAT__VALUE));
		printCountingMap.put("value", temp == null ? 0 : 1);
		// print collected hidden tokens
		int count;
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (BooleanTerminal)
		count = printCountingMap.get("isAssignment");
		if (count > 0) {
			Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.BINDING_STAT__IS_ASSIGNMENT));
			if (o != null) {
			}
			printCountingMap.put("isAssignment", count - 1);
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("BindingStat");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_atl_BindingStat_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_atl_BindingStat_0(atl.BindingStat element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"source"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"propertyName"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"value"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.BINDING_STAT__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.BINDING_STAT__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.BINDING_STAT__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.BINDING_STAT__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("source");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("source");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.BINDING_STAT__SOURCE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("source", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("propertyName");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("propertyName");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.BINDING_STAT__PROPERTY_NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.BINDING_STAT__PROPERTY_NAME), element));
						out.print(" ");
					}
					printCountingMap.put("propertyName", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("value");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("value");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.BINDING_STAT__VALUE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("value", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.BINDING_STAT__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.BINDING_STAT__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_atl_IfStat(atl.IfStat element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(6);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.IF_STAT__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.IF_STAT__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.IF_STAT__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.IF_STAT__CONDITION));
		printCountingMap.put("condition", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.IF_STAT__THEN_STATEMENTS));
		printCountingMap.put("thenStatements", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.IF_STAT__ELSE_STATEMENTS));
		printCountingMap.put("elseStatements", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("IfStat");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_atl_IfStat_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_atl_IfStat_0(atl.IfStat element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"condition"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"thenStatements"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"elseStatements"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.IF_STAT__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.IF_STAT__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.IF_STAT__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.IF_STAT__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("condition");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("condition");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.IF_STAT__CONDITION));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("condition", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("thenStatements");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("thenStatements");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.IF_STAT__THEN_STATEMENTS));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("thenStatements", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("elseStatements");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("elseStatements");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.IF_STAT__ELSE_STATEMENTS));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("elseStatements", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.IF_STAT__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.IF_STAT__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_atl_ForStat(atl.ForStat element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(6);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_STAT__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_STAT__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_STAT__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_STAT__ITERATOR));
		printCountingMap.put("iterator", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_STAT__COLLECTION));
		printCountingMap.put("collection", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_STAT__STATEMENTS));
		printCountingMap.put("statements", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("ForStat");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_atl_ForStat_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_atl_ForStat_0(atl.ForStat element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"iterator"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collection"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"statements"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_STAT__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_STAT__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_STAT__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_STAT__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("iterator");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("iterator");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_STAT__ITERATOR));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("iterator", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collection");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("collection");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_STAT__COLLECTION));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("collection", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("statements");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("statements");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_STAT__STATEMENTS));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("statements", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_STAT__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(atl.AtlPackage.FOR_STAT__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_VariableExp(ocl.VariableExp element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(16);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__IF_EXP3));
		printCountingMap.put("ifExp3", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__APPLIED_PROPERTY));
		printCountingMap.put("appliedProperty", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__COLLECTION));
		printCountingMap.put("collection", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__LOOP_EXP));
		printCountingMap.put("loopExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__PARENT_OPERATION));
		printCountingMap.put("parentOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__INITIALIZED_VARIABLE));
		printCountingMap.put("initializedVariable", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__IF_EXP2));
		printCountingMap.put("ifExp2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__OWNING_OPERATION));
		printCountingMap.put("owningOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__IF_EXP1));
		printCountingMap.put("ifExp1", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__OWNING_ATTRIBUTE));
		printCountingMap.put("owningAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__REFERRED_VARIABLE));
		printCountingMap.put("referredVariable", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("VariableExp");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_VariableExp_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_VariableExp_0(ocl.VariableExp element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp3"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"appliedProperty"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collection"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"loopExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"parentOperation"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initializedVariable"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp2"		));
		if (tempMatchCount > matches) {
			alt = 11;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningOperation"		));
		if (tempMatchCount > matches) {
			alt = 12;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp1"		));
		if (tempMatchCount > matches) {
			alt = 13;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningAttribute"		));
		if (tempMatchCount > matches) {
			alt = 14;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"referredVariable"		));
		if (tempMatchCount > matches) {
			alt = 15;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp3");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp3");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__IF_EXP3));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp3ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__IF_EXP3)), element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__IF_EXP3), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp3", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("appliedProperty");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("appliedProperty");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__APPLIED_PROPERTY));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionAppliedPropertyReferenceResolver().deResolve((ocl.PropertyCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__APPLIED_PROPERTY)), element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__APPLIED_PROPERTY), element));
						out.print(" ");
					}
					printCountingMap.put("appliedProperty", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collection");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collection");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__COLLECTION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionCollectionReferenceResolver().deResolve((ocl.CollectionExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__COLLECTION)), element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__COLLECTION), element));
						out.print(" ");
					}
					printCountingMap.put("collection", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__LET_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("loopExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("loopExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__LOOP_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLoopExpReferenceResolver().deResolve((ocl.LoopExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__LOOP_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__LOOP_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("loopExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("parentOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("parentOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__PARENT_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionParentOperationReferenceResolver().deResolve((ocl.OperationCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__PARENT_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__PARENT_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("parentOperation", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initializedVariable");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("initializedVariable");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__INITIALIZED_VARIABLE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionInitializedVariableReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__INITIALIZED_VARIABLE)), element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__INITIALIZED_VARIABLE), element));
						out.print(" ");
					}
					printCountingMap.put("initializedVariable", count - 1);
				}
			}
			break;
			case 11:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__IF_EXP2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp2ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__IF_EXP2)), element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__IF_EXP2), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp2", count - 1);
				}
			}
			break;
			case 12:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__OWNING_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__OWNING_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__OWNING_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("owningOperation", count - 1);
				}
			}
			break;
			case 13:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp1");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp1");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__IF_EXP1));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp1ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__IF_EXP1)), element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__IF_EXP1), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp1", count - 1);
				}
			}
			break;
			case 14:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__OWNING_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__OWNING_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__OWNING_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("owningAttribute", count - 1);
				}
			}
			break;
			case 15:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("referredVariable");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("referredVariable");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__REFERRED_VARIABLE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getVariableExpReferredVariableReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__REFERRED_VARIABLE)), element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__REFERRED_VARIABLE), element));
						out.print(" ");
					}
					printCountingMap.put("referredVariable", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_EXP__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_SuperExp(ocl.SuperExp element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(15);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__IF_EXP3));
		printCountingMap.put("ifExp3", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__APPLIED_PROPERTY));
		printCountingMap.put("appliedProperty", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__COLLECTION));
		printCountingMap.put("collection", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__LOOP_EXP));
		printCountingMap.put("loopExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__PARENT_OPERATION));
		printCountingMap.put("parentOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__INITIALIZED_VARIABLE));
		printCountingMap.put("initializedVariable", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__IF_EXP2));
		printCountingMap.put("ifExp2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__OWNING_OPERATION));
		printCountingMap.put("owningOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__IF_EXP1));
		printCountingMap.put("ifExp1", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__OWNING_ATTRIBUTE));
		printCountingMap.put("owningAttribute", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("SuperExp");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_SuperExp_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_SuperExp_0(ocl.SuperExp element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp3"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"appliedProperty"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collection"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"loopExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"parentOperation"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initializedVariable"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp2"		));
		if (tempMatchCount > matches) {
			alt = 11;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningOperation"		));
		if (tempMatchCount > matches) {
			alt = 12;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp1"		));
		if (tempMatchCount > matches) {
			alt = 13;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningAttribute"		));
		if (tempMatchCount > matches) {
			alt = 14;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp3");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp3");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__IF_EXP3));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp3ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__IF_EXP3)), element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__IF_EXP3), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp3", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("appliedProperty");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("appliedProperty");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__APPLIED_PROPERTY));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionAppliedPropertyReferenceResolver().deResolve((ocl.PropertyCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__APPLIED_PROPERTY)), element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__APPLIED_PROPERTY), element));
						out.print(" ");
					}
					printCountingMap.put("appliedProperty", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collection");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collection");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__COLLECTION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionCollectionReferenceResolver().deResolve((ocl.CollectionExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__COLLECTION)), element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__COLLECTION), element));
						out.print(" ");
					}
					printCountingMap.put("collection", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__LET_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("loopExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("loopExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__LOOP_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLoopExpReferenceResolver().deResolve((ocl.LoopExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__LOOP_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__LOOP_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("loopExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("parentOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("parentOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__PARENT_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionParentOperationReferenceResolver().deResolve((ocl.OperationCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__PARENT_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__PARENT_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("parentOperation", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initializedVariable");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("initializedVariable");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__INITIALIZED_VARIABLE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionInitializedVariableReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__INITIALIZED_VARIABLE)), element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__INITIALIZED_VARIABLE), element));
						out.print(" ");
					}
					printCountingMap.put("initializedVariable", count - 1);
				}
			}
			break;
			case 11:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__IF_EXP2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp2ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__IF_EXP2)), element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__IF_EXP2), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp2", count - 1);
				}
			}
			break;
			case 12:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__OWNING_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__OWNING_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__OWNING_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("owningOperation", count - 1);
				}
			}
			break;
			case 13:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp1");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp1");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__IF_EXP1));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp1ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__IF_EXP1)), element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__IF_EXP1), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp1", count - 1);
				}
			}
			break;
			case 14:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__OWNING_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__OWNING_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__OWNING_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("owningAttribute", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.SUPER_EXP__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_StringExp(ocl.StringExp element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(16);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__IF_EXP3));
		printCountingMap.put("ifExp3", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__APPLIED_PROPERTY));
		printCountingMap.put("appliedProperty", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__COLLECTION));
		printCountingMap.put("collection", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__LOOP_EXP));
		printCountingMap.put("loopExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__PARENT_OPERATION));
		printCountingMap.put("parentOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__INITIALIZED_VARIABLE));
		printCountingMap.put("initializedVariable", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__IF_EXP2));
		printCountingMap.put("ifExp2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__OWNING_OPERATION));
		printCountingMap.put("owningOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__IF_EXP1));
		printCountingMap.put("ifExp1", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__OWNING_ATTRIBUTE));
		printCountingMap.put("owningAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__STRING_SYMBOL));
		printCountingMap.put("stringSymbol", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("StringExp");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_StringExp_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_StringExp_0(ocl.StringExp element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp3"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"appliedProperty"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collection"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"loopExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"parentOperation"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initializedVariable"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp2"		));
		if (tempMatchCount > matches) {
			alt = 11;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningOperation"		));
		if (tempMatchCount > matches) {
			alt = 12;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp1"		));
		if (tempMatchCount > matches) {
			alt = 13;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningAttribute"		));
		if (tempMatchCount > matches) {
			alt = 14;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"stringSymbol"		));
		if (tempMatchCount > matches) {
			alt = 15;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp3");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp3");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__IF_EXP3));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp3ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__IF_EXP3)), element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__IF_EXP3), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp3", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("appliedProperty");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("appliedProperty");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__APPLIED_PROPERTY));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionAppliedPropertyReferenceResolver().deResolve((ocl.PropertyCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__APPLIED_PROPERTY)), element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__APPLIED_PROPERTY), element));
						out.print(" ");
					}
					printCountingMap.put("appliedProperty", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collection");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collection");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__COLLECTION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionCollectionReferenceResolver().deResolve((ocl.CollectionExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__COLLECTION)), element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__COLLECTION), element));
						out.print(" ");
					}
					printCountingMap.put("collection", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__LET_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("loopExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("loopExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__LOOP_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLoopExpReferenceResolver().deResolve((ocl.LoopExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__LOOP_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__LOOP_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("loopExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("parentOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("parentOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__PARENT_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionParentOperationReferenceResolver().deResolve((ocl.OperationCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__PARENT_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__PARENT_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("parentOperation", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initializedVariable");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("initializedVariable");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__INITIALIZED_VARIABLE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionInitializedVariableReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__INITIALIZED_VARIABLE)), element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__INITIALIZED_VARIABLE), element));
						out.print(" ");
					}
					printCountingMap.put("initializedVariable", count - 1);
				}
			}
			break;
			case 11:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__IF_EXP2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp2ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__IF_EXP2)), element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__IF_EXP2), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp2", count - 1);
				}
			}
			break;
			case 12:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__OWNING_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__OWNING_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__OWNING_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("owningOperation", count - 1);
				}
			}
			break;
			case 13:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp1");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp1");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__IF_EXP1));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp1ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__IF_EXP1)), element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__IF_EXP1), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp1", count - 1);
				}
			}
			break;
			case 14:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__OWNING_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__OWNING_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__OWNING_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("owningAttribute", count - 1);
				}
			}
			break;
			case 15:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("stringSymbol");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("stringSymbol");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__STRING_SYMBOL));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__STRING_SYMBOL), element));
						out.print(" ");
					}
					printCountingMap.put("stringSymbol", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_EXP__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_BooleanExp(ocl.BooleanExp element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(16);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__IF_EXP3));
		printCountingMap.put("ifExp3", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__APPLIED_PROPERTY));
		printCountingMap.put("appliedProperty", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__COLLECTION));
		printCountingMap.put("collection", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__LOOP_EXP));
		printCountingMap.put("loopExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__PARENT_OPERATION));
		printCountingMap.put("parentOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__INITIALIZED_VARIABLE));
		printCountingMap.put("initializedVariable", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__IF_EXP2));
		printCountingMap.put("ifExp2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__OWNING_OPERATION));
		printCountingMap.put("owningOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__IF_EXP1));
		printCountingMap.put("ifExp1", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__OWNING_ATTRIBUTE));
		printCountingMap.put("owningAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__BOOLEAN_SYMBOL));
		printCountingMap.put("booleanSymbol", temp == null ? 0 : 1);
		// print collected hidden tokens
		int count;
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (BooleanTerminal)
		count = printCountingMap.get("booleanSymbol");
		if (count > 0) {
			Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__BOOLEAN_SYMBOL));
			if (o != null) {
			}
			printCountingMap.put("booleanSymbol", count - 1);
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("BooleanExp");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_BooleanExp_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_BooleanExp_0(ocl.BooleanExp element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp3"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"appliedProperty"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collection"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"loopExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"parentOperation"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initializedVariable"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp2"		));
		if (tempMatchCount > matches) {
			alt = 11;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningOperation"		));
		if (tempMatchCount > matches) {
			alt = 12;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp1"		));
		if (tempMatchCount > matches) {
			alt = 13;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningAttribute"		));
		if (tempMatchCount > matches) {
			alt = 14;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp3");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp3");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__IF_EXP3));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp3ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__IF_EXP3)), element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__IF_EXP3), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp3", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("appliedProperty");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("appliedProperty");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__APPLIED_PROPERTY));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionAppliedPropertyReferenceResolver().deResolve((ocl.PropertyCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__APPLIED_PROPERTY)), element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__APPLIED_PROPERTY), element));
						out.print(" ");
					}
					printCountingMap.put("appliedProperty", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collection");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collection");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__COLLECTION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionCollectionReferenceResolver().deResolve((ocl.CollectionExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__COLLECTION)), element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__COLLECTION), element));
						out.print(" ");
					}
					printCountingMap.put("collection", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__LET_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("loopExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("loopExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__LOOP_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLoopExpReferenceResolver().deResolve((ocl.LoopExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__LOOP_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__LOOP_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("loopExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("parentOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("parentOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__PARENT_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionParentOperationReferenceResolver().deResolve((ocl.OperationCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__PARENT_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__PARENT_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("parentOperation", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initializedVariable");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("initializedVariable");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__INITIALIZED_VARIABLE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionInitializedVariableReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__INITIALIZED_VARIABLE)), element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__INITIALIZED_VARIABLE), element));
						out.print(" ");
					}
					printCountingMap.put("initializedVariable", count - 1);
				}
			}
			break;
			case 11:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__IF_EXP2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp2ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__IF_EXP2)), element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__IF_EXP2), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp2", count - 1);
				}
			}
			break;
			case 12:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__OWNING_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__OWNING_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__OWNING_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("owningOperation", count - 1);
				}
			}
			break;
			case 13:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp1");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp1");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__IF_EXP1));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp1ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__IF_EXP1)), element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__IF_EXP1), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp1", count - 1);
				}
			}
			break;
			case 14:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__OWNING_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__OWNING_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__OWNING_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("owningAttribute", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_EXP__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_RealExp(ocl.RealExp element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(16);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__IF_EXP3));
		printCountingMap.put("ifExp3", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__APPLIED_PROPERTY));
		printCountingMap.put("appliedProperty", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__COLLECTION));
		printCountingMap.put("collection", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__LOOP_EXP));
		printCountingMap.put("loopExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__PARENT_OPERATION));
		printCountingMap.put("parentOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__INITIALIZED_VARIABLE));
		printCountingMap.put("initializedVariable", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__IF_EXP2));
		printCountingMap.put("ifExp2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__OWNING_OPERATION));
		printCountingMap.put("owningOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__IF_EXP1));
		printCountingMap.put("ifExp1", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__OWNING_ATTRIBUTE));
		printCountingMap.put("owningAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__REAL_SYMBOL));
		printCountingMap.put("realSymbol", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("RealExp");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_RealExp_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_RealExp_0(ocl.RealExp element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp3"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"appliedProperty"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collection"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"loopExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"parentOperation"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initializedVariable"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp2"		));
		if (tempMatchCount > matches) {
			alt = 11;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningOperation"		));
		if (tempMatchCount > matches) {
			alt = 12;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp1"		));
		if (tempMatchCount > matches) {
			alt = 13;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningAttribute"		));
		if (tempMatchCount > matches) {
			alt = 14;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"realSymbol"		));
		if (tempMatchCount > matches) {
			alt = 15;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp3");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp3");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__IF_EXP3));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp3ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__IF_EXP3)), element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__IF_EXP3), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp3", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("appliedProperty");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("appliedProperty");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__APPLIED_PROPERTY));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionAppliedPropertyReferenceResolver().deResolve((ocl.PropertyCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__APPLIED_PROPERTY)), element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__APPLIED_PROPERTY), element));
						out.print(" ");
					}
					printCountingMap.put("appliedProperty", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collection");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collection");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__COLLECTION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionCollectionReferenceResolver().deResolve((ocl.CollectionExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__COLLECTION)), element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__COLLECTION), element));
						out.print(" ");
					}
					printCountingMap.put("collection", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__LET_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("loopExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("loopExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__LOOP_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLoopExpReferenceResolver().deResolve((ocl.LoopExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__LOOP_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__LOOP_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("loopExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("parentOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("parentOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__PARENT_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionParentOperationReferenceResolver().deResolve((ocl.OperationCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__PARENT_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__PARENT_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("parentOperation", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initializedVariable");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("initializedVariable");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__INITIALIZED_VARIABLE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionInitializedVariableReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__INITIALIZED_VARIABLE)), element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__INITIALIZED_VARIABLE), element));
						out.print(" ");
					}
					printCountingMap.put("initializedVariable", count - 1);
				}
			}
			break;
			case 11:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__IF_EXP2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp2ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__IF_EXP2)), element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__IF_EXP2), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp2", count - 1);
				}
			}
			break;
			case 12:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__OWNING_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__OWNING_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__OWNING_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("owningOperation", count - 1);
				}
			}
			break;
			case 13:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp1");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp1");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__IF_EXP1));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp1ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__IF_EXP1)), element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__IF_EXP1), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp1", count - 1);
				}
			}
			break;
			case 14:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__OWNING_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__OWNING_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__OWNING_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("owningAttribute", count - 1);
				}
			}
			break;
			case 15:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("realSymbol");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingSpecifiedToken)
				count = printCountingMap.get("realSymbol");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__REAL_SYMBOL));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("FLOAT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__REAL_SYMBOL), element));
						out.print(" ");
					}
					printCountingMap.put("realSymbol", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_EXP__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_IntegerExp(ocl.IntegerExp element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(16);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__IF_EXP3));
		printCountingMap.put("ifExp3", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__APPLIED_PROPERTY));
		printCountingMap.put("appliedProperty", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__COLLECTION));
		printCountingMap.put("collection", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__LOOP_EXP));
		printCountingMap.put("loopExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__PARENT_OPERATION));
		printCountingMap.put("parentOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__INITIALIZED_VARIABLE));
		printCountingMap.put("initializedVariable", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__IF_EXP2));
		printCountingMap.put("ifExp2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__OWNING_OPERATION));
		printCountingMap.put("owningOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__IF_EXP1));
		printCountingMap.put("ifExp1", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__OWNING_ATTRIBUTE));
		printCountingMap.put("owningAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__INTEGER_SYMBOL));
		printCountingMap.put("integerSymbol", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("IntegerExp");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_IntegerExp_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_IntegerExp_0(ocl.IntegerExp element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp3"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"appliedProperty"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collection"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"loopExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"parentOperation"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initializedVariable"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp2"		));
		if (tempMatchCount > matches) {
			alt = 11;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningOperation"		));
		if (tempMatchCount > matches) {
			alt = 12;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp1"		));
		if (tempMatchCount > matches) {
			alt = 13;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningAttribute"		));
		if (tempMatchCount > matches) {
			alt = 14;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"integerSymbol"		));
		if (tempMatchCount > matches) {
			alt = 15;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp3");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp3");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__IF_EXP3));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp3ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__IF_EXP3)), element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__IF_EXP3), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp3", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("appliedProperty");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("appliedProperty");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__APPLIED_PROPERTY));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionAppliedPropertyReferenceResolver().deResolve((ocl.PropertyCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__APPLIED_PROPERTY)), element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__APPLIED_PROPERTY), element));
						out.print(" ");
					}
					printCountingMap.put("appliedProperty", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collection");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collection");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__COLLECTION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionCollectionReferenceResolver().deResolve((ocl.CollectionExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__COLLECTION)), element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__COLLECTION), element));
						out.print(" ");
					}
					printCountingMap.put("collection", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__LET_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("loopExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("loopExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__LOOP_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLoopExpReferenceResolver().deResolve((ocl.LoopExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__LOOP_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__LOOP_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("loopExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("parentOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("parentOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__PARENT_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionParentOperationReferenceResolver().deResolve((ocl.OperationCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__PARENT_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__PARENT_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("parentOperation", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initializedVariable");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("initializedVariable");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__INITIALIZED_VARIABLE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionInitializedVariableReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__INITIALIZED_VARIABLE)), element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__INITIALIZED_VARIABLE), element));
						out.print(" ");
					}
					printCountingMap.put("initializedVariable", count - 1);
				}
			}
			break;
			case 11:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__IF_EXP2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp2ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__IF_EXP2)), element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__IF_EXP2), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp2", count - 1);
				}
			}
			break;
			case 12:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__OWNING_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__OWNING_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__OWNING_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("owningOperation", count - 1);
				}
			}
			break;
			case 13:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp1");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp1");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__IF_EXP1));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp1ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__IF_EXP1)), element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__IF_EXP1), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp1", count - 1);
				}
			}
			break;
			case 14:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__OWNING_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__OWNING_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__OWNING_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("owningAttribute", count - 1);
				}
			}
			break;
			case 15:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("integerSymbol");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingSpecifiedToken)
				count = printCountingMap.get("integerSymbol");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__INTEGER_SYMBOL));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("INTEGER");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__INTEGER_SYMBOL), element));
						out.print(" ");
					}
					printCountingMap.put("integerSymbol", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_EXP__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_BagExp(ocl.BagExp element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(16);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__IF_EXP3));
		printCountingMap.put("ifExp3", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__APPLIED_PROPERTY));
		printCountingMap.put("appliedProperty", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__COLLECTION));
		printCountingMap.put("collection", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__LOOP_EXP));
		printCountingMap.put("loopExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__PARENT_OPERATION));
		printCountingMap.put("parentOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__INITIALIZED_VARIABLE));
		printCountingMap.put("initializedVariable", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__IF_EXP2));
		printCountingMap.put("ifExp2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__OWNING_OPERATION));
		printCountingMap.put("owningOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__IF_EXP1));
		printCountingMap.put("ifExp1", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__OWNING_ATTRIBUTE));
		printCountingMap.put("owningAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__ELEMENTS));
		printCountingMap.put("elements", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("BagExp");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_BagExp_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_BagExp_0(ocl.BagExp element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp3"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"appliedProperty"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collection"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"loopExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"parentOperation"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initializedVariable"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp2"		));
		if (tempMatchCount > matches) {
			alt = 11;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningOperation"		));
		if (tempMatchCount > matches) {
			alt = 12;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp1"		));
		if (tempMatchCount > matches) {
			alt = 13;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningAttribute"		));
		if (tempMatchCount > matches) {
			alt = 14;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"elements"		));
		if (tempMatchCount > matches) {
			alt = 15;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp3");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp3");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__IF_EXP3));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp3ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__IF_EXP3)), element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__IF_EXP3), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp3", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("appliedProperty");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("appliedProperty");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__APPLIED_PROPERTY));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionAppliedPropertyReferenceResolver().deResolve((ocl.PropertyCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__APPLIED_PROPERTY)), element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__APPLIED_PROPERTY), element));
						out.print(" ");
					}
					printCountingMap.put("appliedProperty", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collection");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collection");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__COLLECTION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionCollectionReferenceResolver().deResolve((ocl.CollectionExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__COLLECTION)), element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__COLLECTION), element));
						out.print(" ");
					}
					printCountingMap.put("collection", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__LET_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("loopExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("loopExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__LOOP_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLoopExpReferenceResolver().deResolve((ocl.LoopExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__LOOP_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__LOOP_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("loopExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("parentOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("parentOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__PARENT_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionParentOperationReferenceResolver().deResolve((ocl.OperationCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__PARENT_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__PARENT_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("parentOperation", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initializedVariable");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("initializedVariable");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__INITIALIZED_VARIABLE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionInitializedVariableReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__INITIALIZED_VARIABLE)), element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__INITIALIZED_VARIABLE), element));
						out.print(" ");
					}
					printCountingMap.put("initializedVariable", count - 1);
				}
			}
			break;
			case 11:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__IF_EXP2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp2ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__IF_EXP2)), element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__IF_EXP2), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp2", count - 1);
				}
			}
			break;
			case 12:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__OWNING_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__OWNING_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__OWNING_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("owningOperation", count - 1);
				}
			}
			break;
			case 13:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp1");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp1");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__IF_EXP1));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp1ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__IF_EXP1)), element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__IF_EXP1), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp1", count - 1);
				}
			}
			break;
			case 14:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__OWNING_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__OWNING_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__OWNING_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("owningAttribute", count - 1);
				}
			}
			break;
			case 15:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("elements");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("elements");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__ELEMENTS));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("elements", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_EXP__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_OrderedSetExp(ocl.OrderedSetExp element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(16);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__IF_EXP3));
		printCountingMap.put("ifExp3", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__APPLIED_PROPERTY));
		printCountingMap.put("appliedProperty", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__COLLECTION));
		printCountingMap.put("collection", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__LOOP_EXP));
		printCountingMap.put("loopExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__PARENT_OPERATION));
		printCountingMap.put("parentOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__INITIALIZED_VARIABLE));
		printCountingMap.put("initializedVariable", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__IF_EXP2));
		printCountingMap.put("ifExp2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__OWNING_OPERATION));
		printCountingMap.put("owningOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__IF_EXP1));
		printCountingMap.put("ifExp1", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__OWNING_ATTRIBUTE));
		printCountingMap.put("owningAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__ELEMENTS));
		printCountingMap.put("elements", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("OrderedSetExp");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_OrderedSetExp_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_OrderedSetExp_0(ocl.OrderedSetExp element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp3"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"appliedProperty"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collection"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"loopExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"parentOperation"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initializedVariable"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp2"		));
		if (tempMatchCount > matches) {
			alt = 11;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningOperation"		));
		if (tempMatchCount > matches) {
			alt = 12;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp1"		));
		if (tempMatchCount > matches) {
			alt = 13;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningAttribute"		));
		if (tempMatchCount > matches) {
			alt = 14;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"elements"		));
		if (tempMatchCount > matches) {
			alt = 15;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp3");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp3");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__IF_EXP3));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp3ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__IF_EXP3)), element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__IF_EXP3), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp3", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("appliedProperty");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("appliedProperty");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__APPLIED_PROPERTY));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionAppliedPropertyReferenceResolver().deResolve((ocl.PropertyCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__APPLIED_PROPERTY)), element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__APPLIED_PROPERTY), element));
						out.print(" ");
					}
					printCountingMap.put("appliedProperty", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collection");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collection");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__COLLECTION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionCollectionReferenceResolver().deResolve((ocl.CollectionExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__COLLECTION)), element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__COLLECTION), element));
						out.print(" ");
					}
					printCountingMap.put("collection", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__LET_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("loopExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("loopExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__LOOP_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLoopExpReferenceResolver().deResolve((ocl.LoopExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__LOOP_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__LOOP_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("loopExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("parentOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("parentOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__PARENT_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionParentOperationReferenceResolver().deResolve((ocl.OperationCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__PARENT_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__PARENT_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("parentOperation", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initializedVariable");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("initializedVariable");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__INITIALIZED_VARIABLE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionInitializedVariableReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__INITIALIZED_VARIABLE)), element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__INITIALIZED_VARIABLE), element));
						out.print(" ");
					}
					printCountingMap.put("initializedVariable", count - 1);
				}
			}
			break;
			case 11:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__IF_EXP2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp2ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__IF_EXP2)), element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__IF_EXP2), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp2", count - 1);
				}
			}
			break;
			case 12:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__OWNING_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__OWNING_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__OWNING_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("owningOperation", count - 1);
				}
			}
			break;
			case 13:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp1");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp1");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__IF_EXP1));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp1ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__IF_EXP1)), element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__IF_EXP1), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp1", count - 1);
				}
			}
			break;
			case 14:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__OWNING_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__OWNING_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__OWNING_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("owningAttribute", count - 1);
				}
			}
			break;
			case 15:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("elements");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("elements");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__ELEMENTS));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("elements", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_EXP__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_SequenceExp(ocl.SequenceExp element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(16);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__IF_EXP3));
		printCountingMap.put("ifExp3", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__APPLIED_PROPERTY));
		printCountingMap.put("appliedProperty", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__COLLECTION));
		printCountingMap.put("collection", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__LOOP_EXP));
		printCountingMap.put("loopExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__PARENT_OPERATION));
		printCountingMap.put("parentOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__INITIALIZED_VARIABLE));
		printCountingMap.put("initializedVariable", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__IF_EXP2));
		printCountingMap.put("ifExp2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__OWNING_OPERATION));
		printCountingMap.put("owningOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__IF_EXP1));
		printCountingMap.put("ifExp1", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__OWNING_ATTRIBUTE));
		printCountingMap.put("owningAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__ELEMENTS));
		printCountingMap.put("elements", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("SequenceExp");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_SequenceExp_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_SequenceExp_0(ocl.SequenceExp element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp3"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"appliedProperty"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collection"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"loopExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"parentOperation"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initializedVariable"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp2"		));
		if (tempMatchCount > matches) {
			alt = 11;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningOperation"		));
		if (tempMatchCount > matches) {
			alt = 12;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp1"		));
		if (tempMatchCount > matches) {
			alt = 13;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningAttribute"		));
		if (tempMatchCount > matches) {
			alt = 14;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"elements"		));
		if (tempMatchCount > matches) {
			alt = 15;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp3");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp3");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__IF_EXP3));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp3ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__IF_EXP3)), element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__IF_EXP3), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp3", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("appliedProperty");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("appliedProperty");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__APPLIED_PROPERTY));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionAppliedPropertyReferenceResolver().deResolve((ocl.PropertyCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__APPLIED_PROPERTY)), element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__APPLIED_PROPERTY), element));
						out.print(" ");
					}
					printCountingMap.put("appliedProperty", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collection");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collection");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__COLLECTION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionCollectionReferenceResolver().deResolve((ocl.CollectionExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__COLLECTION)), element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__COLLECTION), element));
						out.print(" ");
					}
					printCountingMap.put("collection", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__LET_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("loopExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("loopExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__LOOP_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLoopExpReferenceResolver().deResolve((ocl.LoopExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__LOOP_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__LOOP_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("loopExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("parentOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("parentOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__PARENT_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionParentOperationReferenceResolver().deResolve((ocl.OperationCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__PARENT_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__PARENT_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("parentOperation", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initializedVariable");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("initializedVariable");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__INITIALIZED_VARIABLE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionInitializedVariableReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__INITIALIZED_VARIABLE)), element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__INITIALIZED_VARIABLE), element));
						out.print(" ");
					}
					printCountingMap.put("initializedVariable", count - 1);
				}
			}
			break;
			case 11:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__IF_EXP2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp2ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__IF_EXP2)), element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__IF_EXP2), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp2", count - 1);
				}
			}
			break;
			case 12:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__OWNING_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__OWNING_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__OWNING_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("owningOperation", count - 1);
				}
			}
			break;
			case 13:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp1");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp1");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__IF_EXP1));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp1ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__IF_EXP1)), element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__IF_EXP1), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp1", count - 1);
				}
			}
			break;
			case 14:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__OWNING_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__OWNING_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__OWNING_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("owningAttribute", count - 1);
				}
			}
			break;
			case 15:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("elements");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("elements");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__ELEMENTS));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("elements", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_EXP__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_SetExp(ocl.SetExp element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(16);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__IF_EXP3));
		printCountingMap.put("ifExp3", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__APPLIED_PROPERTY));
		printCountingMap.put("appliedProperty", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__COLLECTION));
		printCountingMap.put("collection", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__LOOP_EXP));
		printCountingMap.put("loopExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__PARENT_OPERATION));
		printCountingMap.put("parentOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__INITIALIZED_VARIABLE));
		printCountingMap.put("initializedVariable", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__IF_EXP2));
		printCountingMap.put("ifExp2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__OWNING_OPERATION));
		printCountingMap.put("owningOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__IF_EXP1));
		printCountingMap.put("ifExp1", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__OWNING_ATTRIBUTE));
		printCountingMap.put("owningAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__ELEMENTS));
		printCountingMap.put("elements", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("SetExp");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_SetExp_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_SetExp_0(ocl.SetExp element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp3"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"appliedProperty"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collection"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"loopExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"parentOperation"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initializedVariable"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp2"		));
		if (tempMatchCount > matches) {
			alt = 11;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningOperation"		));
		if (tempMatchCount > matches) {
			alt = 12;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp1"		));
		if (tempMatchCount > matches) {
			alt = 13;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningAttribute"		));
		if (tempMatchCount > matches) {
			alt = 14;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"elements"		));
		if (tempMatchCount > matches) {
			alt = 15;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp3");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp3");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__IF_EXP3));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp3ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__IF_EXP3)), element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__IF_EXP3), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp3", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("appliedProperty");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("appliedProperty");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__APPLIED_PROPERTY));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionAppliedPropertyReferenceResolver().deResolve((ocl.PropertyCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__APPLIED_PROPERTY)), element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__APPLIED_PROPERTY), element));
						out.print(" ");
					}
					printCountingMap.put("appliedProperty", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collection");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collection");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__COLLECTION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionCollectionReferenceResolver().deResolve((ocl.CollectionExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__COLLECTION)), element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__COLLECTION), element));
						out.print(" ");
					}
					printCountingMap.put("collection", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__LET_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("loopExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("loopExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__LOOP_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLoopExpReferenceResolver().deResolve((ocl.LoopExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__LOOP_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__LOOP_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("loopExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("parentOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("parentOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__PARENT_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionParentOperationReferenceResolver().deResolve((ocl.OperationCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__PARENT_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__PARENT_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("parentOperation", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initializedVariable");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("initializedVariable");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__INITIALIZED_VARIABLE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionInitializedVariableReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__INITIALIZED_VARIABLE)), element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__INITIALIZED_VARIABLE), element));
						out.print(" ");
					}
					printCountingMap.put("initializedVariable", count - 1);
				}
			}
			break;
			case 11:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__IF_EXP2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp2ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__IF_EXP2)), element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__IF_EXP2), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp2", count - 1);
				}
			}
			break;
			case 12:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__OWNING_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__OWNING_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__OWNING_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("owningOperation", count - 1);
				}
			}
			break;
			case 13:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp1");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp1");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__IF_EXP1));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp1ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__IF_EXP1)), element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__IF_EXP1), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp1", count - 1);
				}
			}
			break;
			case 14:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__OWNING_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__OWNING_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__OWNING_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("owningAttribute", count - 1);
				}
			}
			break;
			case 15:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("elements");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("elements");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__ELEMENTS));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("elements", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.SET_EXP__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_TupleExp(ocl.TupleExp element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(16);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__IF_EXP3));
		printCountingMap.put("ifExp3", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__APPLIED_PROPERTY));
		printCountingMap.put("appliedProperty", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__COLLECTION));
		printCountingMap.put("collection", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__LOOP_EXP));
		printCountingMap.put("loopExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__PARENT_OPERATION));
		printCountingMap.put("parentOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__INITIALIZED_VARIABLE));
		printCountingMap.put("initializedVariable", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__IF_EXP2));
		printCountingMap.put("ifExp2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__OWNING_OPERATION));
		printCountingMap.put("owningOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__IF_EXP1));
		printCountingMap.put("ifExp1", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__OWNING_ATTRIBUTE));
		printCountingMap.put("owningAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__TUPLE_PART));
		printCountingMap.put("tuplePart", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("TupleExp");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_TupleExp_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_TupleExp_0(ocl.TupleExp element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp3"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"appliedProperty"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collection"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"loopExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"parentOperation"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initializedVariable"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp2"		));
		if (tempMatchCount > matches) {
			alt = 11;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningOperation"		));
		if (tempMatchCount > matches) {
			alt = 12;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp1"		));
		if (tempMatchCount > matches) {
			alt = 13;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningAttribute"		));
		if (tempMatchCount > matches) {
			alt = 14;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"tuplePart"		));
		if (tempMatchCount > matches) {
			alt = 15;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp3");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp3");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__IF_EXP3));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp3ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__IF_EXP3)), element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__IF_EXP3), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp3", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("appliedProperty");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("appliedProperty");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__APPLIED_PROPERTY));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionAppliedPropertyReferenceResolver().deResolve((ocl.PropertyCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__APPLIED_PROPERTY)), element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__APPLIED_PROPERTY), element));
						out.print(" ");
					}
					printCountingMap.put("appliedProperty", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collection");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collection");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__COLLECTION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionCollectionReferenceResolver().deResolve((ocl.CollectionExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__COLLECTION)), element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__COLLECTION), element));
						out.print(" ");
					}
					printCountingMap.put("collection", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__LET_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("loopExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("loopExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__LOOP_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLoopExpReferenceResolver().deResolve((ocl.LoopExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__LOOP_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__LOOP_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("loopExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("parentOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("parentOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__PARENT_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionParentOperationReferenceResolver().deResolve((ocl.OperationCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__PARENT_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__PARENT_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("parentOperation", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initializedVariable");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("initializedVariable");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__INITIALIZED_VARIABLE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionInitializedVariableReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__INITIALIZED_VARIABLE)), element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__INITIALIZED_VARIABLE), element));
						out.print(" ");
					}
					printCountingMap.put("initializedVariable", count - 1);
				}
			}
			break;
			case 11:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__IF_EXP2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp2ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__IF_EXP2)), element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__IF_EXP2), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp2", count - 1);
				}
			}
			break;
			case 12:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__OWNING_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__OWNING_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__OWNING_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("owningOperation", count - 1);
				}
			}
			break;
			case 13:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp1");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp1");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__IF_EXP1));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp1ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__IF_EXP1)), element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__IF_EXP1), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp1", count - 1);
				}
			}
			break;
			case 14:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__OWNING_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__OWNING_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__OWNING_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("owningAttribute", count - 1);
				}
			}
			break;
			case 15:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("tuplePart");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("tuplePart");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__TUPLE_PART));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("tuplePart", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_EXP__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_TuplePart(ocl.TuplePart element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(11);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_PART__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_PART__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_PART__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_PART__ID));
		printCountingMap.put("id", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_PART__VAR_NAME));
		printCountingMap.put("varName", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_PART__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_PART__INIT_EXPRESSION));
		printCountingMap.put("initExpression", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_PART__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_PART__BASE_EXP));
		printCountingMap.put("baseExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_PART__VARIABLE_EXP));
		printCountingMap.put("variableExp", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_PART__TUPLE));
		printCountingMap.put("tuple", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("TuplePart");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_TuplePart_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_TuplePart_0(ocl.TuplePart element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"id"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"varName"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initExpression"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"baseExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"variableExp"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"tuple"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_PART__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_PART__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_PART__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_PART__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("id");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("id");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_PART__ID));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_PART__ID), element));
						out.print(" ");
					}
					printCountingMap.put("id", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("varName");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("varName");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_PART__VAR_NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_PART__VAR_NAME), element));
						out.print(" ");
					}
					printCountingMap.put("varName", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_PART__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initExpression");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("initExpression");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_PART__INIT_EXPRESSION));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("initExpression", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_PART__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getVariableDeclarationLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_PART__LET_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_PART__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("baseExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("baseExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_PART__BASE_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getVariableDeclarationBaseExpReferenceResolver().deResolve((ocl.IterateExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_PART__BASE_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_PART__BASE_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("baseExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("variableExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("variableExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_PART__VARIABLE_EXP));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getVariableDeclarationVariableExpReferenceResolver().deResolve((ocl.VariableExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_PART__VARIABLE_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_PART__VARIABLE_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("variableExp", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("tuple");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("tuple");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_PART__TUPLE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getTuplePartTupleReferenceResolver().deResolve((ocl.TupleExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_PART__TUPLE)), element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_PART__TUPLE), element));
						out.print(" ");
					}
					printCountingMap.put("tuple", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_PART__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_PART__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_MapExp(ocl.MapExp element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(16);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__IF_EXP3));
		printCountingMap.put("ifExp3", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__APPLIED_PROPERTY));
		printCountingMap.put("appliedProperty", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__COLLECTION));
		printCountingMap.put("collection", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__LOOP_EXP));
		printCountingMap.put("loopExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__PARENT_OPERATION));
		printCountingMap.put("parentOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__INITIALIZED_VARIABLE));
		printCountingMap.put("initializedVariable", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__IF_EXP2));
		printCountingMap.put("ifExp2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__OWNING_OPERATION));
		printCountingMap.put("owningOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__IF_EXP1));
		printCountingMap.put("ifExp1", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__OWNING_ATTRIBUTE));
		printCountingMap.put("owningAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__ELEMENTS));
		printCountingMap.put("elements", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("MapExp");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_MapExp_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_MapExp_0(ocl.MapExp element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp3"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"appliedProperty"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collection"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"loopExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"parentOperation"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initializedVariable"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp2"		));
		if (tempMatchCount > matches) {
			alt = 11;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningOperation"		));
		if (tempMatchCount > matches) {
			alt = 12;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp1"		));
		if (tempMatchCount > matches) {
			alt = 13;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningAttribute"		));
		if (tempMatchCount > matches) {
			alt = 14;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"elements"		));
		if (tempMatchCount > matches) {
			alt = 15;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp3");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp3");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__IF_EXP3));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp3ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__IF_EXP3)), element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__IF_EXP3), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp3", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("appliedProperty");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("appliedProperty");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__APPLIED_PROPERTY));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionAppliedPropertyReferenceResolver().deResolve((ocl.PropertyCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__APPLIED_PROPERTY)), element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__APPLIED_PROPERTY), element));
						out.print(" ");
					}
					printCountingMap.put("appliedProperty", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collection");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collection");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__COLLECTION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionCollectionReferenceResolver().deResolve((ocl.CollectionExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__COLLECTION)), element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__COLLECTION), element));
						out.print(" ");
					}
					printCountingMap.put("collection", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__LET_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("loopExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("loopExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__LOOP_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLoopExpReferenceResolver().deResolve((ocl.LoopExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__LOOP_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__LOOP_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("loopExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("parentOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("parentOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__PARENT_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionParentOperationReferenceResolver().deResolve((ocl.OperationCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__PARENT_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__PARENT_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("parentOperation", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initializedVariable");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("initializedVariable");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__INITIALIZED_VARIABLE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionInitializedVariableReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__INITIALIZED_VARIABLE)), element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__INITIALIZED_VARIABLE), element));
						out.print(" ");
					}
					printCountingMap.put("initializedVariable", count - 1);
				}
			}
			break;
			case 11:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__IF_EXP2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp2ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__IF_EXP2)), element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__IF_EXP2), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp2", count - 1);
				}
			}
			break;
			case 12:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__OWNING_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__OWNING_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__OWNING_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("owningOperation", count - 1);
				}
			}
			break;
			case 13:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp1");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp1");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__IF_EXP1));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp1ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__IF_EXP1)), element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__IF_EXP1), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp1", count - 1);
				}
			}
			break;
			case 14:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__OWNING_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__OWNING_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__OWNING_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("owningAttribute", count - 1);
				}
			}
			break;
			case 15:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("elements");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("elements");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__ELEMENTS));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("elements", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_EXP__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_MapElement(ocl.MapElement element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(6);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_ELEMENT__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_ELEMENT__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_ELEMENT__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_ELEMENT__MAP));
		printCountingMap.put("map", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_ELEMENT__KEY));
		printCountingMap.put("key", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_ELEMENT__VALUE));
		printCountingMap.put("value", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("MapElement");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_MapElement_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_MapElement_0(ocl.MapElement element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"map"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"key"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"value"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_ELEMENT__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_ELEMENT__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_ELEMENT__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_ELEMENT__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("map");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("map");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_ELEMENT__MAP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getMapElementMapReferenceResolver().deResolve((ocl.MapExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_ELEMENT__MAP)), element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_ELEMENT__MAP), element));
						out.print(" ");
					}
					printCountingMap.put("map", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("key");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("key");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_ELEMENT__KEY));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("key", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("value");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("value");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_ELEMENT__VALUE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("value", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_ELEMENT__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_ELEMENT__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_EnumLiteralExp(ocl.EnumLiteralExp element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(16);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__IF_EXP3));
		printCountingMap.put("ifExp3", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__APPLIED_PROPERTY));
		printCountingMap.put("appliedProperty", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__COLLECTION));
		printCountingMap.put("collection", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__LOOP_EXP));
		printCountingMap.put("loopExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__PARENT_OPERATION));
		printCountingMap.put("parentOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__INITIALIZED_VARIABLE));
		printCountingMap.put("initializedVariable", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__IF_EXP2));
		printCountingMap.put("ifExp2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__OWNING_OPERATION));
		printCountingMap.put("owningOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__IF_EXP1));
		printCountingMap.put("ifExp1", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__OWNING_ATTRIBUTE));
		printCountingMap.put("owningAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__NAME));
		printCountingMap.put("name", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("EnumLiteralExp");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_EnumLiteralExp_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_EnumLiteralExp_0(ocl.EnumLiteralExp element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp3"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"appliedProperty"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collection"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"loopExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"parentOperation"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initializedVariable"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp2"		));
		if (tempMatchCount > matches) {
			alt = 11;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningOperation"		));
		if (tempMatchCount > matches) {
			alt = 12;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp1"		));
		if (tempMatchCount > matches) {
			alt = 13;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningAttribute"		));
		if (tempMatchCount > matches) {
			alt = 14;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"name"		));
		if (tempMatchCount > matches) {
			alt = 15;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp3");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp3");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__IF_EXP3));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp3ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__IF_EXP3)), element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__IF_EXP3), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp3", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("appliedProperty");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("appliedProperty");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__APPLIED_PROPERTY));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionAppliedPropertyReferenceResolver().deResolve((ocl.PropertyCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__APPLIED_PROPERTY)), element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__APPLIED_PROPERTY), element));
						out.print(" ");
					}
					printCountingMap.put("appliedProperty", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collection");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collection");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__COLLECTION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionCollectionReferenceResolver().deResolve((ocl.CollectionExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__COLLECTION)), element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__COLLECTION), element));
						out.print(" ");
					}
					printCountingMap.put("collection", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__LET_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("loopExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("loopExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__LOOP_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLoopExpReferenceResolver().deResolve((ocl.LoopExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__LOOP_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__LOOP_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("loopExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("parentOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("parentOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__PARENT_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionParentOperationReferenceResolver().deResolve((ocl.OperationCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__PARENT_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__PARENT_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("parentOperation", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initializedVariable");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("initializedVariable");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__INITIALIZED_VARIABLE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionInitializedVariableReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__INITIALIZED_VARIABLE)), element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__INITIALIZED_VARIABLE), element));
						out.print(" ");
					}
					printCountingMap.put("initializedVariable", count - 1);
				}
			}
			break;
			case 11:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__IF_EXP2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp2ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__IF_EXP2)), element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__IF_EXP2), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp2", count - 1);
				}
			}
			break;
			case 12:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__OWNING_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__OWNING_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__OWNING_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("owningOperation", count - 1);
				}
			}
			break;
			case 13:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp1");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp1");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__IF_EXP1));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp1ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__IF_EXP1)), element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__IF_EXP1), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp1", count - 1);
				}
			}
			break;
			case 14:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__OWNING_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__OWNING_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__OWNING_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("owningAttribute", count - 1);
				}
			}
			break;
			case 15:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("name");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("name");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__NAME), element));
						out.print(" ");
					}
					printCountingMap.put("name", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.ENUM_LITERAL_EXP__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_OclUndefinedExp(ocl.OclUndefinedExp element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(15);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__IF_EXP3));
		printCountingMap.put("ifExp3", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__APPLIED_PROPERTY));
		printCountingMap.put("appliedProperty", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__COLLECTION));
		printCountingMap.put("collection", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__LOOP_EXP));
		printCountingMap.put("loopExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__PARENT_OPERATION));
		printCountingMap.put("parentOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__INITIALIZED_VARIABLE));
		printCountingMap.put("initializedVariable", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__IF_EXP2));
		printCountingMap.put("ifExp2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__OWNING_OPERATION));
		printCountingMap.put("owningOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__IF_EXP1));
		printCountingMap.put("ifExp1", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__OWNING_ATTRIBUTE));
		printCountingMap.put("owningAttribute", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("OclUndefinedExp");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_OclUndefinedExp_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_OclUndefinedExp_0(ocl.OclUndefinedExp element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp3"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"appliedProperty"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collection"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"loopExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"parentOperation"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initializedVariable"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp2"		));
		if (tempMatchCount > matches) {
			alt = 11;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningOperation"		));
		if (tempMatchCount > matches) {
			alt = 12;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp1"		));
		if (tempMatchCount > matches) {
			alt = 13;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningAttribute"		));
		if (tempMatchCount > matches) {
			alt = 14;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp3");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp3");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__IF_EXP3));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp3ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__IF_EXP3)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__IF_EXP3), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp3", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("appliedProperty");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("appliedProperty");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__APPLIED_PROPERTY));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionAppliedPropertyReferenceResolver().deResolve((ocl.PropertyCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__APPLIED_PROPERTY)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__APPLIED_PROPERTY), element));
						out.print(" ");
					}
					printCountingMap.put("appliedProperty", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collection");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collection");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__COLLECTION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionCollectionReferenceResolver().deResolve((ocl.CollectionExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__COLLECTION)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__COLLECTION), element));
						out.print(" ");
					}
					printCountingMap.put("collection", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__LET_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("loopExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("loopExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__LOOP_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLoopExpReferenceResolver().deResolve((ocl.LoopExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__LOOP_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__LOOP_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("loopExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("parentOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("parentOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__PARENT_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionParentOperationReferenceResolver().deResolve((ocl.OperationCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__PARENT_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__PARENT_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("parentOperation", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initializedVariable");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("initializedVariable");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__INITIALIZED_VARIABLE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionInitializedVariableReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__INITIALIZED_VARIABLE)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__INITIALIZED_VARIABLE), element));
						out.print(" ");
					}
					printCountingMap.put("initializedVariable", count - 1);
				}
			}
			break;
			case 11:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__IF_EXP2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp2ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__IF_EXP2)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__IF_EXP2), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp2", count - 1);
				}
			}
			break;
			case 12:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__OWNING_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__OWNING_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__OWNING_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("owningOperation", count - 1);
				}
			}
			break;
			case 13:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp1");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp1");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__IF_EXP1));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp1ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__IF_EXP1)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__IF_EXP1), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp1", count - 1);
				}
			}
			break;
			case 14:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__OWNING_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__OWNING_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__OWNING_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("owningAttribute", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_UNDEFINED_EXP__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_NavigationOrAttributeCallExp(ocl.NavigationOrAttributeCallExp element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(17);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__IF_EXP3));
		printCountingMap.put("ifExp3", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__APPLIED_PROPERTY));
		printCountingMap.put("appliedProperty", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__COLLECTION));
		printCountingMap.put("collection", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__LOOP_EXP));
		printCountingMap.put("loopExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__PARENT_OPERATION));
		printCountingMap.put("parentOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__INITIALIZED_VARIABLE));
		printCountingMap.put("initializedVariable", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__IF_EXP2));
		printCountingMap.put("ifExp2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__OWNING_OPERATION));
		printCountingMap.put("owningOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__IF_EXP1));
		printCountingMap.put("ifExp1", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__OWNING_ATTRIBUTE));
		printCountingMap.put("owningAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__SOURCE));
		printCountingMap.put("source", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__NAME));
		printCountingMap.put("name", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("NavigationOrAttributeCallExp");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_NavigationOrAttributeCallExp_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_NavigationOrAttributeCallExp_0(ocl.NavigationOrAttributeCallExp element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp3"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"appliedProperty"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collection"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"loopExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"parentOperation"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initializedVariable"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp2"		));
		if (tempMatchCount > matches) {
			alt = 11;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningOperation"		));
		if (tempMatchCount > matches) {
			alt = 12;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp1"		));
		if (tempMatchCount > matches) {
			alt = 13;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningAttribute"		));
		if (tempMatchCount > matches) {
			alt = 14;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"source"		));
		if (tempMatchCount > matches) {
			alt = 15;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"name"		));
		if (tempMatchCount > matches) {
			alt = 16;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp3");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp3");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__IF_EXP3));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp3ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__IF_EXP3)), element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__IF_EXP3), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp3", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("appliedProperty");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("appliedProperty");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__APPLIED_PROPERTY));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionAppliedPropertyReferenceResolver().deResolve((ocl.PropertyCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__APPLIED_PROPERTY)), element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__APPLIED_PROPERTY), element));
						out.print(" ");
					}
					printCountingMap.put("appliedProperty", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collection");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collection");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__COLLECTION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionCollectionReferenceResolver().deResolve((ocl.CollectionExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__COLLECTION)), element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__COLLECTION), element));
						out.print(" ");
					}
					printCountingMap.put("collection", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__LET_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("loopExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("loopExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__LOOP_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLoopExpReferenceResolver().deResolve((ocl.LoopExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__LOOP_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__LOOP_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("loopExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("parentOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("parentOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__PARENT_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionParentOperationReferenceResolver().deResolve((ocl.OperationCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__PARENT_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__PARENT_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("parentOperation", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initializedVariable");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("initializedVariable");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__INITIALIZED_VARIABLE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionInitializedVariableReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__INITIALIZED_VARIABLE)), element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__INITIALIZED_VARIABLE), element));
						out.print(" ");
					}
					printCountingMap.put("initializedVariable", count - 1);
				}
			}
			break;
			case 11:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__IF_EXP2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp2ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__IF_EXP2)), element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__IF_EXP2), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp2", count - 1);
				}
			}
			break;
			case 12:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__OWNING_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__OWNING_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__OWNING_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("owningOperation", count - 1);
				}
			}
			break;
			case 13:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp1");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp1");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__IF_EXP1));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp1ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__IF_EXP1)), element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__IF_EXP1), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp1", count - 1);
				}
			}
			break;
			case 14:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__OWNING_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__OWNING_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__OWNING_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("owningAttribute", count - 1);
				}
			}
			break;
			case 15:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("source");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("source");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__SOURCE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("source", count - 1);
				}
			}
			break;
			case 16:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("name");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("name");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__NAME), element));
						out.print(" ");
					}
					printCountingMap.put("name", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL_EXP__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_OperationCallExp(ocl.OperationCallExp element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(18);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__IF_EXP3));
		printCountingMap.put("ifExp3", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__APPLIED_PROPERTY));
		printCountingMap.put("appliedProperty", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__COLLECTION));
		printCountingMap.put("collection", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__LOOP_EXP));
		printCountingMap.put("loopExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__PARENT_OPERATION));
		printCountingMap.put("parentOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__INITIALIZED_VARIABLE));
		printCountingMap.put("initializedVariable", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__IF_EXP2));
		printCountingMap.put("ifExp2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__OWNING_OPERATION));
		printCountingMap.put("owningOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__IF_EXP1));
		printCountingMap.put("ifExp1", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__OWNING_ATTRIBUTE));
		printCountingMap.put("owningAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__SOURCE));
		printCountingMap.put("source", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__ARGUMENTS));
		printCountingMap.put("arguments", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__OPERATION_NAME));
		printCountingMap.put("operationName", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("OperationCallExp");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_OperationCallExp_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_OperationCallExp_0(ocl.OperationCallExp element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp3"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"appliedProperty"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collection"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"loopExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"parentOperation"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initializedVariable"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp2"		));
		if (tempMatchCount > matches) {
			alt = 11;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningOperation"		));
		if (tempMatchCount > matches) {
			alt = 12;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp1"		));
		if (tempMatchCount > matches) {
			alt = 13;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningAttribute"		));
		if (tempMatchCount > matches) {
			alt = 14;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"source"		));
		if (tempMatchCount > matches) {
			alt = 15;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"arguments"		));
		if (tempMatchCount > matches) {
			alt = 16;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"operationName"		));
		if (tempMatchCount > matches) {
			alt = 17;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp3");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp3");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__IF_EXP3));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp3ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__IF_EXP3)), element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__IF_EXP3), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp3", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("appliedProperty");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("appliedProperty");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__APPLIED_PROPERTY));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionAppliedPropertyReferenceResolver().deResolve((ocl.PropertyCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__APPLIED_PROPERTY)), element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__APPLIED_PROPERTY), element));
						out.print(" ");
					}
					printCountingMap.put("appliedProperty", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collection");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collection");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__COLLECTION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionCollectionReferenceResolver().deResolve((ocl.CollectionExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__COLLECTION)), element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__COLLECTION), element));
						out.print(" ");
					}
					printCountingMap.put("collection", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__LET_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("loopExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("loopExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__LOOP_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLoopExpReferenceResolver().deResolve((ocl.LoopExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__LOOP_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__LOOP_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("loopExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("parentOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("parentOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__PARENT_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionParentOperationReferenceResolver().deResolve((ocl.OperationCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__PARENT_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__PARENT_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("parentOperation", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initializedVariable");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("initializedVariable");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__INITIALIZED_VARIABLE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionInitializedVariableReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__INITIALIZED_VARIABLE)), element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__INITIALIZED_VARIABLE), element));
						out.print(" ");
					}
					printCountingMap.put("initializedVariable", count - 1);
				}
			}
			break;
			case 11:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__IF_EXP2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp2ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__IF_EXP2)), element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__IF_EXP2), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp2", count - 1);
				}
			}
			break;
			case 12:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__OWNING_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__OWNING_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__OWNING_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("owningOperation", count - 1);
				}
			}
			break;
			case 13:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp1");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp1");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__IF_EXP1));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp1ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__IF_EXP1)), element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__IF_EXP1), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp1", count - 1);
				}
			}
			break;
			case 14:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__OWNING_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__OWNING_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__OWNING_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("owningAttribute", count - 1);
				}
			}
			break;
			case 15:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("source");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("source");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__SOURCE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("source", count - 1);
				}
			}
			break;
			case 16:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("arguments");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("arguments");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__ARGUMENTS));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("arguments", count - 1);
				}
			}
			break;
			case 17:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("operationName");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("operationName");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__OPERATION_NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__OPERATION_NAME), element));
						out.print(" ");
					}
					printCountingMap.put("operationName", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION_CALL_EXP__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_OperatorCallExp(ocl.OperatorCallExp element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(18);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__IF_EXP3));
		printCountingMap.put("ifExp3", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__APPLIED_PROPERTY));
		printCountingMap.put("appliedProperty", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__COLLECTION));
		printCountingMap.put("collection", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__LOOP_EXP));
		printCountingMap.put("loopExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__PARENT_OPERATION));
		printCountingMap.put("parentOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__INITIALIZED_VARIABLE));
		printCountingMap.put("initializedVariable", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__IF_EXP2));
		printCountingMap.put("ifExp2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__OWNING_OPERATION));
		printCountingMap.put("owningOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__IF_EXP1));
		printCountingMap.put("ifExp1", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__OWNING_ATTRIBUTE));
		printCountingMap.put("owningAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__SOURCE));
		printCountingMap.put("source", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__ARGUMENTS));
		printCountingMap.put("arguments", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__OPERATION_NAME));
		printCountingMap.put("operationName", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("OperatorCallExp");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_OperatorCallExp_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_OperatorCallExp_0(ocl.OperatorCallExp element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp3"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"appliedProperty"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collection"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"loopExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"parentOperation"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initializedVariable"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp2"		));
		if (tempMatchCount > matches) {
			alt = 11;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningOperation"		));
		if (tempMatchCount > matches) {
			alt = 12;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp1"		));
		if (tempMatchCount > matches) {
			alt = 13;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningAttribute"		));
		if (tempMatchCount > matches) {
			alt = 14;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"source"		));
		if (tempMatchCount > matches) {
			alt = 15;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"arguments"		));
		if (tempMatchCount > matches) {
			alt = 16;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"operationName"		));
		if (tempMatchCount > matches) {
			alt = 17;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp3");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp3");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__IF_EXP3));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp3ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__IF_EXP3)), element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__IF_EXP3), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp3", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("appliedProperty");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("appliedProperty");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__APPLIED_PROPERTY));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionAppliedPropertyReferenceResolver().deResolve((ocl.PropertyCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__APPLIED_PROPERTY)), element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__APPLIED_PROPERTY), element));
						out.print(" ");
					}
					printCountingMap.put("appliedProperty", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collection");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collection");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__COLLECTION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionCollectionReferenceResolver().deResolve((ocl.CollectionExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__COLLECTION)), element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__COLLECTION), element));
						out.print(" ");
					}
					printCountingMap.put("collection", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__LET_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("loopExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("loopExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__LOOP_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLoopExpReferenceResolver().deResolve((ocl.LoopExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__LOOP_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__LOOP_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("loopExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("parentOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("parentOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__PARENT_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionParentOperationReferenceResolver().deResolve((ocl.OperationCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__PARENT_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__PARENT_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("parentOperation", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initializedVariable");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("initializedVariable");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__INITIALIZED_VARIABLE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionInitializedVariableReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__INITIALIZED_VARIABLE)), element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__INITIALIZED_VARIABLE), element));
						out.print(" ");
					}
					printCountingMap.put("initializedVariable", count - 1);
				}
			}
			break;
			case 11:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__IF_EXP2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp2ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__IF_EXP2)), element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__IF_EXP2), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp2", count - 1);
				}
			}
			break;
			case 12:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__OWNING_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__OWNING_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__OWNING_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("owningOperation", count - 1);
				}
			}
			break;
			case 13:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp1");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp1");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__IF_EXP1));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp1ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__IF_EXP1)), element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__IF_EXP1), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp1", count - 1);
				}
			}
			break;
			case 14:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__OWNING_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__OWNING_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__OWNING_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("owningAttribute", count - 1);
				}
			}
			break;
			case 15:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("source");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("source");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__SOURCE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("source", count - 1);
				}
			}
			break;
			case 16:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("arguments");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("arguments");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__ARGUMENTS));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("arguments", count - 1);
				}
			}
			break;
			case 17:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("operationName");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("operationName");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__OPERATION_NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__OPERATION_NAME), element));
						out.print(" ");
					}
					printCountingMap.put("operationName", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATOR_CALL_EXP__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_CollectionOperationCallExp(ocl.CollectionOperationCallExp element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(18);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__IF_EXP3));
		printCountingMap.put("ifExp3", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__APPLIED_PROPERTY));
		printCountingMap.put("appliedProperty", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__COLLECTION));
		printCountingMap.put("collection", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__LOOP_EXP));
		printCountingMap.put("loopExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__PARENT_OPERATION));
		printCountingMap.put("parentOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__INITIALIZED_VARIABLE));
		printCountingMap.put("initializedVariable", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__IF_EXP2));
		printCountingMap.put("ifExp2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__OWNING_OPERATION));
		printCountingMap.put("owningOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__IF_EXP1));
		printCountingMap.put("ifExp1", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__OWNING_ATTRIBUTE));
		printCountingMap.put("owningAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__SOURCE));
		printCountingMap.put("source", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__ARGUMENTS));
		printCountingMap.put("arguments", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__OPERATION_NAME));
		printCountingMap.put("operationName", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("CollectionOperationCallExp");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_CollectionOperationCallExp_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_CollectionOperationCallExp_0(ocl.CollectionOperationCallExp element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp3"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"appliedProperty"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collection"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"loopExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"parentOperation"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initializedVariable"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp2"		));
		if (tempMatchCount > matches) {
			alt = 11;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningOperation"		));
		if (tempMatchCount > matches) {
			alt = 12;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp1"		));
		if (tempMatchCount > matches) {
			alt = 13;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningAttribute"		));
		if (tempMatchCount > matches) {
			alt = 14;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"source"		));
		if (tempMatchCount > matches) {
			alt = 15;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"arguments"		));
		if (tempMatchCount > matches) {
			alt = 16;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"operationName"		));
		if (tempMatchCount > matches) {
			alt = 17;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp3");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp3");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__IF_EXP3));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp3ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__IF_EXP3)), element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__IF_EXP3), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp3", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("appliedProperty");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("appliedProperty");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__APPLIED_PROPERTY));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionAppliedPropertyReferenceResolver().deResolve((ocl.PropertyCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__APPLIED_PROPERTY)), element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__APPLIED_PROPERTY), element));
						out.print(" ");
					}
					printCountingMap.put("appliedProperty", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collection");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collection");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__COLLECTION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionCollectionReferenceResolver().deResolve((ocl.CollectionExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__COLLECTION)), element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__COLLECTION), element));
						out.print(" ");
					}
					printCountingMap.put("collection", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__LET_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("loopExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("loopExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__LOOP_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLoopExpReferenceResolver().deResolve((ocl.LoopExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__LOOP_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__LOOP_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("loopExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("parentOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("parentOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__PARENT_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionParentOperationReferenceResolver().deResolve((ocl.OperationCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__PARENT_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__PARENT_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("parentOperation", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initializedVariable");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("initializedVariable");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__INITIALIZED_VARIABLE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionInitializedVariableReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__INITIALIZED_VARIABLE)), element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__INITIALIZED_VARIABLE), element));
						out.print(" ");
					}
					printCountingMap.put("initializedVariable", count - 1);
				}
			}
			break;
			case 11:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__IF_EXP2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp2ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__IF_EXP2)), element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__IF_EXP2), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp2", count - 1);
				}
			}
			break;
			case 12:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__OWNING_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__OWNING_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__OWNING_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("owningOperation", count - 1);
				}
			}
			break;
			case 13:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp1");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp1");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__IF_EXP1));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp1ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__IF_EXP1)), element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__IF_EXP1), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp1", count - 1);
				}
			}
			break;
			case 14:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__OWNING_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__OWNING_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__OWNING_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("owningAttribute", count - 1);
				}
			}
			break;
			case 15:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("source");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("source");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__SOURCE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("source", count - 1);
				}
			}
			break;
			case 16:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("arguments");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("arguments");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__ARGUMENTS));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("arguments", count - 1);
				}
			}
			break;
			case 17:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("operationName");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("operationName");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__OPERATION_NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__OPERATION_NAME), element));
						out.print(" ");
					}
					printCountingMap.put("operationName", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_OPERATION_CALL_EXP__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_IterateExp(ocl.IterateExp element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(19);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__IF_EXP3));
		printCountingMap.put("ifExp3", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__APPLIED_PROPERTY));
		printCountingMap.put("appliedProperty", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__COLLECTION));
		printCountingMap.put("collection", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__LOOP_EXP));
		printCountingMap.put("loopExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__PARENT_OPERATION));
		printCountingMap.put("parentOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__INITIALIZED_VARIABLE));
		printCountingMap.put("initializedVariable", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__IF_EXP2));
		printCountingMap.put("ifExp2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__OWNING_OPERATION));
		printCountingMap.put("owningOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__IF_EXP1));
		printCountingMap.put("ifExp1", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__OWNING_ATTRIBUTE));
		printCountingMap.put("owningAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__SOURCE));
		printCountingMap.put("source", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__BODY));
		printCountingMap.put("body", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__ITERATORS));
		printCountingMap.put("iterators", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__RESULT));
		printCountingMap.put("result", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("IterateExp");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_IterateExp_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_IterateExp_0(ocl.IterateExp element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp3"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"appliedProperty"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collection"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"loopExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"parentOperation"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initializedVariable"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp2"		));
		if (tempMatchCount > matches) {
			alt = 11;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningOperation"		));
		if (tempMatchCount > matches) {
			alt = 12;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp1"		));
		if (tempMatchCount > matches) {
			alt = 13;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningAttribute"		));
		if (tempMatchCount > matches) {
			alt = 14;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"source"		));
		if (tempMatchCount > matches) {
			alt = 15;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"body"		));
		if (tempMatchCount > matches) {
			alt = 16;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"iterators"		));
		if (tempMatchCount > matches) {
			alt = 17;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"result"		));
		if (tempMatchCount > matches) {
			alt = 18;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp3");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp3");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__IF_EXP3));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp3ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__IF_EXP3)), element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__IF_EXP3), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp3", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("appliedProperty");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("appliedProperty");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__APPLIED_PROPERTY));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionAppliedPropertyReferenceResolver().deResolve((ocl.PropertyCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__APPLIED_PROPERTY)), element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__APPLIED_PROPERTY), element));
						out.print(" ");
					}
					printCountingMap.put("appliedProperty", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collection");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collection");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__COLLECTION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionCollectionReferenceResolver().deResolve((ocl.CollectionExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__COLLECTION)), element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__COLLECTION), element));
						out.print(" ");
					}
					printCountingMap.put("collection", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__LET_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("loopExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("loopExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__LOOP_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLoopExpReferenceResolver().deResolve((ocl.LoopExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__LOOP_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__LOOP_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("loopExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("parentOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("parentOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__PARENT_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionParentOperationReferenceResolver().deResolve((ocl.OperationCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__PARENT_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__PARENT_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("parentOperation", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initializedVariable");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("initializedVariable");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__INITIALIZED_VARIABLE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionInitializedVariableReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__INITIALIZED_VARIABLE)), element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__INITIALIZED_VARIABLE), element));
						out.print(" ");
					}
					printCountingMap.put("initializedVariable", count - 1);
				}
			}
			break;
			case 11:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__IF_EXP2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp2ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__IF_EXP2)), element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__IF_EXP2), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp2", count - 1);
				}
			}
			break;
			case 12:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__OWNING_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__OWNING_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__OWNING_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("owningOperation", count - 1);
				}
			}
			break;
			case 13:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp1");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp1");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__IF_EXP1));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp1ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__IF_EXP1)), element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__IF_EXP1), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp1", count - 1);
				}
			}
			break;
			case 14:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__OWNING_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__OWNING_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__OWNING_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("owningAttribute", count - 1);
				}
			}
			break;
			case 15:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("source");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("source");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__SOURCE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("source", count - 1);
				}
			}
			break;
			case 16:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("body");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("body");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__BODY));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("body", count - 1);
				}
			}
			break;
			case 17:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("iterators");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("iterators");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__ITERATORS));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("iterators", count - 1);
				}
			}
			break;
			case 18:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("result");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("result");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__RESULT));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("result", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATE_EXP__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_IteratorExp(ocl.IteratorExp element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(19);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__IF_EXP3));
		printCountingMap.put("ifExp3", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__APPLIED_PROPERTY));
		printCountingMap.put("appliedProperty", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__COLLECTION));
		printCountingMap.put("collection", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__LOOP_EXP));
		printCountingMap.put("loopExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__PARENT_OPERATION));
		printCountingMap.put("parentOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__INITIALIZED_VARIABLE));
		printCountingMap.put("initializedVariable", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__IF_EXP2));
		printCountingMap.put("ifExp2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__OWNING_OPERATION));
		printCountingMap.put("owningOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__IF_EXP1));
		printCountingMap.put("ifExp1", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__OWNING_ATTRIBUTE));
		printCountingMap.put("owningAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__SOURCE));
		printCountingMap.put("source", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__BODY));
		printCountingMap.put("body", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__ITERATORS));
		printCountingMap.put("iterators", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__NAME));
		printCountingMap.put("name", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("IteratorExp");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_IteratorExp_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_IteratorExp_0(ocl.IteratorExp element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp3"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"appliedProperty"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collection"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"loopExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"parentOperation"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initializedVariable"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp2"		));
		if (tempMatchCount > matches) {
			alt = 11;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningOperation"		));
		if (tempMatchCount > matches) {
			alt = 12;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp1"		));
		if (tempMatchCount > matches) {
			alt = 13;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningAttribute"		));
		if (tempMatchCount > matches) {
			alt = 14;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"source"		));
		if (tempMatchCount > matches) {
			alt = 15;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"body"		));
		if (tempMatchCount > matches) {
			alt = 16;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"iterators"		));
		if (tempMatchCount > matches) {
			alt = 17;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"name"		));
		if (tempMatchCount > matches) {
			alt = 18;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp3");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp3");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__IF_EXP3));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp3ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__IF_EXP3)), element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__IF_EXP3), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp3", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("appliedProperty");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("appliedProperty");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__APPLIED_PROPERTY));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionAppliedPropertyReferenceResolver().deResolve((ocl.PropertyCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__APPLIED_PROPERTY)), element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__APPLIED_PROPERTY), element));
						out.print(" ");
					}
					printCountingMap.put("appliedProperty", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collection");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collection");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__COLLECTION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionCollectionReferenceResolver().deResolve((ocl.CollectionExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__COLLECTION)), element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__COLLECTION), element));
						out.print(" ");
					}
					printCountingMap.put("collection", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__LET_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("loopExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("loopExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__LOOP_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLoopExpReferenceResolver().deResolve((ocl.LoopExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__LOOP_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__LOOP_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("loopExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("parentOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("parentOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__PARENT_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionParentOperationReferenceResolver().deResolve((ocl.OperationCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__PARENT_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__PARENT_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("parentOperation", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initializedVariable");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("initializedVariable");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__INITIALIZED_VARIABLE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionInitializedVariableReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__INITIALIZED_VARIABLE)), element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__INITIALIZED_VARIABLE), element));
						out.print(" ");
					}
					printCountingMap.put("initializedVariable", count - 1);
				}
			}
			break;
			case 11:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__IF_EXP2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp2ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__IF_EXP2)), element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__IF_EXP2), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp2", count - 1);
				}
			}
			break;
			case 12:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__OWNING_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__OWNING_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__OWNING_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("owningOperation", count - 1);
				}
			}
			break;
			case 13:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp1");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp1");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__IF_EXP1));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp1ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__IF_EXP1)), element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__IF_EXP1), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp1", count - 1);
				}
			}
			break;
			case 14:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__OWNING_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__OWNING_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__OWNING_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("owningAttribute", count - 1);
				}
			}
			break;
			case 15:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("source");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("source");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__SOURCE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("source", count - 1);
				}
			}
			break;
			case 16:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("body");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("body");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__BODY));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("body", count - 1);
				}
			}
			break;
			case 17:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("iterators");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("iterators");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__ITERATORS));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("iterators", count - 1);
				}
			}
			break;
			case 18:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("name");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("name");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__NAME), element));
						out.print(" ");
					}
					printCountingMap.put("name", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR_EXP__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_LetExp(ocl.LetExp element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(17);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__IF_EXP3));
		printCountingMap.put("ifExp3", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__APPLIED_PROPERTY));
		printCountingMap.put("appliedProperty", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__COLLECTION));
		printCountingMap.put("collection", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__LOOP_EXP));
		printCountingMap.put("loopExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__PARENT_OPERATION));
		printCountingMap.put("parentOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__INITIALIZED_VARIABLE));
		printCountingMap.put("initializedVariable", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__IF_EXP2));
		printCountingMap.put("ifExp2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__OWNING_OPERATION));
		printCountingMap.put("owningOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__IF_EXP1));
		printCountingMap.put("ifExp1", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__OWNING_ATTRIBUTE));
		printCountingMap.put("owningAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__VARIABLE));
		printCountingMap.put("variable", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__IN_));
		printCountingMap.put("in_", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("LetExp");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_LetExp_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_LetExp_0(ocl.LetExp element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp3"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"appliedProperty"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collection"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"loopExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"parentOperation"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initializedVariable"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp2"		));
		if (tempMatchCount > matches) {
			alt = 11;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningOperation"		));
		if (tempMatchCount > matches) {
			alt = 12;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp1"		));
		if (tempMatchCount > matches) {
			alt = 13;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningAttribute"		));
		if (tempMatchCount > matches) {
			alt = 14;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"variable"		));
		if (tempMatchCount > matches) {
			alt = 15;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"in_"		));
		if (tempMatchCount > matches) {
			alt = 16;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp3");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp3");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__IF_EXP3));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp3ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__IF_EXP3)), element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__IF_EXP3), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp3", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("appliedProperty");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("appliedProperty");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__APPLIED_PROPERTY));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionAppliedPropertyReferenceResolver().deResolve((ocl.PropertyCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__APPLIED_PROPERTY)), element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__APPLIED_PROPERTY), element));
						out.print(" ");
					}
					printCountingMap.put("appliedProperty", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collection");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collection");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__COLLECTION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionCollectionReferenceResolver().deResolve((ocl.CollectionExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__COLLECTION)), element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__COLLECTION), element));
						out.print(" ");
					}
					printCountingMap.put("collection", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__LET_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("loopExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("loopExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__LOOP_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLoopExpReferenceResolver().deResolve((ocl.LoopExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__LOOP_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__LOOP_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("loopExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("parentOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("parentOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__PARENT_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionParentOperationReferenceResolver().deResolve((ocl.OperationCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__PARENT_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__PARENT_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("parentOperation", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initializedVariable");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("initializedVariable");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__INITIALIZED_VARIABLE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionInitializedVariableReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__INITIALIZED_VARIABLE)), element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__INITIALIZED_VARIABLE), element));
						out.print(" ");
					}
					printCountingMap.put("initializedVariable", count - 1);
				}
			}
			break;
			case 11:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__IF_EXP2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp2ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__IF_EXP2)), element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__IF_EXP2), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp2", count - 1);
				}
			}
			break;
			case 12:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__OWNING_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__OWNING_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__OWNING_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("owningOperation", count - 1);
				}
			}
			break;
			case 13:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp1");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp1");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__IF_EXP1));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp1ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__IF_EXP1)), element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__IF_EXP1), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp1", count - 1);
				}
			}
			break;
			case 14:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__OWNING_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__OWNING_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__OWNING_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("owningAttribute", count - 1);
				}
			}
			break;
			case 15:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("variable");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("variable");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__VARIABLE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("variable", count - 1);
				}
			}
			break;
			case 16:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("in_");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("in_");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__IN_));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("in_", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.LET_EXP__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_IfExp(ocl.IfExp element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(18);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__IF_EXP3));
		printCountingMap.put("ifExp3", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__APPLIED_PROPERTY));
		printCountingMap.put("appliedProperty", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__COLLECTION));
		printCountingMap.put("collection", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__LOOP_EXP));
		printCountingMap.put("loopExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__PARENT_OPERATION));
		printCountingMap.put("parentOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__INITIALIZED_VARIABLE));
		printCountingMap.put("initializedVariable", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__IF_EXP2));
		printCountingMap.put("ifExp2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__OWNING_OPERATION));
		printCountingMap.put("owningOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__IF_EXP1));
		printCountingMap.put("ifExp1", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__OWNING_ATTRIBUTE));
		printCountingMap.put("owningAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__THEN_EXPRESSION));
		printCountingMap.put("thenExpression", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__CONDITION));
		printCountingMap.put("condition", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__ELSE_EXPRESSION));
		printCountingMap.put("elseExpression", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("IfExp");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_IfExp_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_IfExp_0(ocl.IfExp element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp3"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"appliedProperty"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collection"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"loopExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"parentOperation"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initializedVariable"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp2"		));
		if (tempMatchCount > matches) {
			alt = 11;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningOperation"		));
		if (tempMatchCount > matches) {
			alt = 12;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp1"		));
		if (tempMatchCount > matches) {
			alt = 13;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningAttribute"		));
		if (tempMatchCount > matches) {
			alt = 14;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"thenExpression"		));
		if (tempMatchCount > matches) {
			alt = 15;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"condition"		));
		if (tempMatchCount > matches) {
			alt = 16;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"elseExpression"		));
		if (tempMatchCount > matches) {
			alt = 17;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp3");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp3");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__IF_EXP3));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp3ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__IF_EXP3)), element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__IF_EXP3), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp3", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("appliedProperty");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("appliedProperty");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__APPLIED_PROPERTY));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionAppliedPropertyReferenceResolver().deResolve((ocl.PropertyCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__APPLIED_PROPERTY)), element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__APPLIED_PROPERTY), element));
						out.print(" ");
					}
					printCountingMap.put("appliedProperty", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collection");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collection");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__COLLECTION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionCollectionReferenceResolver().deResolve((ocl.CollectionExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__COLLECTION)), element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__COLLECTION), element));
						out.print(" ");
					}
					printCountingMap.put("collection", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__LET_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("loopExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("loopExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__LOOP_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLoopExpReferenceResolver().deResolve((ocl.LoopExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__LOOP_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__LOOP_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("loopExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("parentOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("parentOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__PARENT_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionParentOperationReferenceResolver().deResolve((ocl.OperationCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__PARENT_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__PARENT_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("parentOperation", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initializedVariable");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("initializedVariable");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__INITIALIZED_VARIABLE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionInitializedVariableReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__INITIALIZED_VARIABLE)), element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__INITIALIZED_VARIABLE), element));
						out.print(" ");
					}
					printCountingMap.put("initializedVariable", count - 1);
				}
			}
			break;
			case 11:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__IF_EXP2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp2ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__IF_EXP2)), element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__IF_EXP2), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp2", count - 1);
				}
			}
			break;
			case 12:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__OWNING_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__OWNING_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__OWNING_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("owningOperation", count - 1);
				}
			}
			break;
			case 13:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp1");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp1");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__IF_EXP1));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp1ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__IF_EXP1)), element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__IF_EXP1), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp1", count - 1);
				}
			}
			break;
			case 14:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__OWNING_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__OWNING_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__OWNING_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("owningAttribute", count - 1);
				}
			}
			break;
			case 15:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("thenExpression");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("thenExpression");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__THEN_EXPRESSION));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("thenExpression", count - 1);
				}
			}
			break;
			case 16:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("condition");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("condition");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__CONDITION));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("condition", count - 1);
				}
			}
			break;
			case 17:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("elseExpression");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("elseExpression");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__ELSE_EXPRESSION));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("elseExpression", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.IF_EXP__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_VariableDeclaration(ocl.VariableDeclaration element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(10);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_DECLARATION__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_DECLARATION__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_DECLARATION__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_DECLARATION__ID));
		printCountingMap.put("id", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_DECLARATION__VAR_NAME));
		printCountingMap.put("varName", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_DECLARATION__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_DECLARATION__INIT_EXPRESSION));
		printCountingMap.put("initExpression", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_DECLARATION__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_DECLARATION__BASE_EXP));
		printCountingMap.put("baseExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_DECLARATION__VARIABLE_EXP));
		printCountingMap.put("variableExp", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("VariableDeclaration");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_VariableDeclaration_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_VariableDeclaration_0(ocl.VariableDeclaration element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"id"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"varName"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initExpression"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"baseExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"variableExp"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_DECLARATION__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_DECLARATION__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_DECLARATION__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_DECLARATION__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("id");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("id");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_DECLARATION__ID));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_DECLARATION__ID), element));
						out.print(" ");
					}
					printCountingMap.put("id", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("varName");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("varName");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_DECLARATION__VAR_NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_DECLARATION__VAR_NAME), element));
						out.print(" ");
					}
					printCountingMap.put("varName", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_DECLARATION__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initExpression");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("initExpression");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_DECLARATION__INIT_EXPRESSION));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("initExpression", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_DECLARATION__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getVariableDeclarationLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_DECLARATION__LET_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_DECLARATION__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("baseExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("baseExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_DECLARATION__BASE_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getVariableDeclarationBaseExpReferenceResolver().deResolve((ocl.IterateExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_DECLARATION__BASE_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_DECLARATION__BASE_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("baseExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("variableExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("variableExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_DECLARATION__VARIABLE_EXP));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getVariableDeclarationVariableExpReferenceResolver().deResolve((ocl.VariableExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_DECLARATION__VARIABLE_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_DECLARATION__VARIABLE_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("variableExp", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_DECLARATION__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.VARIABLE_DECLARATION__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_Iterator(ocl.Iterator element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(11);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR__ID));
		printCountingMap.put("id", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR__VAR_NAME));
		printCountingMap.put("varName", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR__INIT_EXPRESSION));
		printCountingMap.put("initExpression", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR__BASE_EXP));
		printCountingMap.put("baseExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR__VARIABLE_EXP));
		printCountingMap.put("variableExp", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR__LOOP_EXPR));
		printCountingMap.put("loopExpr", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("Iterator");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_Iterator_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_Iterator_0(ocl.Iterator element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"id"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"varName"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initExpression"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"baseExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"variableExp"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"loopExpr"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("id");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("id");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR__ID));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR__ID), element));
						out.print(" ");
					}
					printCountingMap.put("id", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("varName");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("varName");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR__VAR_NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR__VAR_NAME), element));
						out.print(" ");
					}
					printCountingMap.put("varName", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initExpression");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("initExpression");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR__INIT_EXPRESSION));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("initExpression", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getVariableDeclarationLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR__LET_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("baseExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("baseExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR__BASE_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getVariableDeclarationBaseExpReferenceResolver().deResolve((ocl.IterateExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR__BASE_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR__BASE_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("baseExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("variableExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("variableExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR__VARIABLE_EXP));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getVariableDeclarationVariableExpReferenceResolver().deResolve((ocl.VariableExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR__VARIABLE_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR__VARIABLE_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("variableExp", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("loopExpr");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("loopExpr");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR__LOOP_EXPR));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getIteratorLoopExprReferenceResolver().deResolve((ocl.LoopExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR__LOOP_EXPR)), element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR__LOOP_EXPR), element));
						out.print(" ");
					}
					printCountingMap.put("loopExpr", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.ITERATOR__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_Parameter(ocl.Parameter element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(11);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.PARAMETER__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.PARAMETER__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.PARAMETER__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.PARAMETER__ID));
		printCountingMap.put("id", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.PARAMETER__VAR_NAME));
		printCountingMap.put("varName", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.PARAMETER__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.PARAMETER__INIT_EXPRESSION));
		printCountingMap.put("initExpression", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.PARAMETER__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.PARAMETER__BASE_EXP));
		printCountingMap.put("baseExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.PARAMETER__VARIABLE_EXP));
		printCountingMap.put("variableExp", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.PARAMETER__OPERATION));
		printCountingMap.put("operation", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("Parameter");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_Parameter_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_Parameter_0(ocl.Parameter element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"id"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"varName"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initExpression"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"baseExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"variableExp"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"operation"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.PARAMETER__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.PARAMETER__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.PARAMETER__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.PARAMETER__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("id");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("id");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.PARAMETER__ID));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.PARAMETER__ID), element));
						out.print(" ");
					}
					printCountingMap.put("id", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("varName");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("varName");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.PARAMETER__VAR_NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.PARAMETER__VAR_NAME), element));
						out.print(" ");
					}
					printCountingMap.put("varName", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.PARAMETER__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initExpression");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("initExpression");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.PARAMETER__INIT_EXPRESSION));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("initExpression", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.PARAMETER__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getVariableDeclarationLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.PARAMETER__LET_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.PARAMETER__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("baseExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("baseExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.PARAMETER__BASE_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getVariableDeclarationBaseExpReferenceResolver().deResolve((ocl.IterateExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.PARAMETER__BASE_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.PARAMETER__BASE_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("baseExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("variableExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("variableExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.PARAMETER__VARIABLE_EXP));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getVariableDeclarationVariableExpReferenceResolver().deResolve((ocl.VariableExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.PARAMETER__VARIABLE_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.PARAMETER__VARIABLE_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("variableExp", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("operation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("operation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.PARAMETER__OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getParameterOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.PARAMETER__OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.PARAMETER__OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("operation", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.PARAMETER__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.PARAMETER__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_CollectionType(ocl.CollectionType element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(26);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__IF_EXP3));
		printCountingMap.put("ifExp3", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__APPLIED_PROPERTY));
		printCountingMap.put("appliedProperty", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__COLLECTION));
		printCountingMap.put("collection", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__LOOP_EXP));
		printCountingMap.put("loopExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__PARENT_OPERATION));
		printCountingMap.put("parentOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__INITIALIZED_VARIABLE));
		printCountingMap.put("initializedVariable", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__IF_EXP2));
		printCountingMap.put("ifExp2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__OWNING_OPERATION));
		printCountingMap.put("owningOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__IF_EXP1));
		printCountingMap.put("ifExp1", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__OWNING_ATTRIBUTE));
		printCountingMap.put("owningAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__NAME));
		printCountingMap.put("name", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__DEFINITIONS));
		printCountingMap.put("definitions", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__OCL_EXPRESSION));
		printCountingMap.put("oclExpression", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__OPERATION));
		printCountingMap.put("operation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__MAP_TYPE2));
		printCountingMap.put("mapType2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__ATTRIBUTE));
		printCountingMap.put("attribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__MAP_TYPE));
		printCountingMap.put("mapType", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__COLLECTION_TYPES));
		printCountingMap.put("collectionTypes", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__TUPLE_TYPE_ATTRIBUTE));
		printCountingMap.put("tupleTypeAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__VARIABLE_DECLARATION));
		printCountingMap.put("variableDeclaration", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__ELEMENT_TYPE));
		printCountingMap.put("elementType", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("CollectionType");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_CollectionType_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_CollectionType_0(ocl.CollectionType element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp3"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"appliedProperty"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collection"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"loopExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"parentOperation"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initializedVariable"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp2"		));
		if (tempMatchCount > matches) {
			alt = 11;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningOperation"		));
		if (tempMatchCount > matches) {
			alt = 12;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp1"		));
		if (tempMatchCount > matches) {
			alt = 13;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningAttribute"		));
		if (tempMatchCount > matches) {
			alt = 14;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"name"		));
		if (tempMatchCount > matches) {
			alt = 15;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"definitions"		));
		if (tempMatchCount > matches) {
			alt = 16;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"oclExpression"		));
		if (tempMatchCount > matches) {
			alt = 17;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"operation"		));
		if (tempMatchCount > matches) {
			alt = 18;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"mapType2"		));
		if (tempMatchCount > matches) {
			alt = 19;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"attribute"		));
		if (tempMatchCount > matches) {
			alt = 20;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"mapType"		));
		if (tempMatchCount > matches) {
			alt = 21;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collectionTypes"		));
		if (tempMatchCount > matches) {
			alt = 22;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"tupleTypeAttribute"		));
		if (tempMatchCount > matches) {
			alt = 23;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"variableDeclaration"		));
		if (tempMatchCount > matches) {
			alt = 24;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"elementType"		));
		if (tempMatchCount > matches) {
			alt = 25;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp3");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp3");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__IF_EXP3));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp3ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__IF_EXP3)), element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__IF_EXP3), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp3", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("appliedProperty");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("appliedProperty");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__APPLIED_PROPERTY));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionAppliedPropertyReferenceResolver().deResolve((ocl.PropertyCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__APPLIED_PROPERTY)), element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__APPLIED_PROPERTY), element));
						out.print(" ");
					}
					printCountingMap.put("appliedProperty", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collection");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collection");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__COLLECTION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionCollectionReferenceResolver().deResolve((ocl.CollectionExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__COLLECTION)), element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__COLLECTION), element));
						out.print(" ");
					}
					printCountingMap.put("collection", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__LET_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("loopExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("loopExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__LOOP_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLoopExpReferenceResolver().deResolve((ocl.LoopExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__LOOP_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__LOOP_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("loopExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("parentOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("parentOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__PARENT_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionParentOperationReferenceResolver().deResolve((ocl.OperationCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__PARENT_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__PARENT_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("parentOperation", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initializedVariable");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("initializedVariable");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__INITIALIZED_VARIABLE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionInitializedVariableReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__INITIALIZED_VARIABLE)), element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__INITIALIZED_VARIABLE), element));
						out.print(" ");
					}
					printCountingMap.put("initializedVariable", count - 1);
				}
			}
			break;
			case 11:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__IF_EXP2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp2ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__IF_EXP2)), element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__IF_EXP2), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp2", count - 1);
				}
			}
			break;
			case 12:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__OWNING_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__OWNING_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__OWNING_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("owningOperation", count - 1);
				}
			}
			break;
			case 13:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp1");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp1");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__IF_EXP1));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp1ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__IF_EXP1)), element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__IF_EXP1), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp1", count - 1);
				}
			}
			break;
			case 14:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__OWNING_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__OWNING_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__OWNING_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("owningAttribute", count - 1);
				}
			}
			break;
			case 15:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("name");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("name");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__NAME), element));
						out.print(" ");
					}
					printCountingMap.put("name", count - 1);
				}
			}
			break;
			case 16:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("definitions");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("definitions");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__DEFINITIONS));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeDefinitionsReferenceResolver().deResolve((ocl.OclContextDefinition) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__DEFINITIONS)), element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__DEFINITIONS), element));
						out.print(" ");
					}
					printCountingMap.put("definitions", count - 1);
				}
			}
			break;
			case 17:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("oclExpression");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("oclExpression");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__OCL_EXPRESSION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeOclExpressionReferenceResolver().deResolve((ocl.OclExpression) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__OCL_EXPRESSION)), element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__OCL_EXPRESSION), element));
						out.print(" ");
					}
					printCountingMap.put("oclExpression", count - 1);
				}
			}
			break;
			case 18:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("operation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("operation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("operation", count - 1);
				}
			}
			break;
			case 19:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("mapType2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("mapType2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__MAP_TYPE2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeMapType2ReferenceResolver().deResolve((ocl.MapType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__MAP_TYPE2)), element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__MAP_TYPE2), element));
						out.print(" ");
					}
					printCountingMap.put("mapType2", count - 1);
				}
			}
			break;
			case 20:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("attribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("attribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("attribute", count - 1);
				}
			}
			break;
			case 21:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("mapType");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("mapType");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__MAP_TYPE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeMapTypeReferenceResolver().deResolve((ocl.MapType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__MAP_TYPE)), element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__MAP_TYPE), element));
						out.print(" ");
					}
					printCountingMap.put("mapType", count - 1);
				}
			}
			break;
			case 22:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collectionTypes");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collectionTypes");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__COLLECTION_TYPES));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeCollectionTypesReferenceResolver().deResolve((ocl.CollectionType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__COLLECTION_TYPES)), element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__COLLECTION_TYPES), element));
						out.print(" ");
					}
					printCountingMap.put("collectionTypes", count - 1);
				}
			}
			break;
			case 23:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("tupleTypeAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("tupleTypeAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__TUPLE_TYPE_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeTupleTypeAttributeReferenceResolver().deResolve((ocl.TupleTypeAttribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__TUPLE_TYPE_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__TUPLE_TYPE_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("tupleTypeAttribute", count - 1);
				}
			}
			break;
			case 24:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("variableDeclaration");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("variableDeclaration");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__VARIABLE_DECLARATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeVariableDeclarationReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__VARIABLE_DECLARATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__VARIABLE_DECLARATION), element));
						out.print(" ");
					}
					printCountingMap.put("variableDeclaration", count - 1);
				}
			}
			break;
			case 25:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("elementType");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("elementType");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__ELEMENT_TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("elementType", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.COLLECTION_TYPE__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_OclType(ocl.OclType element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(25);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__IF_EXP3));
		printCountingMap.put("ifExp3", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__APPLIED_PROPERTY));
		printCountingMap.put("appliedProperty", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__COLLECTION));
		printCountingMap.put("collection", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__LOOP_EXP));
		printCountingMap.put("loopExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__PARENT_OPERATION));
		printCountingMap.put("parentOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__INITIALIZED_VARIABLE));
		printCountingMap.put("initializedVariable", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__IF_EXP2));
		printCountingMap.put("ifExp2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__OWNING_OPERATION));
		printCountingMap.put("owningOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__IF_EXP1));
		printCountingMap.put("ifExp1", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__OWNING_ATTRIBUTE));
		printCountingMap.put("owningAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__NAME));
		printCountingMap.put("name", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__DEFINITIONS));
		printCountingMap.put("definitions", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__OCL_EXPRESSION));
		printCountingMap.put("oclExpression", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__OPERATION));
		printCountingMap.put("operation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__MAP_TYPE2));
		printCountingMap.put("mapType2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__ATTRIBUTE));
		printCountingMap.put("attribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__MAP_TYPE));
		printCountingMap.put("mapType", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__COLLECTION_TYPES));
		printCountingMap.put("collectionTypes", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__TUPLE_TYPE_ATTRIBUTE));
		printCountingMap.put("tupleTypeAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__VARIABLE_DECLARATION));
		printCountingMap.put("variableDeclaration", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("OclType");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_OclType_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_OclType_0(ocl.OclType element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp3"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"appliedProperty"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collection"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"loopExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"parentOperation"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initializedVariable"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp2"		));
		if (tempMatchCount > matches) {
			alt = 11;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningOperation"		));
		if (tempMatchCount > matches) {
			alt = 12;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp1"		));
		if (tempMatchCount > matches) {
			alt = 13;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningAttribute"		));
		if (tempMatchCount > matches) {
			alt = 14;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"name"		));
		if (tempMatchCount > matches) {
			alt = 15;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"definitions"		));
		if (tempMatchCount > matches) {
			alt = 16;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"oclExpression"		));
		if (tempMatchCount > matches) {
			alt = 17;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"operation"		));
		if (tempMatchCount > matches) {
			alt = 18;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"mapType2"		));
		if (tempMatchCount > matches) {
			alt = 19;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"attribute"		));
		if (tempMatchCount > matches) {
			alt = 20;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"mapType"		));
		if (tempMatchCount > matches) {
			alt = 21;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collectionTypes"		));
		if (tempMatchCount > matches) {
			alt = 22;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"tupleTypeAttribute"		));
		if (tempMatchCount > matches) {
			alt = 23;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"variableDeclaration"		));
		if (tempMatchCount > matches) {
			alt = 24;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp3");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp3");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__IF_EXP3));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp3ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__IF_EXP3)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__IF_EXP3), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp3", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("appliedProperty");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("appliedProperty");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__APPLIED_PROPERTY));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionAppliedPropertyReferenceResolver().deResolve((ocl.PropertyCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__APPLIED_PROPERTY)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__APPLIED_PROPERTY), element));
						out.print(" ");
					}
					printCountingMap.put("appliedProperty", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collection");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collection");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__COLLECTION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionCollectionReferenceResolver().deResolve((ocl.CollectionExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__COLLECTION)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__COLLECTION), element));
						out.print(" ");
					}
					printCountingMap.put("collection", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__LET_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("loopExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("loopExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__LOOP_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLoopExpReferenceResolver().deResolve((ocl.LoopExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__LOOP_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__LOOP_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("loopExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("parentOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("parentOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__PARENT_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionParentOperationReferenceResolver().deResolve((ocl.OperationCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__PARENT_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__PARENT_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("parentOperation", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initializedVariable");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("initializedVariable");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__INITIALIZED_VARIABLE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionInitializedVariableReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__INITIALIZED_VARIABLE)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__INITIALIZED_VARIABLE), element));
						out.print(" ");
					}
					printCountingMap.put("initializedVariable", count - 1);
				}
			}
			break;
			case 11:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__IF_EXP2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp2ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__IF_EXP2)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__IF_EXP2), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp2", count - 1);
				}
			}
			break;
			case 12:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__OWNING_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__OWNING_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__OWNING_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("owningOperation", count - 1);
				}
			}
			break;
			case 13:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp1");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp1");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__IF_EXP1));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp1ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__IF_EXP1)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__IF_EXP1), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp1", count - 1);
				}
			}
			break;
			case 14:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__OWNING_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__OWNING_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__OWNING_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("owningAttribute", count - 1);
				}
			}
			break;
			case 15:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("name");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("name");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__NAME), element));
						out.print(" ");
					}
					printCountingMap.put("name", count - 1);
				}
			}
			break;
			case 16:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("definitions");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("definitions");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__DEFINITIONS));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeDefinitionsReferenceResolver().deResolve((ocl.OclContextDefinition) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__DEFINITIONS)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__DEFINITIONS), element));
						out.print(" ");
					}
					printCountingMap.put("definitions", count - 1);
				}
			}
			break;
			case 17:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("oclExpression");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("oclExpression");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__OCL_EXPRESSION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeOclExpressionReferenceResolver().deResolve((ocl.OclExpression) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__OCL_EXPRESSION)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__OCL_EXPRESSION), element));
						out.print(" ");
					}
					printCountingMap.put("oclExpression", count - 1);
				}
			}
			break;
			case 18:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("operation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("operation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("operation", count - 1);
				}
			}
			break;
			case 19:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("mapType2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("mapType2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__MAP_TYPE2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeMapType2ReferenceResolver().deResolve((ocl.MapType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__MAP_TYPE2)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__MAP_TYPE2), element));
						out.print(" ");
					}
					printCountingMap.put("mapType2", count - 1);
				}
			}
			break;
			case 20:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("attribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("attribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("attribute", count - 1);
				}
			}
			break;
			case 21:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("mapType");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("mapType");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__MAP_TYPE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeMapTypeReferenceResolver().deResolve((ocl.MapType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__MAP_TYPE)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__MAP_TYPE), element));
						out.print(" ");
					}
					printCountingMap.put("mapType", count - 1);
				}
			}
			break;
			case 22:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collectionTypes");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collectionTypes");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__COLLECTION_TYPES));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeCollectionTypesReferenceResolver().deResolve((ocl.CollectionType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__COLLECTION_TYPES)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__COLLECTION_TYPES), element));
						out.print(" ");
					}
					printCountingMap.put("collectionTypes", count - 1);
				}
			}
			break;
			case 23:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("tupleTypeAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("tupleTypeAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__TUPLE_TYPE_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeTupleTypeAttributeReferenceResolver().deResolve((ocl.TupleTypeAttribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__TUPLE_TYPE_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__TUPLE_TYPE_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("tupleTypeAttribute", count - 1);
				}
			}
			break;
			case 24:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("variableDeclaration");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("variableDeclaration");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__VARIABLE_DECLARATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeVariableDeclarationReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__VARIABLE_DECLARATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__VARIABLE_DECLARATION), element));
						out.print(" ");
					}
					printCountingMap.put("variableDeclaration", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_TYPE__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_StringType(ocl.StringType element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(25);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__IF_EXP3));
		printCountingMap.put("ifExp3", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__APPLIED_PROPERTY));
		printCountingMap.put("appliedProperty", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__COLLECTION));
		printCountingMap.put("collection", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__LOOP_EXP));
		printCountingMap.put("loopExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__PARENT_OPERATION));
		printCountingMap.put("parentOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__INITIALIZED_VARIABLE));
		printCountingMap.put("initializedVariable", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__IF_EXP2));
		printCountingMap.put("ifExp2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__OWNING_OPERATION));
		printCountingMap.put("owningOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__IF_EXP1));
		printCountingMap.put("ifExp1", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__OWNING_ATTRIBUTE));
		printCountingMap.put("owningAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__NAME));
		printCountingMap.put("name", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__DEFINITIONS));
		printCountingMap.put("definitions", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__OCL_EXPRESSION));
		printCountingMap.put("oclExpression", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__OPERATION));
		printCountingMap.put("operation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__MAP_TYPE2));
		printCountingMap.put("mapType2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__ATTRIBUTE));
		printCountingMap.put("attribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__MAP_TYPE));
		printCountingMap.put("mapType", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__COLLECTION_TYPES));
		printCountingMap.put("collectionTypes", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__TUPLE_TYPE_ATTRIBUTE));
		printCountingMap.put("tupleTypeAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__VARIABLE_DECLARATION));
		printCountingMap.put("variableDeclaration", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("StringType");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_StringType_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_StringType_0(ocl.StringType element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp3"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"appliedProperty"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collection"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"loopExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"parentOperation"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initializedVariable"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp2"		));
		if (tempMatchCount > matches) {
			alt = 11;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningOperation"		));
		if (tempMatchCount > matches) {
			alt = 12;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp1"		));
		if (tempMatchCount > matches) {
			alt = 13;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningAttribute"		));
		if (tempMatchCount > matches) {
			alt = 14;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"name"		));
		if (tempMatchCount > matches) {
			alt = 15;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"definitions"		));
		if (tempMatchCount > matches) {
			alt = 16;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"oclExpression"		));
		if (tempMatchCount > matches) {
			alt = 17;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"operation"		));
		if (tempMatchCount > matches) {
			alt = 18;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"mapType2"		));
		if (tempMatchCount > matches) {
			alt = 19;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"attribute"		));
		if (tempMatchCount > matches) {
			alt = 20;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"mapType"		));
		if (tempMatchCount > matches) {
			alt = 21;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collectionTypes"		));
		if (tempMatchCount > matches) {
			alt = 22;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"tupleTypeAttribute"		));
		if (tempMatchCount > matches) {
			alt = 23;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"variableDeclaration"		));
		if (tempMatchCount > matches) {
			alt = 24;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp3");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp3");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__IF_EXP3));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp3ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__IF_EXP3)), element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__IF_EXP3), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp3", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("appliedProperty");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("appliedProperty");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__APPLIED_PROPERTY));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionAppliedPropertyReferenceResolver().deResolve((ocl.PropertyCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__APPLIED_PROPERTY)), element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__APPLIED_PROPERTY), element));
						out.print(" ");
					}
					printCountingMap.put("appliedProperty", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collection");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collection");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__COLLECTION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionCollectionReferenceResolver().deResolve((ocl.CollectionExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__COLLECTION)), element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__COLLECTION), element));
						out.print(" ");
					}
					printCountingMap.put("collection", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__LET_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("loopExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("loopExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__LOOP_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLoopExpReferenceResolver().deResolve((ocl.LoopExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__LOOP_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__LOOP_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("loopExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("parentOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("parentOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__PARENT_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionParentOperationReferenceResolver().deResolve((ocl.OperationCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__PARENT_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__PARENT_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("parentOperation", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initializedVariable");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("initializedVariable");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__INITIALIZED_VARIABLE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionInitializedVariableReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__INITIALIZED_VARIABLE)), element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__INITIALIZED_VARIABLE), element));
						out.print(" ");
					}
					printCountingMap.put("initializedVariable", count - 1);
				}
			}
			break;
			case 11:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__IF_EXP2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp2ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__IF_EXP2)), element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__IF_EXP2), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp2", count - 1);
				}
			}
			break;
			case 12:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__OWNING_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__OWNING_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__OWNING_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("owningOperation", count - 1);
				}
			}
			break;
			case 13:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp1");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp1");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__IF_EXP1));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp1ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__IF_EXP1)), element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__IF_EXP1), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp1", count - 1);
				}
			}
			break;
			case 14:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__OWNING_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__OWNING_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__OWNING_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("owningAttribute", count - 1);
				}
			}
			break;
			case 15:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("name");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("name");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__NAME), element));
						out.print(" ");
					}
					printCountingMap.put("name", count - 1);
				}
			}
			break;
			case 16:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("definitions");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("definitions");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__DEFINITIONS));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeDefinitionsReferenceResolver().deResolve((ocl.OclContextDefinition) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__DEFINITIONS)), element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__DEFINITIONS), element));
						out.print(" ");
					}
					printCountingMap.put("definitions", count - 1);
				}
			}
			break;
			case 17:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("oclExpression");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("oclExpression");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__OCL_EXPRESSION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeOclExpressionReferenceResolver().deResolve((ocl.OclExpression) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__OCL_EXPRESSION)), element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__OCL_EXPRESSION), element));
						out.print(" ");
					}
					printCountingMap.put("oclExpression", count - 1);
				}
			}
			break;
			case 18:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("operation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("operation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("operation", count - 1);
				}
			}
			break;
			case 19:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("mapType2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("mapType2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__MAP_TYPE2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeMapType2ReferenceResolver().deResolve((ocl.MapType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__MAP_TYPE2)), element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__MAP_TYPE2), element));
						out.print(" ");
					}
					printCountingMap.put("mapType2", count - 1);
				}
			}
			break;
			case 20:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("attribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("attribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("attribute", count - 1);
				}
			}
			break;
			case 21:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("mapType");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("mapType");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__MAP_TYPE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeMapTypeReferenceResolver().deResolve((ocl.MapType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__MAP_TYPE)), element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__MAP_TYPE), element));
						out.print(" ");
					}
					printCountingMap.put("mapType", count - 1);
				}
			}
			break;
			case 22:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collectionTypes");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collectionTypes");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__COLLECTION_TYPES));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeCollectionTypesReferenceResolver().deResolve((ocl.CollectionType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__COLLECTION_TYPES)), element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__COLLECTION_TYPES), element));
						out.print(" ");
					}
					printCountingMap.put("collectionTypes", count - 1);
				}
			}
			break;
			case 23:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("tupleTypeAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("tupleTypeAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__TUPLE_TYPE_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeTupleTypeAttributeReferenceResolver().deResolve((ocl.TupleTypeAttribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__TUPLE_TYPE_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__TUPLE_TYPE_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("tupleTypeAttribute", count - 1);
				}
			}
			break;
			case 24:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("variableDeclaration");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("variableDeclaration");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__VARIABLE_DECLARATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeVariableDeclarationReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__VARIABLE_DECLARATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__VARIABLE_DECLARATION), element));
						out.print(" ");
					}
					printCountingMap.put("variableDeclaration", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.STRING_TYPE__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_BooleanType(ocl.BooleanType element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(25);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__IF_EXP3));
		printCountingMap.put("ifExp3", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__APPLIED_PROPERTY));
		printCountingMap.put("appliedProperty", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__COLLECTION));
		printCountingMap.put("collection", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__LOOP_EXP));
		printCountingMap.put("loopExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__PARENT_OPERATION));
		printCountingMap.put("parentOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__INITIALIZED_VARIABLE));
		printCountingMap.put("initializedVariable", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__IF_EXP2));
		printCountingMap.put("ifExp2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__OWNING_OPERATION));
		printCountingMap.put("owningOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__IF_EXP1));
		printCountingMap.put("ifExp1", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__OWNING_ATTRIBUTE));
		printCountingMap.put("owningAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__NAME));
		printCountingMap.put("name", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__DEFINITIONS));
		printCountingMap.put("definitions", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__OCL_EXPRESSION));
		printCountingMap.put("oclExpression", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__OPERATION));
		printCountingMap.put("operation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__MAP_TYPE2));
		printCountingMap.put("mapType2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__ATTRIBUTE));
		printCountingMap.put("attribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__MAP_TYPE));
		printCountingMap.put("mapType", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__COLLECTION_TYPES));
		printCountingMap.put("collectionTypes", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__TUPLE_TYPE_ATTRIBUTE));
		printCountingMap.put("tupleTypeAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__VARIABLE_DECLARATION));
		printCountingMap.put("variableDeclaration", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("BooleanType");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_BooleanType_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_BooleanType_0(ocl.BooleanType element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp3"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"appliedProperty"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collection"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"loopExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"parentOperation"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initializedVariable"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp2"		));
		if (tempMatchCount > matches) {
			alt = 11;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningOperation"		));
		if (tempMatchCount > matches) {
			alt = 12;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp1"		));
		if (tempMatchCount > matches) {
			alt = 13;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningAttribute"		));
		if (tempMatchCount > matches) {
			alt = 14;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"name"		));
		if (tempMatchCount > matches) {
			alt = 15;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"definitions"		));
		if (tempMatchCount > matches) {
			alt = 16;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"oclExpression"		));
		if (tempMatchCount > matches) {
			alt = 17;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"operation"		));
		if (tempMatchCount > matches) {
			alt = 18;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"mapType2"		));
		if (tempMatchCount > matches) {
			alt = 19;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"attribute"		));
		if (tempMatchCount > matches) {
			alt = 20;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"mapType"		));
		if (tempMatchCount > matches) {
			alt = 21;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collectionTypes"		));
		if (tempMatchCount > matches) {
			alt = 22;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"tupleTypeAttribute"		));
		if (tempMatchCount > matches) {
			alt = 23;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"variableDeclaration"		));
		if (tempMatchCount > matches) {
			alt = 24;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp3");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp3");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__IF_EXP3));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp3ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__IF_EXP3)), element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__IF_EXP3), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp3", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("appliedProperty");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("appliedProperty");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__APPLIED_PROPERTY));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionAppliedPropertyReferenceResolver().deResolve((ocl.PropertyCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__APPLIED_PROPERTY)), element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__APPLIED_PROPERTY), element));
						out.print(" ");
					}
					printCountingMap.put("appliedProperty", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collection");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collection");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__COLLECTION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionCollectionReferenceResolver().deResolve((ocl.CollectionExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__COLLECTION)), element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__COLLECTION), element));
						out.print(" ");
					}
					printCountingMap.put("collection", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__LET_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("loopExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("loopExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__LOOP_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLoopExpReferenceResolver().deResolve((ocl.LoopExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__LOOP_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__LOOP_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("loopExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("parentOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("parentOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__PARENT_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionParentOperationReferenceResolver().deResolve((ocl.OperationCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__PARENT_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__PARENT_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("parentOperation", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initializedVariable");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("initializedVariable");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__INITIALIZED_VARIABLE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionInitializedVariableReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__INITIALIZED_VARIABLE)), element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__INITIALIZED_VARIABLE), element));
						out.print(" ");
					}
					printCountingMap.put("initializedVariable", count - 1);
				}
			}
			break;
			case 11:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__IF_EXP2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp2ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__IF_EXP2)), element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__IF_EXP2), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp2", count - 1);
				}
			}
			break;
			case 12:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__OWNING_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__OWNING_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__OWNING_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("owningOperation", count - 1);
				}
			}
			break;
			case 13:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp1");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp1");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__IF_EXP1));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp1ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__IF_EXP1)), element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__IF_EXP1), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp1", count - 1);
				}
			}
			break;
			case 14:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__OWNING_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__OWNING_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__OWNING_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("owningAttribute", count - 1);
				}
			}
			break;
			case 15:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("name");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("name");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__NAME), element));
						out.print(" ");
					}
					printCountingMap.put("name", count - 1);
				}
			}
			break;
			case 16:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("definitions");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("definitions");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__DEFINITIONS));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeDefinitionsReferenceResolver().deResolve((ocl.OclContextDefinition) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__DEFINITIONS)), element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__DEFINITIONS), element));
						out.print(" ");
					}
					printCountingMap.put("definitions", count - 1);
				}
			}
			break;
			case 17:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("oclExpression");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("oclExpression");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__OCL_EXPRESSION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeOclExpressionReferenceResolver().deResolve((ocl.OclExpression) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__OCL_EXPRESSION)), element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__OCL_EXPRESSION), element));
						out.print(" ");
					}
					printCountingMap.put("oclExpression", count - 1);
				}
			}
			break;
			case 18:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("operation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("operation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("operation", count - 1);
				}
			}
			break;
			case 19:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("mapType2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("mapType2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__MAP_TYPE2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeMapType2ReferenceResolver().deResolve((ocl.MapType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__MAP_TYPE2)), element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__MAP_TYPE2), element));
						out.print(" ");
					}
					printCountingMap.put("mapType2", count - 1);
				}
			}
			break;
			case 20:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("attribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("attribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("attribute", count - 1);
				}
			}
			break;
			case 21:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("mapType");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("mapType");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__MAP_TYPE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeMapTypeReferenceResolver().deResolve((ocl.MapType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__MAP_TYPE)), element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__MAP_TYPE), element));
						out.print(" ");
					}
					printCountingMap.put("mapType", count - 1);
				}
			}
			break;
			case 22:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collectionTypes");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collectionTypes");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__COLLECTION_TYPES));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeCollectionTypesReferenceResolver().deResolve((ocl.CollectionType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__COLLECTION_TYPES)), element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__COLLECTION_TYPES), element));
						out.print(" ");
					}
					printCountingMap.put("collectionTypes", count - 1);
				}
			}
			break;
			case 23:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("tupleTypeAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("tupleTypeAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__TUPLE_TYPE_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeTupleTypeAttributeReferenceResolver().deResolve((ocl.TupleTypeAttribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__TUPLE_TYPE_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__TUPLE_TYPE_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("tupleTypeAttribute", count - 1);
				}
			}
			break;
			case 24:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("variableDeclaration");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("variableDeclaration");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__VARIABLE_DECLARATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeVariableDeclarationReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__VARIABLE_DECLARATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__VARIABLE_DECLARATION), element));
						out.print(" ");
					}
					printCountingMap.put("variableDeclaration", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.BOOLEAN_TYPE__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_IntegerType(ocl.IntegerType element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(25);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__IF_EXP3));
		printCountingMap.put("ifExp3", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__APPLIED_PROPERTY));
		printCountingMap.put("appliedProperty", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__COLLECTION));
		printCountingMap.put("collection", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__LOOP_EXP));
		printCountingMap.put("loopExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__PARENT_OPERATION));
		printCountingMap.put("parentOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__INITIALIZED_VARIABLE));
		printCountingMap.put("initializedVariable", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__IF_EXP2));
		printCountingMap.put("ifExp2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__OWNING_OPERATION));
		printCountingMap.put("owningOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__IF_EXP1));
		printCountingMap.put("ifExp1", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__OWNING_ATTRIBUTE));
		printCountingMap.put("owningAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__NAME));
		printCountingMap.put("name", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__DEFINITIONS));
		printCountingMap.put("definitions", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__OCL_EXPRESSION));
		printCountingMap.put("oclExpression", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__OPERATION));
		printCountingMap.put("operation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__MAP_TYPE2));
		printCountingMap.put("mapType2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__ATTRIBUTE));
		printCountingMap.put("attribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__MAP_TYPE));
		printCountingMap.put("mapType", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__COLLECTION_TYPES));
		printCountingMap.put("collectionTypes", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__TUPLE_TYPE_ATTRIBUTE));
		printCountingMap.put("tupleTypeAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__VARIABLE_DECLARATION));
		printCountingMap.put("variableDeclaration", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("IntegerType");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_IntegerType_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_IntegerType_0(ocl.IntegerType element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp3"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"appliedProperty"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collection"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"loopExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"parentOperation"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initializedVariable"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp2"		));
		if (tempMatchCount > matches) {
			alt = 11;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningOperation"		));
		if (tempMatchCount > matches) {
			alt = 12;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp1"		));
		if (tempMatchCount > matches) {
			alt = 13;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningAttribute"		));
		if (tempMatchCount > matches) {
			alt = 14;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"name"		));
		if (tempMatchCount > matches) {
			alt = 15;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"definitions"		));
		if (tempMatchCount > matches) {
			alt = 16;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"oclExpression"		));
		if (tempMatchCount > matches) {
			alt = 17;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"operation"		));
		if (tempMatchCount > matches) {
			alt = 18;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"mapType2"		));
		if (tempMatchCount > matches) {
			alt = 19;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"attribute"		));
		if (tempMatchCount > matches) {
			alt = 20;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"mapType"		));
		if (tempMatchCount > matches) {
			alt = 21;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collectionTypes"		));
		if (tempMatchCount > matches) {
			alt = 22;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"tupleTypeAttribute"		));
		if (tempMatchCount > matches) {
			alt = 23;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"variableDeclaration"		));
		if (tempMatchCount > matches) {
			alt = 24;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp3");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp3");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__IF_EXP3));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp3ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__IF_EXP3)), element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__IF_EXP3), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp3", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("appliedProperty");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("appliedProperty");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__APPLIED_PROPERTY));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionAppliedPropertyReferenceResolver().deResolve((ocl.PropertyCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__APPLIED_PROPERTY)), element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__APPLIED_PROPERTY), element));
						out.print(" ");
					}
					printCountingMap.put("appliedProperty", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collection");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collection");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__COLLECTION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionCollectionReferenceResolver().deResolve((ocl.CollectionExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__COLLECTION)), element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__COLLECTION), element));
						out.print(" ");
					}
					printCountingMap.put("collection", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__LET_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("loopExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("loopExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__LOOP_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLoopExpReferenceResolver().deResolve((ocl.LoopExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__LOOP_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__LOOP_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("loopExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("parentOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("parentOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__PARENT_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionParentOperationReferenceResolver().deResolve((ocl.OperationCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__PARENT_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__PARENT_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("parentOperation", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initializedVariable");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("initializedVariable");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__INITIALIZED_VARIABLE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionInitializedVariableReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__INITIALIZED_VARIABLE)), element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__INITIALIZED_VARIABLE), element));
						out.print(" ");
					}
					printCountingMap.put("initializedVariable", count - 1);
				}
			}
			break;
			case 11:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__IF_EXP2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp2ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__IF_EXP2)), element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__IF_EXP2), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp2", count - 1);
				}
			}
			break;
			case 12:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__OWNING_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__OWNING_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__OWNING_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("owningOperation", count - 1);
				}
			}
			break;
			case 13:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp1");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp1");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__IF_EXP1));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp1ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__IF_EXP1)), element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__IF_EXP1), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp1", count - 1);
				}
			}
			break;
			case 14:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__OWNING_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__OWNING_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__OWNING_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("owningAttribute", count - 1);
				}
			}
			break;
			case 15:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("name");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("name");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__NAME), element));
						out.print(" ");
					}
					printCountingMap.put("name", count - 1);
				}
			}
			break;
			case 16:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("definitions");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("definitions");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__DEFINITIONS));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeDefinitionsReferenceResolver().deResolve((ocl.OclContextDefinition) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__DEFINITIONS)), element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__DEFINITIONS), element));
						out.print(" ");
					}
					printCountingMap.put("definitions", count - 1);
				}
			}
			break;
			case 17:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("oclExpression");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("oclExpression");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__OCL_EXPRESSION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeOclExpressionReferenceResolver().deResolve((ocl.OclExpression) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__OCL_EXPRESSION)), element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__OCL_EXPRESSION), element));
						out.print(" ");
					}
					printCountingMap.put("oclExpression", count - 1);
				}
			}
			break;
			case 18:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("operation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("operation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("operation", count - 1);
				}
			}
			break;
			case 19:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("mapType2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("mapType2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__MAP_TYPE2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeMapType2ReferenceResolver().deResolve((ocl.MapType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__MAP_TYPE2)), element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__MAP_TYPE2), element));
						out.print(" ");
					}
					printCountingMap.put("mapType2", count - 1);
				}
			}
			break;
			case 20:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("attribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("attribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("attribute", count - 1);
				}
			}
			break;
			case 21:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("mapType");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("mapType");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__MAP_TYPE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeMapTypeReferenceResolver().deResolve((ocl.MapType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__MAP_TYPE)), element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__MAP_TYPE), element));
						out.print(" ");
					}
					printCountingMap.put("mapType", count - 1);
				}
			}
			break;
			case 22:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collectionTypes");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collectionTypes");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__COLLECTION_TYPES));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeCollectionTypesReferenceResolver().deResolve((ocl.CollectionType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__COLLECTION_TYPES)), element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__COLLECTION_TYPES), element));
						out.print(" ");
					}
					printCountingMap.put("collectionTypes", count - 1);
				}
			}
			break;
			case 23:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("tupleTypeAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("tupleTypeAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__TUPLE_TYPE_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeTupleTypeAttributeReferenceResolver().deResolve((ocl.TupleTypeAttribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__TUPLE_TYPE_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__TUPLE_TYPE_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("tupleTypeAttribute", count - 1);
				}
			}
			break;
			case 24:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("variableDeclaration");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("variableDeclaration");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__VARIABLE_DECLARATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeVariableDeclarationReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__VARIABLE_DECLARATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__VARIABLE_DECLARATION), element));
						out.print(" ");
					}
					printCountingMap.put("variableDeclaration", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.INTEGER_TYPE__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_RealType(ocl.RealType element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(25);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__IF_EXP3));
		printCountingMap.put("ifExp3", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__APPLIED_PROPERTY));
		printCountingMap.put("appliedProperty", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__COLLECTION));
		printCountingMap.put("collection", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__LOOP_EXP));
		printCountingMap.put("loopExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__PARENT_OPERATION));
		printCountingMap.put("parentOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__INITIALIZED_VARIABLE));
		printCountingMap.put("initializedVariable", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__IF_EXP2));
		printCountingMap.put("ifExp2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__OWNING_OPERATION));
		printCountingMap.put("owningOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__IF_EXP1));
		printCountingMap.put("ifExp1", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__OWNING_ATTRIBUTE));
		printCountingMap.put("owningAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__NAME));
		printCountingMap.put("name", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__DEFINITIONS));
		printCountingMap.put("definitions", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__OCL_EXPRESSION));
		printCountingMap.put("oclExpression", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__OPERATION));
		printCountingMap.put("operation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__MAP_TYPE2));
		printCountingMap.put("mapType2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__ATTRIBUTE));
		printCountingMap.put("attribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__MAP_TYPE));
		printCountingMap.put("mapType", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__COLLECTION_TYPES));
		printCountingMap.put("collectionTypes", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__TUPLE_TYPE_ATTRIBUTE));
		printCountingMap.put("tupleTypeAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__VARIABLE_DECLARATION));
		printCountingMap.put("variableDeclaration", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("RealType");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_RealType_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_RealType_0(ocl.RealType element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp3"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"appliedProperty"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collection"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"loopExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"parentOperation"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initializedVariable"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp2"		));
		if (tempMatchCount > matches) {
			alt = 11;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningOperation"		));
		if (tempMatchCount > matches) {
			alt = 12;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp1"		));
		if (tempMatchCount > matches) {
			alt = 13;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningAttribute"		));
		if (tempMatchCount > matches) {
			alt = 14;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"name"		));
		if (tempMatchCount > matches) {
			alt = 15;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"definitions"		));
		if (tempMatchCount > matches) {
			alt = 16;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"oclExpression"		));
		if (tempMatchCount > matches) {
			alt = 17;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"operation"		));
		if (tempMatchCount > matches) {
			alt = 18;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"mapType2"		));
		if (tempMatchCount > matches) {
			alt = 19;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"attribute"		));
		if (tempMatchCount > matches) {
			alt = 20;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"mapType"		));
		if (tempMatchCount > matches) {
			alt = 21;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collectionTypes"		));
		if (tempMatchCount > matches) {
			alt = 22;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"tupleTypeAttribute"		));
		if (tempMatchCount > matches) {
			alt = 23;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"variableDeclaration"		));
		if (tempMatchCount > matches) {
			alt = 24;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp3");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp3");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__IF_EXP3));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp3ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__IF_EXP3)), element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__IF_EXP3), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp3", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("appliedProperty");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("appliedProperty");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__APPLIED_PROPERTY));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionAppliedPropertyReferenceResolver().deResolve((ocl.PropertyCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__APPLIED_PROPERTY)), element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__APPLIED_PROPERTY), element));
						out.print(" ");
					}
					printCountingMap.put("appliedProperty", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collection");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collection");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__COLLECTION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionCollectionReferenceResolver().deResolve((ocl.CollectionExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__COLLECTION)), element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__COLLECTION), element));
						out.print(" ");
					}
					printCountingMap.put("collection", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__LET_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("loopExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("loopExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__LOOP_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLoopExpReferenceResolver().deResolve((ocl.LoopExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__LOOP_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__LOOP_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("loopExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("parentOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("parentOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__PARENT_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionParentOperationReferenceResolver().deResolve((ocl.OperationCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__PARENT_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__PARENT_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("parentOperation", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initializedVariable");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("initializedVariable");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__INITIALIZED_VARIABLE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionInitializedVariableReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__INITIALIZED_VARIABLE)), element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__INITIALIZED_VARIABLE), element));
						out.print(" ");
					}
					printCountingMap.put("initializedVariable", count - 1);
				}
			}
			break;
			case 11:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__IF_EXP2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp2ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__IF_EXP2)), element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__IF_EXP2), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp2", count - 1);
				}
			}
			break;
			case 12:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__OWNING_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__OWNING_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__OWNING_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("owningOperation", count - 1);
				}
			}
			break;
			case 13:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp1");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp1");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__IF_EXP1));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp1ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__IF_EXP1)), element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__IF_EXP1), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp1", count - 1);
				}
			}
			break;
			case 14:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__OWNING_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__OWNING_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__OWNING_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("owningAttribute", count - 1);
				}
			}
			break;
			case 15:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("name");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("name");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__NAME), element));
						out.print(" ");
					}
					printCountingMap.put("name", count - 1);
				}
			}
			break;
			case 16:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("definitions");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("definitions");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__DEFINITIONS));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeDefinitionsReferenceResolver().deResolve((ocl.OclContextDefinition) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__DEFINITIONS)), element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__DEFINITIONS), element));
						out.print(" ");
					}
					printCountingMap.put("definitions", count - 1);
				}
			}
			break;
			case 17:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("oclExpression");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("oclExpression");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__OCL_EXPRESSION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeOclExpressionReferenceResolver().deResolve((ocl.OclExpression) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__OCL_EXPRESSION)), element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__OCL_EXPRESSION), element));
						out.print(" ");
					}
					printCountingMap.put("oclExpression", count - 1);
				}
			}
			break;
			case 18:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("operation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("operation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("operation", count - 1);
				}
			}
			break;
			case 19:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("mapType2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("mapType2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__MAP_TYPE2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeMapType2ReferenceResolver().deResolve((ocl.MapType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__MAP_TYPE2)), element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__MAP_TYPE2), element));
						out.print(" ");
					}
					printCountingMap.put("mapType2", count - 1);
				}
			}
			break;
			case 20:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("attribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("attribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("attribute", count - 1);
				}
			}
			break;
			case 21:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("mapType");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("mapType");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__MAP_TYPE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeMapTypeReferenceResolver().deResolve((ocl.MapType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__MAP_TYPE)), element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__MAP_TYPE), element));
						out.print(" ");
					}
					printCountingMap.put("mapType", count - 1);
				}
			}
			break;
			case 22:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collectionTypes");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collectionTypes");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__COLLECTION_TYPES));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeCollectionTypesReferenceResolver().deResolve((ocl.CollectionType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__COLLECTION_TYPES)), element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__COLLECTION_TYPES), element));
						out.print(" ");
					}
					printCountingMap.put("collectionTypes", count - 1);
				}
			}
			break;
			case 23:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("tupleTypeAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("tupleTypeAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__TUPLE_TYPE_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeTupleTypeAttributeReferenceResolver().deResolve((ocl.TupleTypeAttribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__TUPLE_TYPE_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__TUPLE_TYPE_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("tupleTypeAttribute", count - 1);
				}
			}
			break;
			case 24:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("variableDeclaration");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("variableDeclaration");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__VARIABLE_DECLARATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeVariableDeclarationReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__VARIABLE_DECLARATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__VARIABLE_DECLARATION), element));
						out.print(" ");
					}
					printCountingMap.put("variableDeclaration", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.REAL_TYPE__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_BagType(ocl.BagType element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(26);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__IF_EXP3));
		printCountingMap.put("ifExp3", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__APPLIED_PROPERTY));
		printCountingMap.put("appliedProperty", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__COLLECTION));
		printCountingMap.put("collection", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__LOOP_EXP));
		printCountingMap.put("loopExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__PARENT_OPERATION));
		printCountingMap.put("parentOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__INITIALIZED_VARIABLE));
		printCountingMap.put("initializedVariable", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__IF_EXP2));
		printCountingMap.put("ifExp2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__OWNING_OPERATION));
		printCountingMap.put("owningOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__IF_EXP1));
		printCountingMap.put("ifExp1", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__OWNING_ATTRIBUTE));
		printCountingMap.put("owningAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__NAME));
		printCountingMap.put("name", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__DEFINITIONS));
		printCountingMap.put("definitions", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__OCL_EXPRESSION));
		printCountingMap.put("oclExpression", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__OPERATION));
		printCountingMap.put("operation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__MAP_TYPE2));
		printCountingMap.put("mapType2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__ATTRIBUTE));
		printCountingMap.put("attribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__MAP_TYPE));
		printCountingMap.put("mapType", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__COLLECTION_TYPES));
		printCountingMap.put("collectionTypes", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__TUPLE_TYPE_ATTRIBUTE));
		printCountingMap.put("tupleTypeAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__VARIABLE_DECLARATION));
		printCountingMap.put("variableDeclaration", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__ELEMENT_TYPE));
		printCountingMap.put("elementType", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("BagType");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_BagType_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_BagType_0(ocl.BagType element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp3"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"appliedProperty"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collection"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"loopExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"parentOperation"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initializedVariable"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp2"		));
		if (tempMatchCount > matches) {
			alt = 11;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningOperation"		));
		if (tempMatchCount > matches) {
			alt = 12;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp1"		));
		if (tempMatchCount > matches) {
			alt = 13;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningAttribute"		));
		if (tempMatchCount > matches) {
			alt = 14;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"name"		));
		if (tempMatchCount > matches) {
			alt = 15;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"definitions"		));
		if (tempMatchCount > matches) {
			alt = 16;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"oclExpression"		));
		if (tempMatchCount > matches) {
			alt = 17;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"operation"		));
		if (tempMatchCount > matches) {
			alt = 18;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"mapType2"		));
		if (tempMatchCount > matches) {
			alt = 19;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"attribute"		));
		if (tempMatchCount > matches) {
			alt = 20;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"mapType"		));
		if (tempMatchCount > matches) {
			alt = 21;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collectionTypes"		));
		if (tempMatchCount > matches) {
			alt = 22;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"tupleTypeAttribute"		));
		if (tempMatchCount > matches) {
			alt = 23;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"variableDeclaration"		));
		if (tempMatchCount > matches) {
			alt = 24;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"elementType"		));
		if (tempMatchCount > matches) {
			alt = 25;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp3");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp3");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__IF_EXP3));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp3ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__IF_EXP3)), element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__IF_EXP3), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp3", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("appliedProperty");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("appliedProperty");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__APPLIED_PROPERTY));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionAppliedPropertyReferenceResolver().deResolve((ocl.PropertyCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__APPLIED_PROPERTY)), element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__APPLIED_PROPERTY), element));
						out.print(" ");
					}
					printCountingMap.put("appliedProperty", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collection");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collection");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__COLLECTION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionCollectionReferenceResolver().deResolve((ocl.CollectionExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__COLLECTION)), element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__COLLECTION), element));
						out.print(" ");
					}
					printCountingMap.put("collection", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__LET_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("loopExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("loopExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__LOOP_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLoopExpReferenceResolver().deResolve((ocl.LoopExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__LOOP_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__LOOP_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("loopExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("parentOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("parentOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__PARENT_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionParentOperationReferenceResolver().deResolve((ocl.OperationCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__PARENT_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__PARENT_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("parentOperation", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initializedVariable");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("initializedVariable");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__INITIALIZED_VARIABLE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionInitializedVariableReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__INITIALIZED_VARIABLE)), element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__INITIALIZED_VARIABLE), element));
						out.print(" ");
					}
					printCountingMap.put("initializedVariable", count - 1);
				}
			}
			break;
			case 11:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__IF_EXP2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp2ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__IF_EXP2)), element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__IF_EXP2), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp2", count - 1);
				}
			}
			break;
			case 12:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__OWNING_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__OWNING_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__OWNING_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("owningOperation", count - 1);
				}
			}
			break;
			case 13:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp1");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp1");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__IF_EXP1));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp1ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__IF_EXP1)), element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__IF_EXP1), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp1", count - 1);
				}
			}
			break;
			case 14:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__OWNING_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__OWNING_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__OWNING_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("owningAttribute", count - 1);
				}
			}
			break;
			case 15:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("name");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("name");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__NAME), element));
						out.print(" ");
					}
					printCountingMap.put("name", count - 1);
				}
			}
			break;
			case 16:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("definitions");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("definitions");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__DEFINITIONS));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeDefinitionsReferenceResolver().deResolve((ocl.OclContextDefinition) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__DEFINITIONS)), element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__DEFINITIONS), element));
						out.print(" ");
					}
					printCountingMap.put("definitions", count - 1);
				}
			}
			break;
			case 17:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("oclExpression");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("oclExpression");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__OCL_EXPRESSION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeOclExpressionReferenceResolver().deResolve((ocl.OclExpression) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__OCL_EXPRESSION)), element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__OCL_EXPRESSION), element));
						out.print(" ");
					}
					printCountingMap.put("oclExpression", count - 1);
				}
			}
			break;
			case 18:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("operation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("operation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("operation", count - 1);
				}
			}
			break;
			case 19:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("mapType2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("mapType2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__MAP_TYPE2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeMapType2ReferenceResolver().deResolve((ocl.MapType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__MAP_TYPE2)), element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__MAP_TYPE2), element));
						out.print(" ");
					}
					printCountingMap.put("mapType2", count - 1);
				}
			}
			break;
			case 20:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("attribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("attribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("attribute", count - 1);
				}
			}
			break;
			case 21:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("mapType");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("mapType");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__MAP_TYPE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeMapTypeReferenceResolver().deResolve((ocl.MapType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__MAP_TYPE)), element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__MAP_TYPE), element));
						out.print(" ");
					}
					printCountingMap.put("mapType", count - 1);
				}
			}
			break;
			case 22:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collectionTypes");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collectionTypes");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__COLLECTION_TYPES));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeCollectionTypesReferenceResolver().deResolve((ocl.CollectionType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__COLLECTION_TYPES)), element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__COLLECTION_TYPES), element));
						out.print(" ");
					}
					printCountingMap.put("collectionTypes", count - 1);
				}
			}
			break;
			case 23:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("tupleTypeAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("tupleTypeAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__TUPLE_TYPE_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeTupleTypeAttributeReferenceResolver().deResolve((ocl.TupleTypeAttribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__TUPLE_TYPE_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__TUPLE_TYPE_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("tupleTypeAttribute", count - 1);
				}
			}
			break;
			case 24:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("variableDeclaration");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("variableDeclaration");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__VARIABLE_DECLARATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeVariableDeclarationReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__VARIABLE_DECLARATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__VARIABLE_DECLARATION), element));
						out.print(" ");
					}
					printCountingMap.put("variableDeclaration", count - 1);
				}
			}
			break;
			case 25:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("elementType");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("elementType");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__ELEMENT_TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("elementType", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.BAG_TYPE__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_OrderedSetType(ocl.OrderedSetType element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(26);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__IF_EXP3));
		printCountingMap.put("ifExp3", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__APPLIED_PROPERTY));
		printCountingMap.put("appliedProperty", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__COLLECTION));
		printCountingMap.put("collection", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__LOOP_EXP));
		printCountingMap.put("loopExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__PARENT_OPERATION));
		printCountingMap.put("parentOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__INITIALIZED_VARIABLE));
		printCountingMap.put("initializedVariable", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__IF_EXP2));
		printCountingMap.put("ifExp2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__OWNING_OPERATION));
		printCountingMap.put("owningOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__IF_EXP1));
		printCountingMap.put("ifExp1", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__OWNING_ATTRIBUTE));
		printCountingMap.put("owningAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__NAME));
		printCountingMap.put("name", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__DEFINITIONS));
		printCountingMap.put("definitions", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__OCL_EXPRESSION));
		printCountingMap.put("oclExpression", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__OPERATION));
		printCountingMap.put("operation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__MAP_TYPE2));
		printCountingMap.put("mapType2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__ATTRIBUTE));
		printCountingMap.put("attribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__MAP_TYPE));
		printCountingMap.put("mapType", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__COLLECTION_TYPES));
		printCountingMap.put("collectionTypes", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__TUPLE_TYPE_ATTRIBUTE));
		printCountingMap.put("tupleTypeAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__VARIABLE_DECLARATION));
		printCountingMap.put("variableDeclaration", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__ELEMENT_TYPE));
		printCountingMap.put("elementType", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("OrderedSetType");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_OrderedSetType_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_OrderedSetType_0(ocl.OrderedSetType element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp3"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"appliedProperty"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collection"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"loopExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"parentOperation"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initializedVariable"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp2"		));
		if (tempMatchCount > matches) {
			alt = 11;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningOperation"		));
		if (tempMatchCount > matches) {
			alt = 12;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp1"		));
		if (tempMatchCount > matches) {
			alt = 13;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningAttribute"		));
		if (tempMatchCount > matches) {
			alt = 14;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"name"		));
		if (tempMatchCount > matches) {
			alt = 15;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"definitions"		));
		if (tempMatchCount > matches) {
			alt = 16;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"oclExpression"		));
		if (tempMatchCount > matches) {
			alt = 17;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"operation"		));
		if (tempMatchCount > matches) {
			alt = 18;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"mapType2"		));
		if (tempMatchCount > matches) {
			alt = 19;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"attribute"		));
		if (tempMatchCount > matches) {
			alt = 20;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"mapType"		));
		if (tempMatchCount > matches) {
			alt = 21;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collectionTypes"		));
		if (tempMatchCount > matches) {
			alt = 22;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"tupleTypeAttribute"		));
		if (tempMatchCount > matches) {
			alt = 23;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"variableDeclaration"		));
		if (tempMatchCount > matches) {
			alt = 24;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"elementType"		));
		if (tempMatchCount > matches) {
			alt = 25;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp3");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp3");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__IF_EXP3));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp3ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__IF_EXP3)), element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__IF_EXP3), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp3", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("appliedProperty");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("appliedProperty");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__APPLIED_PROPERTY));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionAppliedPropertyReferenceResolver().deResolve((ocl.PropertyCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__APPLIED_PROPERTY)), element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__APPLIED_PROPERTY), element));
						out.print(" ");
					}
					printCountingMap.put("appliedProperty", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collection");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collection");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__COLLECTION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionCollectionReferenceResolver().deResolve((ocl.CollectionExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__COLLECTION)), element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__COLLECTION), element));
						out.print(" ");
					}
					printCountingMap.put("collection", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__LET_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("loopExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("loopExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__LOOP_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLoopExpReferenceResolver().deResolve((ocl.LoopExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__LOOP_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__LOOP_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("loopExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("parentOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("parentOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__PARENT_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionParentOperationReferenceResolver().deResolve((ocl.OperationCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__PARENT_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__PARENT_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("parentOperation", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initializedVariable");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("initializedVariable");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__INITIALIZED_VARIABLE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionInitializedVariableReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__INITIALIZED_VARIABLE)), element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__INITIALIZED_VARIABLE), element));
						out.print(" ");
					}
					printCountingMap.put("initializedVariable", count - 1);
				}
			}
			break;
			case 11:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__IF_EXP2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp2ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__IF_EXP2)), element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__IF_EXP2), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp2", count - 1);
				}
			}
			break;
			case 12:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__OWNING_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__OWNING_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__OWNING_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("owningOperation", count - 1);
				}
			}
			break;
			case 13:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp1");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp1");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__IF_EXP1));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp1ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__IF_EXP1)), element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__IF_EXP1), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp1", count - 1);
				}
			}
			break;
			case 14:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__OWNING_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__OWNING_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__OWNING_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("owningAttribute", count - 1);
				}
			}
			break;
			case 15:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("name");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("name");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__NAME), element));
						out.print(" ");
					}
					printCountingMap.put("name", count - 1);
				}
			}
			break;
			case 16:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("definitions");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("definitions");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__DEFINITIONS));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeDefinitionsReferenceResolver().deResolve((ocl.OclContextDefinition) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__DEFINITIONS)), element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__DEFINITIONS), element));
						out.print(" ");
					}
					printCountingMap.put("definitions", count - 1);
				}
			}
			break;
			case 17:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("oclExpression");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("oclExpression");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__OCL_EXPRESSION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeOclExpressionReferenceResolver().deResolve((ocl.OclExpression) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__OCL_EXPRESSION)), element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__OCL_EXPRESSION), element));
						out.print(" ");
					}
					printCountingMap.put("oclExpression", count - 1);
				}
			}
			break;
			case 18:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("operation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("operation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("operation", count - 1);
				}
			}
			break;
			case 19:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("mapType2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("mapType2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__MAP_TYPE2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeMapType2ReferenceResolver().deResolve((ocl.MapType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__MAP_TYPE2)), element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__MAP_TYPE2), element));
						out.print(" ");
					}
					printCountingMap.put("mapType2", count - 1);
				}
			}
			break;
			case 20:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("attribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("attribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("attribute", count - 1);
				}
			}
			break;
			case 21:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("mapType");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("mapType");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__MAP_TYPE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeMapTypeReferenceResolver().deResolve((ocl.MapType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__MAP_TYPE)), element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__MAP_TYPE), element));
						out.print(" ");
					}
					printCountingMap.put("mapType", count - 1);
				}
			}
			break;
			case 22:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collectionTypes");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collectionTypes");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__COLLECTION_TYPES));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeCollectionTypesReferenceResolver().deResolve((ocl.CollectionType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__COLLECTION_TYPES)), element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__COLLECTION_TYPES), element));
						out.print(" ");
					}
					printCountingMap.put("collectionTypes", count - 1);
				}
			}
			break;
			case 23:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("tupleTypeAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("tupleTypeAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__TUPLE_TYPE_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeTupleTypeAttributeReferenceResolver().deResolve((ocl.TupleTypeAttribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__TUPLE_TYPE_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__TUPLE_TYPE_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("tupleTypeAttribute", count - 1);
				}
			}
			break;
			case 24:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("variableDeclaration");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("variableDeclaration");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__VARIABLE_DECLARATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeVariableDeclarationReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__VARIABLE_DECLARATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__VARIABLE_DECLARATION), element));
						out.print(" ");
					}
					printCountingMap.put("variableDeclaration", count - 1);
				}
			}
			break;
			case 25:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("elementType");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("elementType");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__ELEMENT_TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("elementType", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.ORDERED_SET_TYPE__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_SequenceType(ocl.SequenceType element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(26);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__IF_EXP3));
		printCountingMap.put("ifExp3", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__APPLIED_PROPERTY));
		printCountingMap.put("appliedProperty", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__COLLECTION));
		printCountingMap.put("collection", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__LOOP_EXP));
		printCountingMap.put("loopExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__PARENT_OPERATION));
		printCountingMap.put("parentOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__INITIALIZED_VARIABLE));
		printCountingMap.put("initializedVariable", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__IF_EXP2));
		printCountingMap.put("ifExp2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__OWNING_OPERATION));
		printCountingMap.put("owningOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__IF_EXP1));
		printCountingMap.put("ifExp1", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__OWNING_ATTRIBUTE));
		printCountingMap.put("owningAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__NAME));
		printCountingMap.put("name", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__DEFINITIONS));
		printCountingMap.put("definitions", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__OCL_EXPRESSION));
		printCountingMap.put("oclExpression", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__OPERATION));
		printCountingMap.put("operation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__MAP_TYPE2));
		printCountingMap.put("mapType2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__ATTRIBUTE));
		printCountingMap.put("attribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__MAP_TYPE));
		printCountingMap.put("mapType", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__COLLECTION_TYPES));
		printCountingMap.put("collectionTypes", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__TUPLE_TYPE_ATTRIBUTE));
		printCountingMap.put("tupleTypeAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__VARIABLE_DECLARATION));
		printCountingMap.put("variableDeclaration", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__ELEMENT_TYPE));
		printCountingMap.put("elementType", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("SequenceType");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_SequenceType_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_SequenceType_0(ocl.SequenceType element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp3"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"appliedProperty"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collection"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"loopExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"parentOperation"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initializedVariable"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp2"		));
		if (tempMatchCount > matches) {
			alt = 11;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningOperation"		));
		if (tempMatchCount > matches) {
			alt = 12;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp1"		));
		if (tempMatchCount > matches) {
			alt = 13;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningAttribute"		));
		if (tempMatchCount > matches) {
			alt = 14;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"name"		));
		if (tempMatchCount > matches) {
			alt = 15;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"definitions"		));
		if (tempMatchCount > matches) {
			alt = 16;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"oclExpression"		));
		if (tempMatchCount > matches) {
			alt = 17;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"operation"		));
		if (tempMatchCount > matches) {
			alt = 18;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"mapType2"		));
		if (tempMatchCount > matches) {
			alt = 19;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"attribute"		));
		if (tempMatchCount > matches) {
			alt = 20;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"mapType"		));
		if (tempMatchCount > matches) {
			alt = 21;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collectionTypes"		));
		if (tempMatchCount > matches) {
			alt = 22;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"tupleTypeAttribute"		));
		if (tempMatchCount > matches) {
			alt = 23;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"variableDeclaration"		));
		if (tempMatchCount > matches) {
			alt = 24;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"elementType"		));
		if (tempMatchCount > matches) {
			alt = 25;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp3");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp3");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__IF_EXP3));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp3ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__IF_EXP3)), element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__IF_EXP3), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp3", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("appliedProperty");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("appliedProperty");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__APPLIED_PROPERTY));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionAppliedPropertyReferenceResolver().deResolve((ocl.PropertyCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__APPLIED_PROPERTY)), element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__APPLIED_PROPERTY), element));
						out.print(" ");
					}
					printCountingMap.put("appliedProperty", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collection");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collection");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__COLLECTION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionCollectionReferenceResolver().deResolve((ocl.CollectionExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__COLLECTION)), element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__COLLECTION), element));
						out.print(" ");
					}
					printCountingMap.put("collection", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__LET_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("loopExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("loopExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__LOOP_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLoopExpReferenceResolver().deResolve((ocl.LoopExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__LOOP_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__LOOP_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("loopExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("parentOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("parentOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__PARENT_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionParentOperationReferenceResolver().deResolve((ocl.OperationCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__PARENT_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__PARENT_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("parentOperation", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initializedVariable");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("initializedVariable");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__INITIALIZED_VARIABLE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionInitializedVariableReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__INITIALIZED_VARIABLE)), element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__INITIALIZED_VARIABLE), element));
						out.print(" ");
					}
					printCountingMap.put("initializedVariable", count - 1);
				}
			}
			break;
			case 11:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__IF_EXP2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp2ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__IF_EXP2)), element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__IF_EXP2), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp2", count - 1);
				}
			}
			break;
			case 12:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__OWNING_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__OWNING_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__OWNING_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("owningOperation", count - 1);
				}
			}
			break;
			case 13:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp1");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp1");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__IF_EXP1));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp1ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__IF_EXP1)), element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__IF_EXP1), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp1", count - 1);
				}
			}
			break;
			case 14:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__OWNING_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__OWNING_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__OWNING_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("owningAttribute", count - 1);
				}
			}
			break;
			case 15:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("name");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("name");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__NAME), element));
						out.print(" ");
					}
					printCountingMap.put("name", count - 1);
				}
			}
			break;
			case 16:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("definitions");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("definitions");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__DEFINITIONS));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeDefinitionsReferenceResolver().deResolve((ocl.OclContextDefinition) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__DEFINITIONS)), element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__DEFINITIONS), element));
						out.print(" ");
					}
					printCountingMap.put("definitions", count - 1);
				}
			}
			break;
			case 17:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("oclExpression");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("oclExpression");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__OCL_EXPRESSION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeOclExpressionReferenceResolver().deResolve((ocl.OclExpression) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__OCL_EXPRESSION)), element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__OCL_EXPRESSION), element));
						out.print(" ");
					}
					printCountingMap.put("oclExpression", count - 1);
				}
			}
			break;
			case 18:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("operation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("operation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("operation", count - 1);
				}
			}
			break;
			case 19:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("mapType2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("mapType2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__MAP_TYPE2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeMapType2ReferenceResolver().deResolve((ocl.MapType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__MAP_TYPE2)), element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__MAP_TYPE2), element));
						out.print(" ");
					}
					printCountingMap.put("mapType2", count - 1);
				}
			}
			break;
			case 20:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("attribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("attribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("attribute", count - 1);
				}
			}
			break;
			case 21:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("mapType");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("mapType");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__MAP_TYPE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeMapTypeReferenceResolver().deResolve((ocl.MapType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__MAP_TYPE)), element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__MAP_TYPE), element));
						out.print(" ");
					}
					printCountingMap.put("mapType", count - 1);
				}
			}
			break;
			case 22:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collectionTypes");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collectionTypes");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__COLLECTION_TYPES));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeCollectionTypesReferenceResolver().deResolve((ocl.CollectionType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__COLLECTION_TYPES)), element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__COLLECTION_TYPES), element));
						out.print(" ");
					}
					printCountingMap.put("collectionTypes", count - 1);
				}
			}
			break;
			case 23:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("tupleTypeAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("tupleTypeAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__TUPLE_TYPE_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeTupleTypeAttributeReferenceResolver().deResolve((ocl.TupleTypeAttribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__TUPLE_TYPE_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__TUPLE_TYPE_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("tupleTypeAttribute", count - 1);
				}
			}
			break;
			case 24:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("variableDeclaration");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("variableDeclaration");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__VARIABLE_DECLARATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeVariableDeclarationReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__VARIABLE_DECLARATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__VARIABLE_DECLARATION), element));
						out.print(" ");
					}
					printCountingMap.put("variableDeclaration", count - 1);
				}
			}
			break;
			case 25:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("elementType");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("elementType");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__ELEMENT_TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("elementType", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.SEQUENCE_TYPE__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_SetType(ocl.SetType element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(26);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__IF_EXP3));
		printCountingMap.put("ifExp3", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__APPLIED_PROPERTY));
		printCountingMap.put("appliedProperty", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__COLLECTION));
		printCountingMap.put("collection", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__LOOP_EXP));
		printCountingMap.put("loopExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__PARENT_OPERATION));
		printCountingMap.put("parentOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__INITIALIZED_VARIABLE));
		printCountingMap.put("initializedVariable", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__IF_EXP2));
		printCountingMap.put("ifExp2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__OWNING_OPERATION));
		printCountingMap.put("owningOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__IF_EXP1));
		printCountingMap.put("ifExp1", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__OWNING_ATTRIBUTE));
		printCountingMap.put("owningAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__NAME));
		printCountingMap.put("name", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__DEFINITIONS));
		printCountingMap.put("definitions", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__OCL_EXPRESSION));
		printCountingMap.put("oclExpression", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__OPERATION));
		printCountingMap.put("operation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__MAP_TYPE2));
		printCountingMap.put("mapType2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__ATTRIBUTE));
		printCountingMap.put("attribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__MAP_TYPE));
		printCountingMap.put("mapType", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__COLLECTION_TYPES));
		printCountingMap.put("collectionTypes", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__TUPLE_TYPE_ATTRIBUTE));
		printCountingMap.put("tupleTypeAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__VARIABLE_DECLARATION));
		printCountingMap.put("variableDeclaration", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__ELEMENT_TYPE));
		printCountingMap.put("elementType", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("SetType");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_SetType_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_SetType_0(ocl.SetType element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp3"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"appliedProperty"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collection"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"loopExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"parentOperation"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initializedVariable"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp2"		));
		if (tempMatchCount > matches) {
			alt = 11;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningOperation"		));
		if (tempMatchCount > matches) {
			alt = 12;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp1"		));
		if (tempMatchCount > matches) {
			alt = 13;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningAttribute"		));
		if (tempMatchCount > matches) {
			alt = 14;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"name"		));
		if (tempMatchCount > matches) {
			alt = 15;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"definitions"		));
		if (tempMatchCount > matches) {
			alt = 16;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"oclExpression"		));
		if (tempMatchCount > matches) {
			alt = 17;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"operation"		));
		if (tempMatchCount > matches) {
			alt = 18;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"mapType2"		));
		if (tempMatchCount > matches) {
			alt = 19;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"attribute"		));
		if (tempMatchCount > matches) {
			alt = 20;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"mapType"		));
		if (tempMatchCount > matches) {
			alt = 21;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collectionTypes"		));
		if (tempMatchCount > matches) {
			alt = 22;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"tupleTypeAttribute"		));
		if (tempMatchCount > matches) {
			alt = 23;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"variableDeclaration"		));
		if (tempMatchCount > matches) {
			alt = 24;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"elementType"		));
		if (tempMatchCount > matches) {
			alt = 25;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp3");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp3");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__IF_EXP3));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp3ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__IF_EXP3)), element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__IF_EXP3), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp3", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("appliedProperty");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("appliedProperty");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__APPLIED_PROPERTY));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionAppliedPropertyReferenceResolver().deResolve((ocl.PropertyCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__APPLIED_PROPERTY)), element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__APPLIED_PROPERTY), element));
						out.print(" ");
					}
					printCountingMap.put("appliedProperty", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collection");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collection");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__COLLECTION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionCollectionReferenceResolver().deResolve((ocl.CollectionExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__COLLECTION)), element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__COLLECTION), element));
						out.print(" ");
					}
					printCountingMap.put("collection", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__LET_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("loopExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("loopExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__LOOP_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLoopExpReferenceResolver().deResolve((ocl.LoopExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__LOOP_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__LOOP_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("loopExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("parentOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("parentOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__PARENT_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionParentOperationReferenceResolver().deResolve((ocl.OperationCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__PARENT_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__PARENT_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("parentOperation", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initializedVariable");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("initializedVariable");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__INITIALIZED_VARIABLE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionInitializedVariableReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__INITIALIZED_VARIABLE)), element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__INITIALIZED_VARIABLE), element));
						out.print(" ");
					}
					printCountingMap.put("initializedVariable", count - 1);
				}
			}
			break;
			case 11:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__IF_EXP2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp2ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__IF_EXP2)), element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__IF_EXP2), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp2", count - 1);
				}
			}
			break;
			case 12:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__OWNING_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__OWNING_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__OWNING_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("owningOperation", count - 1);
				}
			}
			break;
			case 13:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp1");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp1");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__IF_EXP1));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp1ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__IF_EXP1)), element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__IF_EXP1), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp1", count - 1);
				}
			}
			break;
			case 14:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__OWNING_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__OWNING_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__OWNING_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("owningAttribute", count - 1);
				}
			}
			break;
			case 15:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("name");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("name");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__NAME), element));
						out.print(" ");
					}
					printCountingMap.put("name", count - 1);
				}
			}
			break;
			case 16:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("definitions");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("definitions");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__DEFINITIONS));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeDefinitionsReferenceResolver().deResolve((ocl.OclContextDefinition) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__DEFINITIONS)), element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__DEFINITIONS), element));
						out.print(" ");
					}
					printCountingMap.put("definitions", count - 1);
				}
			}
			break;
			case 17:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("oclExpression");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("oclExpression");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__OCL_EXPRESSION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeOclExpressionReferenceResolver().deResolve((ocl.OclExpression) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__OCL_EXPRESSION)), element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__OCL_EXPRESSION), element));
						out.print(" ");
					}
					printCountingMap.put("oclExpression", count - 1);
				}
			}
			break;
			case 18:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("operation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("operation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("operation", count - 1);
				}
			}
			break;
			case 19:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("mapType2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("mapType2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__MAP_TYPE2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeMapType2ReferenceResolver().deResolve((ocl.MapType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__MAP_TYPE2)), element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__MAP_TYPE2), element));
						out.print(" ");
					}
					printCountingMap.put("mapType2", count - 1);
				}
			}
			break;
			case 20:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("attribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("attribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("attribute", count - 1);
				}
			}
			break;
			case 21:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("mapType");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("mapType");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__MAP_TYPE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeMapTypeReferenceResolver().deResolve((ocl.MapType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__MAP_TYPE)), element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__MAP_TYPE), element));
						out.print(" ");
					}
					printCountingMap.put("mapType", count - 1);
				}
			}
			break;
			case 22:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collectionTypes");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collectionTypes");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__COLLECTION_TYPES));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeCollectionTypesReferenceResolver().deResolve((ocl.CollectionType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__COLLECTION_TYPES)), element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__COLLECTION_TYPES), element));
						out.print(" ");
					}
					printCountingMap.put("collectionTypes", count - 1);
				}
			}
			break;
			case 23:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("tupleTypeAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("tupleTypeAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__TUPLE_TYPE_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeTupleTypeAttributeReferenceResolver().deResolve((ocl.TupleTypeAttribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__TUPLE_TYPE_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__TUPLE_TYPE_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("tupleTypeAttribute", count - 1);
				}
			}
			break;
			case 24:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("variableDeclaration");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("variableDeclaration");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__VARIABLE_DECLARATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeVariableDeclarationReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__VARIABLE_DECLARATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__VARIABLE_DECLARATION), element));
						out.print(" ");
					}
					printCountingMap.put("variableDeclaration", count - 1);
				}
			}
			break;
			case 25:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("elementType");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("elementType");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__ELEMENT_TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("elementType", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.SET_TYPE__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_OclAnyType(ocl.OclAnyType element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(25);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__IF_EXP3));
		printCountingMap.put("ifExp3", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__APPLIED_PROPERTY));
		printCountingMap.put("appliedProperty", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__COLLECTION));
		printCountingMap.put("collection", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__LOOP_EXP));
		printCountingMap.put("loopExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__PARENT_OPERATION));
		printCountingMap.put("parentOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__INITIALIZED_VARIABLE));
		printCountingMap.put("initializedVariable", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__IF_EXP2));
		printCountingMap.put("ifExp2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__OWNING_OPERATION));
		printCountingMap.put("owningOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__IF_EXP1));
		printCountingMap.put("ifExp1", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__OWNING_ATTRIBUTE));
		printCountingMap.put("owningAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__NAME));
		printCountingMap.put("name", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__DEFINITIONS));
		printCountingMap.put("definitions", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__OCL_EXPRESSION));
		printCountingMap.put("oclExpression", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__OPERATION));
		printCountingMap.put("operation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__MAP_TYPE2));
		printCountingMap.put("mapType2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__ATTRIBUTE));
		printCountingMap.put("attribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__MAP_TYPE));
		printCountingMap.put("mapType", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__COLLECTION_TYPES));
		printCountingMap.put("collectionTypes", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__TUPLE_TYPE_ATTRIBUTE));
		printCountingMap.put("tupleTypeAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__VARIABLE_DECLARATION));
		printCountingMap.put("variableDeclaration", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("OclAnyType");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_OclAnyType_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_OclAnyType_0(ocl.OclAnyType element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp3"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"appliedProperty"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collection"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"loopExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"parentOperation"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initializedVariable"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp2"		));
		if (tempMatchCount > matches) {
			alt = 11;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningOperation"		));
		if (tempMatchCount > matches) {
			alt = 12;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp1"		));
		if (tempMatchCount > matches) {
			alt = 13;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningAttribute"		));
		if (tempMatchCount > matches) {
			alt = 14;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"name"		));
		if (tempMatchCount > matches) {
			alt = 15;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"definitions"		));
		if (tempMatchCount > matches) {
			alt = 16;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"oclExpression"		));
		if (tempMatchCount > matches) {
			alt = 17;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"operation"		));
		if (tempMatchCount > matches) {
			alt = 18;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"mapType2"		));
		if (tempMatchCount > matches) {
			alt = 19;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"attribute"		));
		if (tempMatchCount > matches) {
			alt = 20;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"mapType"		));
		if (tempMatchCount > matches) {
			alt = 21;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collectionTypes"		));
		if (tempMatchCount > matches) {
			alt = 22;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"tupleTypeAttribute"		));
		if (tempMatchCount > matches) {
			alt = 23;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"variableDeclaration"		));
		if (tempMatchCount > matches) {
			alt = 24;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp3");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp3");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__IF_EXP3));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp3ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__IF_EXP3)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__IF_EXP3), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp3", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("appliedProperty");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("appliedProperty");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__APPLIED_PROPERTY));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionAppliedPropertyReferenceResolver().deResolve((ocl.PropertyCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__APPLIED_PROPERTY)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__APPLIED_PROPERTY), element));
						out.print(" ");
					}
					printCountingMap.put("appliedProperty", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collection");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collection");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__COLLECTION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionCollectionReferenceResolver().deResolve((ocl.CollectionExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__COLLECTION)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__COLLECTION), element));
						out.print(" ");
					}
					printCountingMap.put("collection", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__LET_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("loopExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("loopExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__LOOP_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLoopExpReferenceResolver().deResolve((ocl.LoopExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__LOOP_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__LOOP_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("loopExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("parentOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("parentOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__PARENT_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionParentOperationReferenceResolver().deResolve((ocl.OperationCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__PARENT_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__PARENT_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("parentOperation", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initializedVariable");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("initializedVariable");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__INITIALIZED_VARIABLE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionInitializedVariableReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__INITIALIZED_VARIABLE)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__INITIALIZED_VARIABLE), element));
						out.print(" ");
					}
					printCountingMap.put("initializedVariable", count - 1);
				}
			}
			break;
			case 11:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__IF_EXP2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp2ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__IF_EXP2)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__IF_EXP2), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp2", count - 1);
				}
			}
			break;
			case 12:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__OWNING_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__OWNING_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__OWNING_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("owningOperation", count - 1);
				}
			}
			break;
			case 13:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp1");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp1");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__IF_EXP1));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp1ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__IF_EXP1)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__IF_EXP1), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp1", count - 1);
				}
			}
			break;
			case 14:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__OWNING_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__OWNING_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__OWNING_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("owningAttribute", count - 1);
				}
			}
			break;
			case 15:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("name");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("name");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__NAME), element));
						out.print(" ");
					}
					printCountingMap.put("name", count - 1);
				}
			}
			break;
			case 16:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("definitions");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("definitions");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__DEFINITIONS));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeDefinitionsReferenceResolver().deResolve((ocl.OclContextDefinition) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__DEFINITIONS)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__DEFINITIONS), element));
						out.print(" ");
					}
					printCountingMap.put("definitions", count - 1);
				}
			}
			break;
			case 17:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("oclExpression");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("oclExpression");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__OCL_EXPRESSION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeOclExpressionReferenceResolver().deResolve((ocl.OclExpression) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__OCL_EXPRESSION)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__OCL_EXPRESSION), element));
						out.print(" ");
					}
					printCountingMap.put("oclExpression", count - 1);
				}
			}
			break;
			case 18:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("operation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("operation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("operation", count - 1);
				}
			}
			break;
			case 19:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("mapType2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("mapType2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__MAP_TYPE2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeMapType2ReferenceResolver().deResolve((ocl.MapType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__MAP_TYPE2)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__MAP_TYPE2), element));
						out.print(" ");
					}
					printCountingMap.put("mapType2", count - 1);
				}
			}
			break;
			case 20:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("attribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("attribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("attribute", count - 1);
				}
			}
			break;
			case 21:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("mapType");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("mapType");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__MAP_TYPE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeMapTypeReferenceResolver().deResolve((ocl.MapType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__MAP_TYPE)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__MAP_TYPE), element));
						out.print(" ");
					}
					printCountingMap.put("mapType", count - 1);
				}
			}
			break;
			case 22:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collectionTypes");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collectionTypes");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__COLLECTION_TYPES));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeCollectionTypesReferenceResolver().deResolve((ocl.CollectionType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__COLLECTION_TYPES)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__COLLECTION_TYPES), element));
						out.print(" ");
					}
					printCountingMap.put("collectionTypes", count - 1);
				}
			}
			break;
			case 23:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("tupleTypeAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("tupleTypeAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__TUPLE_TYPE_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeTupleTypeAttributeReferenceResolver().deResolve((ocl.TupleTypeAttribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__TUPLE_TYPE_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__TUPLE_TYPE_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("tupleTypeAttribute", count - 1);
				}
			}
			break;
			case 24:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("variableDeclaration");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("variableDeclaration");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__VARIABLE_DECLARATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeVariableDeclarationReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__VARIABLE_DECLARATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__VARIABLE_DECLARATION), element));
						out.print(" ");
					}
					printCountingMap.put("variableDeclaration", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_ANY_TYPE__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_TupleType(ocl.TupleType element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(26);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__IF_EXP3));
		printCountingMap.put("ifExp3", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__APPLIED_PROPERTY));
		printCountingMap.put("appliedProperty", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__COLLECTION));
		printCountingMap.put("collection", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__LOOP_EXP));
		printCountingMap.put("loopExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__PARENT_OPERATION));
		printCountingMap.put("parentOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__INITIALIZED_VARIABLE));
		printCountingMap.put("initializedVariable", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__IF_EXP2));
		printCountingMap.put("ifExp2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__OWNING_OPERATION));
		printCountingMap.put("owningOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__IF_EXP1));
		printCountingMap.put("ifExp1", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__OWNING_ATTRIBUTE));
		printCountingMap.put("owningAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__NAME));
		printCountingMap.put("name", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__DEFINITIONS));
		printCountingMap.put("definitions", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__OCL_EXPRESSION));
		printCountingMap.put("oclExpression", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__OPERATION));
		printCountingMap.put("operation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__MAP_TYPE2));
		printCountingMap.put("mapType2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__ATTRIBUTE));
		printCountingMap.put("attribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__MAP_TYPE));
		printCountingMap.put("mapType", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__COLLECTION_TYPES));
		printCountingMap.put("collectionTypes", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__TUPLE_TYPE_ATTRIBUTE));
		printCountingMap.put("tupleTypeAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__VARIABLE_DECLARATION));
		printCountingMap.put("variableDeclaration", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__ATTRIBUTES));
		printCountingMap.put("attributes", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("TupleType");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_TupleType_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_TupleType_0(ocl.TupleType element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp3"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"appliedProperty"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collection"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"loopExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"parentOperation"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initializedVariable"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp2"		));
		if (tempMatchCount > matches) {
			alt = 11;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningOperation"		));
		if (tempMatchCount > matches) {
			alt = 12;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp1"		));
		if (tempMatchCount > matches) {
			alt = 13;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningAttribute"		));
		if (tempMatchCount > matches) {
			alt = 14;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"name"		));
		if (tempMatchCount > matches) {
			alt = 15;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"definitions"		));
		if (tempMatchCount > matches) {
			alt = 16;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"oclExpression"		));
		if (tempMatchCount > matches) {
			alt = 17;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"operation"		));
		if (tempMatchCount > matches) {
			alt = 18;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"mapType2"		));
		if (tempMatchCount > matches) {
			alt = 19;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"attribute"		));
		if (tempMatchCount > matches) {
			alt = 20;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"mapType"		));
		if (tempMatchCount > matches) {
			alt = 21;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collectionTypes"		));
		if (tempMatchCount > matches) {
			alt = 22;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"tupleTypeAttribute"		));
		if (tempMatchCount > matches) {
			alt = 23;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"variableDeclaration"		));
		if (tempMatchCount > matches) {
			alt = 24;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"attributes"		));
		if (tempMatchCount > matches) {
			alt = 25;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp3");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp3");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__IF_EXP3));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp3ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__IF_EXP3)), element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__IF_EXP3), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp3", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("appliedProperty");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("appliedProperty");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__APPLIED_PROPERTY));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionAppliedPropertyReferenceResolver().deResolve((ocl.PropertyCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__APPLIED_PROPERTY)), element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__APPLIED_PROPERTY), element));
						out.print(" ");
					}
					printCountingMap.put("appliedProperty", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collection");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collection");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__COLLECTION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionCollectionReferenceResolver().deResolve((ocl.CollectionExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__COLLECTION)), element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__COLLECTION), element));
						out.print(" ");
					}
					printCountingMap.put("collection", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__LET_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("loopExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("loopExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__LOOP_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLoopExpReferenceResolver().deResolve((ocl.LoopExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__LOOP_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__LOOP_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("loopExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("parentOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("parentOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__PARENT_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionParentOperationReferenceResolver().deResolve((ocl.OperationCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__PARENT_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__PARENT_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("parentOperation", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initializedVariable");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("initializedVariable");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__INITIALIZED_VARIABLE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionInitializedVariableReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__INITIALIZED_VARIABLE)), element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__INITIALIZED_VARIABLE), element));
						out.print(" ");
					}
					printCountingMap.put("initializedVariable", count - 1);
				}
			}
			break;
			case 11:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__IF_EXP2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp2ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__IF_EXP2)), element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__IF_EXP2), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp2", count - 1);
				}
			}
			break;
			case 12:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__OWNING_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__OWNING_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__OWNING_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("owningOperation", count - 1);
				}
			}
			break;
			case 13:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp1");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp1");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__IF_EXP1));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp1ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__IF_EXP1)), element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__IF_EXP1), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp1", count - 1);
				}
			}
			break;
			case 14:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__OWNING_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__OWNING_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__OWNING_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("owningAttribute", count - 1);
				}
			}
			break;
			case 15:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("name");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("name");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__NAME), element));
						out.print(" ");
					}
					printCountingMap.put("name", count - 1);
				}
			}
			break;
			case 16:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("definitions");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("definitions");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__DEFINITIONS));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeDefinitionsReferenceResolver().deResolve((ocl.OclContextDefinition) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__DEFINITIONS)), element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__DEFINITIONS), element));
						out.print(" ");
					}
					printCountingMap.put("definitions", count - 1);
				}
			}
			break;
			case 17:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("oclExpression");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("oclExpression");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__OCL_EXPRESSION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeOclExpressionReferenceResolver().deResolve((ocl.OclExpression) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__OCL_EXPRESSION)), element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__OCL_EXPRESSION), element));
						out.print(" ");
					}
					printCountingMap.put("oclExpression", count - 1);
				}
			}
			break;
			case 18:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("operation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("operation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("operation", count - 1);
				}
			}
			break;
			case 19:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("mapType2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("mapType2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__MAP_TYPE2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeMapType2ReferenceResolver().deResolve((ocl.MapType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__MAP_TYPE2)), element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__MAP_TYPE2), element));
						out.print(" ");
					}
					printCountingMap.put("mapType2", count - 1);
				}
			}
			break;
			case 20:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("attribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("attribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("attribute", count - 1);
				}
			}
			break;
			case 21:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("mapType");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("mapType");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__MAP_TYPE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeMapTypeReferenceResolver().deResolve((ocl.MapType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__MAP_TYPE)), element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__MAP_TYPE), element));
						out.print(" ");
					}
					printCountingMap.put("mapType", count - 1);
				}
			}
			break;
			case 22:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collectionTypes");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collectionTypes");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__COLLECTION_TYPES));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeCollectionTypesReferenceResolver().deResolve((ocl.CollectionType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__COLLECTION_TYPES)), element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__COLLECTION_TYPES), element));
						out.print(" ");
					}
					printCountingMap.put("collectionTypes", count - 1);
				}
			}
			break;
			case 23:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("tupleTypeAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("tupleTypeAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__TUPLE_TYPE_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeTupleTypeAttributeReferenceResolver().deResolve((ocl.TupleTypeAttribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__TUPLE_TYPE_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__TUPLE_TYPE_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("tupleTypeAttribute", count - 1);
				}
			}
			break;
			case 24:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("variableDeclaration");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("variableDeclaration");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__VARIABLE_DECLARATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeVariableDeclarationReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__VARIABLE_DECLARATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__VARIABLE_DECLARATION), element));
						out.print(" ");
					}
					printCountingMap.put("variableDeclaration", count - 1);
				}
			}
			break;
			case 25:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("attributes");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("attributes");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__ATTRIBUTES));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("attributes", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_TupleTypeAttribute(ocl.TupleTypeAttribute element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(6);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE_ATTRIBUTE__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE_ATTRIBUTE__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE_ATTRIBUTE__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE_ATTRIBUTE__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE_ATTRIBUTE__TUPLE_TYPE));
		printCountingMap.put("tupleType", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE_ATTRIBUTE__NAME));
		printCountingMap.put("name", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("TupleTypeAttribute");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_TupleTypeAttribute_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_TupleTypeAttribute_0(ocl.TupleTypeAttribute element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"tupleType"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"name"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE_ATTRIBUTE__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE_ATTRIBUTE__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE_ATTRIBUTE__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE_ATTRIBUTE__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE_ATTRIBUTE__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("tupleType");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("tupleType");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE_ATTRIBUTE__TUPLE_TYPE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getTupleTypeAttributeTupleTypeReferenceResolver().deResolve((ocl.TupleType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE_ATTRIBUTE__TUPLE_TYPE)), element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE_ATTRIBUTE__TUPLE_TYPE), element));
						out.print(" ");
					}
					printCountingMap.put("tupleType", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("name");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("name");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE_ATTRIBUTE__NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE_ATTRIBUTE__NAME), element));
						out.print(" ");
					}
					printCountingMap.put("name", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE_ATTRIBUTE__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.TUPLE_TYPE_ATTRIBUTE__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_OclModelElement(ocl.OclModelElement element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(26);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__IF_EXP3));
		printCountingMap.put("ifExp3", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__APPLIED_PROPERTY));
		printCountingMap.put("appliedProperty", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__COLLECTION));
		printCountingMap.put("collection", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__LOOP_EXP));
		printCountingMap.put("loopExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__PARENT_OPERATION));
		printCountingMap.put("parentOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__INITIALIZED_VARIABLE));
		printCountingMap.put("initializedVariable", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__IF_EXP2));
		printCountingMap.put("ifExp2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__OWNING_OPERATION));
		printCountingMap.put("owningOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__IF_EXP1));
		printCountingMap.put("ifExp1", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__OWNING_ATTRIBUTE));
		printCountingMap.put("owningAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__NAME));
		printCountingMap.put("name", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__DEFINITIONS));
		printCountingMap.put("definitions", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__OCL_EXPRESSION));
		printCountingMap.put("oclExpression", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__OPERATION));
		printCountingMap.put("operation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__MAP_TYPE2));
		printCountingMap.put("mapType2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__ATTRIBUTE));
		printCountingMap.put("attribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__MAP_TYPE));
		printCountingMap.put("mapType", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__COLLECTION_TYPES));
		printCountingMap.put("collectionTypes", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__TUPLE_TYPE_ATTRIBUTE));
		printCountingMap.put("tupleTypeAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__VARIABLE_DECLARATION));
		printCountingMap.put("variableDeclaration", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__MODEL));
		printCountingMap.put("model", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("OclModelElement");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_OclModelElement_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_OclModelElement_0(ocl.OclModelElement element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp3"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"appliedProperty"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collection"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"loopExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"parentOperation"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initializedVariable"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp2"		));
		if (tempMatchCount > matches) {
			alt = 11;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningOperation"		));
		if (tempMatchCount > matches) {
			alt = 12;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp1"		));
		if (tempMatchCount > matches) {
			alt = 13;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningAttribute"		));
		if (tempMatchCount > matches) {
			alt = 14;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"name"		));
		if (tempMatchCount > matches) {
			alt = 15;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"definitions"		));
		if (tempMatchCount > matches) {
			alt = 16;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"oclExpression"		));
		if (tempMatchCount > matches) {
			alt = 17;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"operation"		));
		if (tempMatchCount > matches) {
			alt = 18;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"mapType2"		));
		if (tempMatchCount > matches) {
			alt = 19;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"attribute"		));
		if (tempMatchCount > matches) {
			alt = 20;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"mapType"		));
		if (tempMatchCount > matches) {
			alt = 21;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collectionTypes"		));
		if (tempMatchCount > matches) {
			alt = 22;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"tupleTypeAttribute"		));
		if (tempMatchCount > matches) {
			alt = 23;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"variableDeclaration"		));
		if (tempMatchCount > matches) {
			alt = 24;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"model"		));
		if (tempMatchCount > matches) {
			alt = 25;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp3");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp3");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__IF_EXP3));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp3ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__IF_EXP3)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__IF_EXP3), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp3", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("appliedProperty");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("appliedProperty");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__APPLIED_PROPERTY));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionAppliedPropertyReferenceResolver().deResolve((ocl.PropertyCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__APPLIED_PROPERTY)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__APPLIED_PROPERTY), element));
						out.print(" ");
					}
					printCountingMap.put("appliedProperty", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collection");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collection");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__COLLECTION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionCollectionReferenceResolver().deResolve((ocl.CollectionExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__COLLECTION)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__COLLECTION), element));
						out.print(" ");
					}
					printCountingMap.put("collection", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__LET_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("loopExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("loopExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__LOOP_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLoopExpReferenceResolver().deResolve((ocl.LoopExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__LOOP_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__LOOP_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("loopExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("parentOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("parentOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__PARENT_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionParentOperationReferenceResolver().deResolve((ocl.OperationCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__PARENT_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__PARENT_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("parentOperation", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initializedVariable");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("initializedVariable");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__INITIALIZED_VARIABLE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionInitializedVariableReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__INITIALIZED_VARIABLE)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__INITIALIZED_VARIABLE), element));
						out.print(" ");
					}
					printCountingMap.put("initializedVariable", count - 1);
				}
			}
			break;
			case 11:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__IF_EXP2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp2ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__IF_EXP2)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__IF_EXP2), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp2", count - 1);
				}
			}
			break;
			case 12:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__OWNING_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__OWNING_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__OWNING_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("owningOperation", count - 1);
				}
			}
			break;
			case 13:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp1");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp1");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__IF_EXP1));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp1ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__IF_EXP1)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__IF_EXP1), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp1", count - 1);
				}
			}
			break;
			case 14:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__OWNING_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__OWNING_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__OWNING_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("owningAttribute", count - 1);
				}
			}
			break;
			case 15:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("name");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("name");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__NAME), element));
						out.print(" ");
					}
					printCountingMap.put("name", count - 1);
				}
			}
			break;
			case 16:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("definitions");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("definitions");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__DEFINITIONS));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeDefinitionsReferenceResolver().deResolve((ocl.OclContextDefinition) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__DEFINITIONS)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__DEFINITIONS), element));
						out.print(" ");
					}
					printCountingMap.put("definitions", count - 1);
				}
			}
			break;
			case 17:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("oclExpression");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("oclExpression");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__OCL_EXPRESSION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeOclExpressionReferenceResolver().deResolve((ocl.OclExpression) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__OCL_EXPRESSION)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__OCL_EXPRESSION), element));
						out.print(" ");
					}
					printCountingMap.put("oclExpression", count - 1);
				}
			}
			break;
			case 18:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("operation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("operation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("operation", count - 1);
				}
			}
			break;
			case 19:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("mapType2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("mapType2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__MAP_TYPE2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeMapType2ReferenceResolver().deResolve((ocl.MapType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__MAP_TYPE2)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__MAP_TYPE2), element));
						out.print(" ");
					}
					printCountingMap.put("mapType2", count - 1);
				}
			}
			break;
			case 20:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("attribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("attribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("attribute", count - 1);
				}
			}
			break;
			case 21:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("mapType");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("mapType");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__MAP_TYPE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeMapTypeReferenceResolver().deResolve((ocl.MapType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__MAP_TYPE)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__MAP_TYPE), element));
						out.print(" ");
					}
					printCountingMap.put("mapType", count - 1);
				}
			}
			break;
			case 22:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collectionTypes");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collectionTypes");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__COLLECTION_TYPES));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeCollectionTypesReferenceResolver().deResolve((ocl.CollectionType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__COLLECTION_TYPES)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__COLLECTION_TYPES), element));
						out.print(" ");
					}
					printCountingMap.put("collectionTypes", count - 1);
				}
			}
			break;
			case 23:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("tupleTypeAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("tupleTypeAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__TUPLE_TYPE_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeTupleTypeAttributeReferenceResolver().deResolve((ocl.TupleTypeAttribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__TUPLE_TYPE_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__TUPLE_TYPE_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("tupleTypeAttribute", count - 1);
				}
			}
			break;
			case 24:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("variableDeclaration");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("variableDeclaration");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__VARIABLE_DECLARATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeVariableDeclarationReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__VARIABLE_DECLARATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__VARIABLE_DECLARATION), element));
						out.print(" ");
					}
					printCountingMap.put("variableDeclaration", count - 1);
				}
			}
			break;
			case 25:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("model");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("model");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__MODEL));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclModelElementModelReferenceResolver().deResolve((ocl.OclModel) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__MODEL)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__MODEL), element));
						out.print(" ");
					}
					printCountingMap.put("model", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL_ELEMENT__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_MapType(ocl.MapType element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(27);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__IF_EXP3));
		printCountingMap.put("ifExp3", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__APPLIED_PROPERTY));
		printCountingMap.put("appliedProperty", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__COLLECTION));
		printCountingMap.put("collection", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__LET_EXP));
		printCountingMap.put("letExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__LOOP_EXP));
		printCountingMap.put("loopExp", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__PARENT_OPERATION));
		printCountingMap.put("parentOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__INITIALIZED_VARIABLE));
		printCountingMap.put("initializedVariable", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__IF_EXP2));
		printCountingMap.put("ifExp2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__OWNING_OPERATION));
		printCountingMap.put("owningOperation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__IF_EXP1));
		printCountingMap.put("ifExp1", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__OWNING_ATTRIBUTE));
		printCountingMap.put("owningAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__NAME));
		printCountingMap.put("name", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__DEFINITIONS));
		printCountingMap.put("definitions", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__OCL_EXPRESSION));
		printCountingMap.put("oclExpression", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__OPERATION));
		printCountingMap.put("operation", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__MAP_TYPE2));
		printCountingMap.put("mapType2", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__ATTRIBUTE));
		printCountingMap.put("attribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__MAP_TYPE));
		printCountingMap.put("mapType", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__COLLECTION_TYPES));
		printCountingMap.put("collectionTypes", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__TUPLE_TYPE_ATTRIBUTE));
		printCountingMap.put("tupleTypeAttribute", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__VARIABLE_DECLARATION));
		printCountingMap.put("variableDeclaration", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__VALUE_TYPE));
		printCountingMap.put("valueType", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__KEY_TYPE));
		printCountingMap.put("keyType", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("MapType");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_MapType_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_MapType_0(ocl.MapType element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp3"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"appliedProperty"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collection"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"letExp"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"loopExp"		));
		if (tempMatchCount > matches) {
			alt = 8;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"parentOperation"		));
		if (tempMatchCount > matches) {
			alt = 9;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initializedVariable"		));
		if (tempMatchCount > matches) {
			alt = 10;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp2"		));
		if (tempMatchCount > matches) {
			alt = 11;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningOperation"		));
		if (tempMatchCount > matches) {
			alt = 12;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"ifExp1"		));
		if (tempMatchCount > matches) {
			alt = 13;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"owningAttribute"		));
		if (tempMatchCount > matches) {
			alt = 14;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"name"		));
		if (tempMatchCount > matches) {
			alt = 15;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"definitions"		));
		if (tempMatchCount > matches) {
			alt = 16;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"oclExpression"		));
		if (tempMatchCount > matches) {
			alt = 17;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"operation"		));
		if (tempMatchCount > matches) {
			alt = 18;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"mapType2"		));
		if (tempMatchCount > matches) {
			alt = 19;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"attribute"		));
		if (tempMatchCount > matches) {
			alt = 20;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"mapType"		));
		if (tempMatchCount > matches) {
			alt = 21;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"collectionTypes"		));
		if (tempMatchCount > matches) {
			alt = 22;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"tupleTypeAttribute"		));
		if (tempMatchCount > matches) {
			alt = 23;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"variableDeclaration"		));
		if (tempMatchCount > matches) {
			alt = 24;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"valueType"		));
		if (tempMatchCount > matches) {
			alt = 25;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"keyType"		));
		if (tempMatchCount > matches) {
			alt = 26;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp3");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp3");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__IF_EXP3));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp3ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__IF_EXP3)), element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__IF_EXP3), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp3", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("appliedProperty");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("appliedProperty");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__APPLIED_PROPERTY));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionAppliedPropertyReferenceResolver().deResolve((ocl.PropertyCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__APPLIED_PROPERTY)), element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__APPLIED_PROPERTY), element));
						out.print(" ");
					}
					printCountingMap.put("appliedProperty", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collection");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collection");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__COLLECTION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionCollectionReferenceResolver().deResolve((ocl.CollectionExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__COLLECTION)), element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__COLLECTION), element));
						out.print(" ");
					}
					printCountingMap.put("collection", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("letExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("letExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__LET_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLetExpReferenceResolver().deResolve((ocl.LetExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__LET_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__LET_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("letExp", count - 1);
				}
			}
			break;
			case 8:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("loopExp");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("loopExp");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__LOOP_EXP));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionLoopExpReferenceResolver().deResolve((ocl.LoopExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__LOOP_EXP)), element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__LOOP_EXP), element));
						out.print(" ");
					}
					printCountingMap.put("loopExp", count - 1);
				}
			}
			break;
			case 9:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("parentOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("parentOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__PARENT_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionParentOperationReferenceResolver().deResolve((ocl.OperationCallExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__PARENT_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__PARENT_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("parentOperation", count - 1);
				}
			}
			break;
			case 10:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initializedVariable");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("initializedVariable");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__INITIALIZED_VARIABLE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionInitializedVariableReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__INITIALIZED_VARIABLE)), element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__INITIALIZED_VARIABLE), element));
						out.print(" ");
					}
					printCountingMap.put("initializedVariable", count - 1);
				}
			}
			break;
			case 11:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__IF_EXP2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp2ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__IF_EXP2)), element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__IF_EXP2), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp2", count - 1);
				}
			}
			break;
			case 12:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningOperation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningOperation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__OWNING_OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__OWNING_OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__OWNING_OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("owningOperation", count - 1);
				}
			}
			break;
			case 13:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("ifExp1");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("ifExp1");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__IF_EXP1));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionIfExp1ReferenceResolver().deResolve((ocl.IfExp) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__IF_EXP1)), element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__IF_EXP1), element));
						out.print(" ");
					}
					printCountingMap.put("ifExp1", count - 1);
				}
			}
			break;
			case 14:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("owningAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("owningAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__OWNING_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclExpressionOwningAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__OWNING_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__OWNING_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("owningAttribute", count - 1);
				}
			}
			break;
			case 15:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("name");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("name");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__NAME), element));
						out.print(" ");
					}
					printCountingMap.put("name", count - 1);
				}
			}
			break;
			case 16:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("definitions");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("definitions");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__DEFINITIONS));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeDefinitionsReferenceResolver().deResolve((ocl.OclContextDefinition) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__DEFINITIONS)), element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__DEFINITIONS), element));
						out.print(" ");
					}
					printCountingMap.put("definitions", count - 1);
				}
			}
			break;
			case 17:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("oclExpression");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("oclExpression");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__OCL_EXPRESSION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeOclExpressionReferenceResolver().deResolve((ocl.OclExpression) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__OCL_EXPRESSION)), element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__OCL_EXPRESSION), element));
						out.print(" ");
					}
					printCountingMap.put("oclExpression", count - 1);
				}
			}
			break;
			case 18:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("operation");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("operation");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__OPERATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeOperationReferenceResolver().deResolve((ocl.Operation) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__OPERATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__OPERATION), element));
						out.print(" ");
					}
					printCountingMap.put("operation", count - 1);
				}
			}
			break;
			case 19:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("mapType2");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("mapType2");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__MAP_TYPE2));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeMapType2ReferenceResolver().deResolve((ocl.MapType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__MAP_TYPE2)), element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__MAP_TYPE2), element));
						out.print(" ");
					}
					printCountingMap.put("mapType2", count - 1);
				}
			}
			break;
			case 20:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("attribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("attribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeAttributeReferenceResolver().deResolve((ocl.Attribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("attribute", count - 1);
				}
			}
			break;
			case 21:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("mapType");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("mapType");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__MAP_TYPE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeMapTypeReferenceResolver().deResolve((ocl.MapType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__MAP_TYPE)), element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__MAP_TYPE), element));
						out.print(" ");
					}
					printCountingMap.put("mapType", count - 1);
				}
			}
			break;
			case 22:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("collectionTypes");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("collectionTypes");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__COLLECTION_TYPES));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeCollectionTypesReferenceResolver().deResolve((ocl.CollectionType) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__COLLECTION_TYPES)), element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__COLLECTION_TYPES), element));
						out.print(" ");
					}
					printCountingMap.put("collectionTypes", count - 1);
				}
			}
			break;
			case 23:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("tupleTypeAttribute");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("tupleTypeAttribute");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__TUPLE_TYPE_ATTRIBUTE));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeTupleTypeAttributeReferenceResolver().deResolve((ocl.TupleTypeAttribute) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__TUPLE_TYPE_ATTRIBUTE)), element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__TUPLE_TYPE_ATTRIBUTE), element));
						out.print(" ");
					}
					printCountingMap.put("tupleTypeAttribute", count - 1);
				}
			}
			break;
			case 24:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("variableDeclaration");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("variableDeclaration");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__VARIABLE_DECLARATION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclTypeVariableDeclarationReferenceResolver().deResolve((ocl.VariableDeclaration) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__VARIABLE_DECLARATION)), element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__VARIABLE_DECLARATION), element));
						out.print(" ");
					}
					printCountingMap.put("variableDeclaration", count - 1);
				}
			}
			break;
			case 25:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("valueType");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("valueType");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__VALUE_TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("valueType", count - 1);
				}
			}
			break;
			case 26:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("keyType");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("keyType");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__KEY_TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("keyType", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.MAP_TYPE__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_OclFeatureDefinition(ocl.OclFeatureDefinition element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(5);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_FEATURE_DEFINITION__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_FEATURE_DEFINITION__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_FEATURE_DEFINITION__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_FEATURE_DEFINITION__FEATURE));
		printCountingMap.put("feature", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_FEATURE_DEFINITION__CONTEXT_));
		printCountingMap.put("context_", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("OclFeatureDefinition");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_OclFeatureDefinition_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_OclFeatureDefinition_0(ocl.OclFeatureDefinition element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"feature"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"context_"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_FEATURE_DEFINITION__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_FEATURE_DEFINITION__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_FEATURE_DEFINITION__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_FEATURE_DEFINITION__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("feature");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("feature");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_FEATURE_DEFINITION__FEATURE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("feature", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("context_");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("context_");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_FEATURE_DEFINITION__CONTEXT_));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("context_", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_FEATURE_DEFINITION__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_FEATURE_DEFINITION__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_OclContextDefinition(ocl.OclContextDefinition element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(5);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_CONTEXT_DEFINITION__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_CONTEXT_DEFINITION__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_CONTEXT_DEFINITION__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_CONTEXT_DEFINITION__DEFINITION));
		printCountingMap.put("definition", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_CONTEXT_DEFINITION__CONTEXT_));
		printCountingMap.put("context_", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("OclContextDefinition");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_OclContextDefinition_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_OclContextDefinition_0(ocl.OclContextDefinition element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"definition"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"context_"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_CONTEXT_DEFINITION__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_CONTEXT_DEFINITION__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_CONTEXT_DEFINITION__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_CONTEXT_DEFINITION__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("definition");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("definition");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_CONTEXT_DEFINITION__DEFINITION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclContextDefinitionDefinitionReferenceResolver().deResolve((ocl.OclFeatureDefinition) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_CONTEXT_DEFINITION__DEFINITION)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_CONTEXT_DEFINITION__DEFINITION), element));
						out.print(" ");
					}
					printCountingMap.put("definition", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("context_");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("context_");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_CONTEXT_DEFINITION__CONTEXT_));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("context_", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_CONTEXT_DEFINITION__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_CONTEXT_DEFINITION__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_Attribute(ocl.Attribute element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(7);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ATTRIBUTE__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ATTRIBUTE__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ATTRIBUTE__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ATTRIBUTE__DEFINITION));
		printCountingMap.put("definition", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ATTRIBUTE__NAME));
		printCountingMap.put("name", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ATTRIBUTE__INIT_EXPRESSION));
		printCountingMap.put("initExpression", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ATTRIBUTE__TYPE));
		printCountingMap.put("type", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("Attribute");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_Attribute_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_Attribute_0(ocl.Attribute element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"definition"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"name"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"initExpression"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"type"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ATTRIBUTE__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.ATTRIBUTE__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ATTRIBUTE__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.ATTRIBUTE__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("definition");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("definition");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ATTRIBUTE__DEFINITION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclFeatureDefinitionReferenceResolver().deResolve((ocl.OclFeatureDefinition) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.ATTRIBUTE__DEFINITION)), element.eClass().getEStructuralFeature(ocl.OclPackage.ATTRIBUTE__DEFINITION), element));
						out.print(" ");
					}
					printCountingMap.put("definition", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("name");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("name");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ATTRIBUTE__NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.ATTRIBUTE__NAME), element));
						out.print(" ");
					}
					printCountingMap.put("name", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("initExpression");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("initExpression");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ATTRIBUTE__INIT_EXPRESSION));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("initExpression", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("type");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("type");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ATTRIBUTE__TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("type", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.ATTRIBUTE__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.ATTRIBUTE__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_Operation(ocl.Operation element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(8);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION__DEFINITION));
		printCountingMap.put("definition", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION__NAME));
		printCountingMap.put("name", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION__PARAMETERS));
		printCountingMap.put("parameters", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION__RETURN_TYPE));
		printCountingMap.put("returnType", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION__BODY));
		printCountingMap.put("body", temp == null ? 0 : 1);
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("Operation");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_Operation_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_Operation_0(ocl.Operation element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		String localtab = outertab;
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"definition"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"name"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"parameters"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"returnType"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"body"		));
		if (tempMatchCount > matches) {
			alt = 7;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("definition");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("definition");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION__DEFINITION));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclFeatureDefinitionReferenceResolver().deResolve((ocl.OclFeatureDefinition) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION__DEFINITION)), element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION__DEFINITION), element));
						out.print(" ");
					}
					printCountingMap.put("definition", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("name");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("name");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION__NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION__NAME), element));
						out.print(" ");
					}
					printCountingMap.put("name", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("parameters");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("parameters");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION__PARAMETERS));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("parameters", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("returnType");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("returnType");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION__RETURN_TYPE));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("returnType", count - 1);
				}
			}
			break;
			case 7:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("body");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (Containment)
				count = printCountingMap.get("body");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION__BODY));
					if (o != null) {
						doPrint((org.eclipse.emf.ecore.EObject) o, out, localtab);
					}
					printCountingMap.put("body", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.OPERATION__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
	public void print_ocl_OclModel(ocl.OclModel element, String outertab, java.io.PrintWriter out) {
		String localtab = outertab;
		// The printCountingMap contains a mapping from feature names to the number of
		// remaining elements that still need to be printed. The map is initialized with
		// the number of elements stored in each structural feature. For lists this is the
		// list size. For non-multiple features it is either 1 (if the feature is set) or
		// 0 (if the feature is null).
		java.util.Map<String, Integer> printCountingMap = new java.util.LinkedHashMap<String, Integer>(7);
		Object temp;
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL__LOCATION));
		printCountingMap.put("location", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL__COMMENTS_BEFORE));
		printCountingMap.put("commentsBefore", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL__COMMENTS_AFTER));
		printCountingMap.put("commentsAfter", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL__NAME));
		printCountingMap.put("name", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL__METAMODEL));
		printCountingMap.put("metamodel", temp == null ? 0 : 1);
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL__ELEMENTS));
		printCountingMap.put("elements", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		temp = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL__MODEL));
		printCountingMap.put("model", temp == null ? 0 : ((java.util.Collection<?>) temp).size());
		// print collected hidden tokens
		boolean iterate = true;
		java.io.StringWriter sWriter = null;
		java.io.PrintWriter out1 = null;
		java.util.Map<String, Integer> printCountingMap1 = null;
		// DEFINITION PART BEGINS (CsString)
		out.print("OclModel");
		out.print(" ");
		// DEFINITION PART BEGINS (CsString)
		out.print("{");
		out.print(" ");
		// DEFINITION PART BEGINS (CompoundDefinition)
		iterate = true;
		while (iterate) {
			sWriter = new java.io.StringWriter();
			out1 = new java.io.PrintWriter(sWriter);
			printCountingMap1 = new java.util.LinkedHashMap<String, Integer>(printCountingMap);
			print_ocl_OclModel_0(element, localtab, out1, printCountingMap1);
			if (printCountingMap.equals(printCountingMap1)) {
				iterate = false;
				out1.close();
			} else {
				out1.flush();
				out1.close();
				out.print(sWriter.toString());
				printCountingMap.putAll(printCountingMap1);
			}
		}
		// DEFINITION PART BEGINS (CsString)
		out.print("}");
		out.print(" ");
	}
	
	public void print_ocl_OclModel_0(ocl.OclModel element, String outertab, java.io.PrintWriter out, java.util.Map<String, Integer> printCountingMap) {
		int count;
		int alt = -1;
		alt = 0;
		int matches = 		matchCount(printCountingMap, java.util.Arrays.asList(		"location"		));
		int tempMatchCount;
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsBefore"		));
		if (tempMatchCount > matches) {
			alt = 1;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"commentsAfter"		));
		if (tempMatchCount > matches) {
			alt = 2;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"name"		));
		if (tempMatchCount > matches) {
			alt = 3;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"metamodel"		));
		if (tempMatchCount > matches) {
			alt = 4;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"elements"		));
		if (tempMatchCount > matches) {
			alt = 5;
			matches = tempMatchCount;
		}
		tempMatchCount = 		matchCount(printCountingMap, java.util.Arrays.asList(		"model"		));
		if (tempMatchCount > matches) {
			alt = 6;
			matches = tempMatchCount;
		}
		switch(alt) {
			case 1:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsBefore");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsBefore");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL__COMMENTS_BEFORE));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL__COMMENTS_BEFORE), element));
						out.print(" ");
					}
					printCountingMap.put("commentsBefore", count - 1);
				}
			}
			break;
			case 2:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("commentsAfter");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("commentsAfter");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL__COMMENTS_AFTER));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL__COMMENTS_AFTER), element));
						out.print(" ");
					}
					printCountingMap.put("commentsAfter", count - 1);
				}
			}
			break;
			case 3:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("name");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderInQuotes)
				count = printCountingMap.get("name");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL__NAME));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL__NAME), element));
						out.print(" ");
					}
					printCountingMap.put("name", count - 1);
				}
			}
			break;
			case 4:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("metamodel");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("metamodel");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL__METAMODEL));
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclModelMetamodelReferenceResolver().deResolve((ocl.OclModel) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL__METAMODEL)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL__METAMODEL), element));
						out.print(" ");
					}
					printCountingMap.put("metamodel", count - 1);
				}
			}
			break;
			case 5:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("elements");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("elements");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL__ELEMENTS));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclModelElementsReferenceResolver().deResolve((ocl.OclModelElement) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL__ELEMENTS)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL__ELEMENTS), element));
						out.print(" ");
					}
					printCountingMap.put("elements", count - 1);
				}
			}
			break;
			case 6:			{
				// DEFINITION PART BEGINS (CsString)
				out.print("model");
				out.print(" ");
				// DEFINITION PART BEGINS (CsString)
				out.print(":");
				out.print(" ");
				// DEFINITION PART BEGINS (PlaceholderUsingDefaultToken)
				count = printCountingMap.get("model");
				if (count > 0) {
					Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL__MODEL));
					java.util.List<?> list = (java.util.List<?>) o;
					int index = list.size() - count;
					if (index >= 0) {
						o = list.get(index);
					} else {
						o = null;
					}
					if (o != null) {
						atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("TEXT");
						resolver.setOptions(getOptions());
						out.print(resolver.deResolve(getReferenceResolverSwitch() == null ? null : getReferenceResolverSwitch().getOclModelModelReferenceResolver().deResolve((ocl.OclModel) o, element, (org.eclipse.emf.ecore.EReference) element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL__MODEL)), element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL__MODEL), element));
						out.print(" ");
					}
					printCountingMap.put("model", count - 1);
				}
			}
			break;
			default:			// DEFINITION PART BEGINS (CsString)
			out.print("location");
			out.print(" ");
			// DEFINITION PART BEGINS (CsString)
			out.print(":");
			out.print(" ");
			// DEFINITION PART BEGINS (PlaceholderInQuotes)
			count = printCountingMap.get("location");
			if (count > 0) {
				Object o = element.eGet(element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL__LOCATION));
				if (o != null) {
					atl.resource.atl.IAtlTokenResolver resolver = tokenResolverFactory.createTokenResolver("QUOTED_34_34");
					resolver.setOptions(getOptions());
					out.print(resolver.deResolve((Object) o, element.eClass().getEStructuralFeature(ocl.OclPackage.OCL_MODEL__LOCATION), element));
					out.print(" ");
				}
				printCountingMap.put("location", count - 1);
			}
		}
	}
	
	
}
