SYNTAXDEF atl
FOR <http://www.eclipse.org/gmt/2005/ATL>
START Unit,Library,Query,Module,ocl.OclFeatureDefinition,ocl.OclModel


IMPORTS {
	ocl:<http://www.eclipse.org/gmt/2005/OCL>
	PrimitiveTypes:<http://www.eclipse.org/gmt/2005/ATL-PrimitiveTypes>
}


TOKENS {
	DEFINE COMMENT $'//'(~('\n'|'\r'|'\uffff'))*$;
	DEFINE INTEGER $('-')?('1'..'9')('0'..'9')*|'0'$;
	DEFINE FLOAT $('-')?(('1'..'9') ('0'..'9')* | '0') '.' ('0'..'9')+ $;
}


TOKENSTYLES {
	"Unit" COLOR #7F0055, BOLD;
	"location" COLOR #7F0055, BOLD;
	"commentsBefore" COLOR #7F0055, BOLD;
	"commentsAfter" COLOR #7F0055, BOLD;
	"libraries" COLOR #7F0055, BOLD;
	"name" COLOR #7F0055, BOLD;
	"Library" COLOR #7F0055, BOLD;
	"helpers" COLOR #7F0055, BOLD;
	"Query" COLOR #7F0055, BOLD;
	"body" COLOR #7F0055, BOLD;
	"Module" COLOR #7F0055, BOLD;
	"inModels" COLOR #7F0055, BOLD;
	"outModels" COLOR #7F0055, BOLD;
	"elements" COLOR #7F0055, BOLD;
	"Helper" COLOR #7F0055, BOLD;
	"module" COLOR #7F0055, BOLD;
	"query" COLOR #7F0055, BOLD;
	"library" COLOR #7F0055, BOLD;
	"definition" COLOR #7F0055, BOLD;
	"MatchedRule" COLOR #7F0055, BOLD;
	"outPattern" COLOR #7F0055, BOLD;
	"actionBlock" COLOR #7F0055, BOLD;
	"variables" COLOR #7F0055, BOLD;
	"inPattern" COLOR #7F0055, BOLD;
	"children" COLOR #7F0055, BOLD;
	"superRule" COLOR #7F0055, BOLD;
	"LazyMatchedRule" COLOR #7F0055, BOLD;
	"CalledRule" COLOR #7F0055, BOLD;
	"parameters" COLOR #7F0055, BOLD;
	"InPattern" COLOR #7F0055, BOLD;
	"rule" COLOR #7F0055, BOLD;
	"filter" COLOR #7F0055, BOLD;
	"OutPattern" COLOR #7F0055, BOLD;
	"dropPattern" COLOR #7F0055, BOLD;
	"DropPattern" COLOR #7F0055, BOLD;
	"SimpleInPatternElement" COLOR #7F0055, BOLD;
	"id" COLOR #7F0055, BOLD;
	"varName" COLOR #7F0055, BOLD;
	"type" COLOR #7F0055, BOLD;
	"initExpression" COLOR #7F0055, BOLD;
	"letExp" COLOR #7F0055, BOLD;
	"baseExp" COLOR #7F0055, BOLD;
	"variableExp" COLOR #7F0055, BOLD;
	"mapsTo" COLOR #7F0055, BOLD;
	"models" COLOR #7F0055, BOLD;
	"SimpleOutPatternElement" COLOR #7F0055, BOLD;
	"sourceElement" COLOR #7F0055, BOLD;
	"bindings" COLOR #7F0055, BOLD;
	"model" COLOR #7F0055, BOLD;
	"reverseBindings" COLOR #7F0055, BOLD;
	"ForEachOutPatternElement" COLOR #7F0055, BOLD;
	"collection" COLOR #7F0055, BOLD;
	"iterator" COLOR #7F0055, BOLD;
	"Binding" COLOR #7F0055, BOLD;
	"value" COLOR #7F0055, BOLD;
	"outPatternElement" COLOR #7F0055, BOLD;
	"propertyName" COLOR #7F0055, BOLD;
	"RuleVariableDeclaration" COLOR #7F0055, BOLD;
	"LibraryRef" COLOR #7F0055, BOLD;
	"unit" COLOR #7F0055, BOLD;
	"ActionBlock" COLOR #7F0055, BOLD;
	"statements" COLOR #7F0055, BOLD;
	"ExpressionStat" COLOR #7F0055, BOLD;
	"expression" COLOR #7F0055, BOLD;
	"BindingStat" COLOR #7F0055, BOLD;
	"source" COLOR #7F0055, BOLD;
	"IfStat" COLOR #7F0055, BOLD;
	"condition" COLOR #7F0055, BOLD;
	"thenStatements" COLOR #7F0055, BOLD;
	"elseStatements" COLOR #7F0055, BOLD;
	"ForStat" COLOR #7F0055, BOLD;
	"VariableExp" COLOR #7F0055, BOLD;
	"ifExp3" COLOR #7F0055, BOLD;
	"appliedProperty" COLOR #7F0055, BOLD;
	"loopExp" COLOR #7F0055, BOLD;
	"parentOperation" COLOR #7F0055, BOLD;
	"initializedVariable" COLOR #7F0055, BOLD;
	"ifExp2" COLOR #7F0055, BOLD;
	"owningOperation" COLOR #7F0055, BOLD;
	"ifExp1" COLOR #7F0055, BOLD;
	"owningAttribute" COLOR #7F0055, BOLD;
	"referredVariable" COLOR #7F0055, BOLD;
	"SuperExp" COLOR #7F0055, BOLD;
	"StringExp" COLOR #7F0055, BOLD;
	"stringSymbol" COLOR #7F0055, BOLD;
	"BooleanExp" COLOR #7F0055, BOLD;
	"RealExp" COLOR #7F0055, BOLD;
	"realSymbol" COLOR #7F0055, BOLD;
	"IntegerExp" COLOR #7F0055, BOLD;
	"integerSymbol" COLOR #7F0055, BOLD;
	"BagExp" COLOR #7F0055, BOLD;
	"OrderedSetExp" COLOR #7F0055, BOLD;
	"SequenceExp" COLOR #7F0055, BOLD;
	"SetExp" COLOR #7F0055, BOLD;
	"TupleExp" COLOR #7F0055, BOLD;
	"tuplePart" COLOR #7F0055, BOLD;
	"TuplePart" COLOR #7F0055, BOLD;
	"tuple" COLOR #7F0055, BOLD;
	"MapExp" COLOR #7F0055, BOLD;
	"MapElement" COLOR #7F0055, BOLD;
	"map" COLOR #7F0055, BOLD;
	"key" COLOR #7F0055, BOLD;
	"EnumLiteralExp" COLOR #7F0055, BOLD;
	"OclUndefinedExp" COLOR #7F0055, BOLD;
	"NavigationOrAttributeCallExp" COLOR #7F0055, BOLD;
	"OperationCallExp" COLOR #7F0055, BOLD;
	"arguments" COLOR #7F0055, BOLD;
	"operationName" COLOR #7F0055, BOLD;
	"OperatorCallExp" COLOR #7F0055, BOLD;
	"CollectionOperationCallExp" COLOR #7F0055, BOLD;
	"IterateExp" COLOR #7F0055, BOLD;
	"iterators" COLOR #7F0055, BOLD;
	"result" COLOR #7F0055, BOLD;
	"IteratorExp" COLOR #7F0055, BOLD;
	"LetExp" COLOR #7F0055, BOLD;
	"variable" COLOR #7F0055, BOLD;
	"in_" COLOR #7F0055, BOLD;
	"IfExp" COLOR #7F0055, BOLD;
	"thenExpression" COLOR #7F0055, BOLD;
	"elseExpression" COLOR #7F0055, BOLD;
	"VariableDeclaration" COLOR #7F0055, BOLD;
	"Iterator" COLOR #7F0055, BOLD;
	"loopExpr" COLOR #7F0055, BOLD;
	"Parameter" COLOR #7F0055, BOLD;
	"operation" COLOR #7F0055, BOLD;
	"CollectionType" COLOR #7F0055, BOLD;
	"definitions" COLOR #7F0055, BOLD;
	"oclExpression" COLOR #7F0055, BOLD;
	"mapType2" COLOR #7F0055, BOLD;
	"attribute" COLOR #7F0055, BOLD;
	"mapType" COLOR #7F0055, BOLD;
	"collectionTypes" COLOR #7F0055, BOLD;
	"tupleTypeAttribute" COLOR #7F0055, BOLD;
	"variableDeclaration" COLOR #7F0055, BOLD;
	"elementType" COLOR #7F0055, BOLD;
	"OclType" COLOR #7F0055, BOLD;
	"StringType" COLOR #7F0055, BOLD;
	"BooleanType" COLOR #7F0055, BOLD;
	"IntegerType" COLOR #7F0055, BOLD;
	"RealType" COLOR #7F0055, BOLD;
	"BagType" COLOR #7F0055, BOLD;
	"OrderedSetType" COLOR #7F0055, BOLD;
	"SequenceType" COLOR #7F0055, BOLD;
	"SetType" COLOR #7F0055, BOLD;
	"OclAnyType" COLOR #7F0055, BOLD;
	"TupleType" COLOR #7F0055, BOLD;
	"attributes" COLOR #7F0055, BOLD;
	"TupleTypeAttribute" COLOR #7F0055, BOLD;
	"tupleType" COLOR #7F0055, BOLD;
	"OclModelElement" COLOR #7F0055, BOLD;
	"MapType" COLOR #7F0055, BOLD;
	"valueType" COLOR #7F0055, BOLD;
	"keyType" COLOR #7F0055, BOLD;
	"OclFeatureDefinition" COLOR #7F0055, BOLD;
	"feature" COLOR #7F0055, BOLD;
	"context_" COLOR #7F0055, BOLD;
	"OclContextDefinition" COLOR #7F0055, BOLD;
	"Attribute" COLOR #7F0055, BOLD;
	"Operation" COLOR #7F0055, BOLD;
	"returnType" COLOR #7F0055, BOLD;
	"OclModel" COLOR #7F0055, BOLD;
	"metamodel" COLOR #7F0055, BOLD;
}


RULES {
	Unit ::= "Unit" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "libraries" ":" libraries | "name" ":" name['"','"'])* "}";
	Library ::= "Library" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "libraries" ":" libraries | "name" ":" name['"','"'] | "helpers" ":" helpers)* "}";
	Query ::= "Query" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "libraries" ":" libraries | "name" ":" name['"','"'] | "body" ":" body | "helpers" ":" helpers)* "}";
	Module ::= isRefining["isRefining" : ""] "Module" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "libraries" ":" libraries | "name" ":" name['"','"'] | "inModels" ":" inModels | "outModels" ":" outModels | "elements" ":" elements)* "}";
	Helper ::= "Helper" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "module" ":" module[] | "query" ":" query[] | "library" ":" library[] | "definition" ":" definition)* "}";
	MatchedRule ::= isAbstract["isAbstract" : ""] isRefining["isRefining" : ""] isNoDefault["isNoDefault" : ""] "MatchedRule" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "module" ":" module[] | "outPattern" ":" outPattern | "actionBlock" ":" actionBlock | "variables" ":" variables | "name" ":" name['"','"'] | "inPattern" ":" inPattern | "children" ":" children[] | "superRule" ":" superRule[])* "}";
	LazyMatchedRule ::= isAbstract["isAbstract" : ""] isRefining["isRefining" : ""] isNoDefault["isNoDefault" : ""] isUnique["isUnique" : ""] "LazyMatchedRule" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "module" ":" module[] | "outPattern" ":" outPattern | "actionBlock" ":" actionBlock | "variables" ":" variables | "name" ":" name['"','"'] | "inPattern" ":" inPattern | "children" ":" children[] | "superRule" ":" superRule[])* "}";
	CalledRule ::= isEntrypoint["isEntrypoint" : ""] isEndpoint["isEndpoint" : ""] "CalledRule" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "module" ":" module[] | "outPattern" ":" outPattern | "actionBlock" ":" actionBlock | "variables" ":" variables | "name" ":" name['"','"'] | "parameters" ":" parameters)* "}";
	InPattern ::= "InPattern" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "elements" ":" elements | "rule" ":" rule[] | "filter" ":" filter)* "}";
	OutPattern ::= "OutPattern" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "rule" ":" rule[] | "dropPattern" ":" dropPattern | "elements" ":" elements)* "}";
	DropPattern ::= "DropPattern" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "outPattern" ":" outPattern[])* "}";
	SimpleInPatternElement ::= "SimpleInPatternElement" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "id" ":" id['"','"'] | "varName" ":" varName['"','"'] | "type" ":" type | "initExpression" ":" initExpression | "letExp" ":" letExp[] | "baseExp" ":" baseExp[] | "variableExp" ":" variableExp[] | "mapsTo" ":" mapsTo[] | "inPattern" ":" inPattern[] | "models" ":" models[])* "}";
	SimpleOutPatternElement ::= "SimpleOutPatternElement" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "id" ":" id['"','"'] | "varName" ":" varName['"','"'] | "type" ":" type | "initExpression" ":" initExpression | "letExp" ":" letExp[] | "baseExp" ":" baseExp[] | "variableExp" ":" variableExp[] | "outPattern" ":" outPattern[] | "sourceElement" ":" sourceElement[] | "bindings" ":" bindings | "model" ":" model[] | "reverseBindings" ":" reverseBindings)* "}";
	ForEachOutPatternElement ::= "ForEachOutPatternElement" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "id" ":" id['"','"'] | "varName" ":" varName['"','"'] | "type" ":" type | "initExpression" ":" initExpression | "letExp" ":" letExp[] | "baseExp" ":" baseExp[] | "variableExp" ":" variableExp[] | "outPattern" ":" outPattern[] | "sourceElement" ":" sourceElement[] | "bindings" ":" bindings | "model" ":" model[] | "collection" ":" collection | "iterator" ":" iterator)* "}";
	Binding ::= isAssignment["isAssignment" : ""] "Binding" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "value" ":" value | "outPatternElement" ":" outPatternElement[] | "propertyName" ":" propertyName['"','"'])* "}";
	RuleVariableDeclaration ::= "RuleVariableDeclaration" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "id" ":" id['"','"'] | "varName" ":" varName['"','"'] | "type" ":" type | "initExpression" ":" initExpression | "letExp" ":" letExp[] | "baseExp" ":" baseExp[] | "variableExp" ":" variableExp[] | "rule" ":" rule[])* "}";
	LibraryRef ::= "LibraryRef" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "unit" ":" unit[] | "name" ":" name['"','"'])* "}";
	ActionBlock ::= "ActionBlock" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "rule" ":" rule[] | "statements" ":" statements)* "}";
	ExpressionStat ::= "ExpressionStat" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "expression" ":" expression)* "}";
	BindingStat ::= isAssignment["isAssignment" : ""] "BindingStat" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "source" ":" source | "propertyName" ":" propertyName['"','"'] | "value" ":" value)* "}";
	IfStat ::= "IfStat" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "condition" ":" condition | "thenStatements" ":" thenStatements | "elseStatements" ":" elseStatements)* "}";
	ForStat ::= "ForStat" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "iterator" ":" iterator | "collection" ":" collection | "statements" ":" statements)* "}";
	ocl.VariableExp ::= "VariableExp" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "type" ":" type | "ifExp3" ":" ifExp3[] | "appliedProperty" ":" appliedProperty[] | "collection" ":" collection[] | "letExp" ":" letExp[] | "loopExp" ":" loopExp[] | "parentOperation" ":" parentOperation[] | "initializedVariable" ":" initializedVariable[] | "ifExp2" ":" ifExp2[] | "owningOperation" ":" owningOperation[] | "ifExp1" ":" ifExp1[] | "owningAttribute" ":" owningAttribute[] | "referredVariable" ":" referredVariable[])* "}";
	ocl.SuperExp ::= "SuperExp" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "type" ":" type | "ifExp3" ":" ifExp3[] | "appliedProperty" ":" appliedProperty[] | "collection" ":" collection[] | "letExp" ":" letExp[] | "loopExp" ":" loopExp[] | "parentOperation" ":" parentOperation[] | "initializedVariable" ":" initializedVariable[] | "ifExp2" ":" ifExp2[] | "owningOperation" ":" owningOperation[] | "ifExp1" ":" ifExp1[] | "owningAttribute" ":" owningAttribute[])* "}";
	ocl.StringExp ::= "StringExp" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "type" ":" type | "ifExp3" ":" ifExp3[] | "appliedProperty" ":" appliedProperty[] | "collection" ":" collection[] | "letExp" ":" letExp[] | "loopExp" ":" loopExp[] | "parentOperation" ":" parentOperation[] | "initializedVariable" ":" initializedVariable[] | "ifExp2" ":" ifExp2[] | "owningOperation" ":" owningOperation[] | "ifExp1" ":" ifExp1[] | "owningAttribute" ":" owningAttribute[] | "stringSymbol" ":" stringSymbol['"','"'])* "}";
	ocl.BooleanExp ::= booleanSymbol["booleanSymbol" : ""] "BooleanExp" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "type" ":" type | "ifExp3" ":" ifExp3[] | "appliedProperty" ":" appliedProperty[] | "collection" ":" collection[] | "letExp" ":" letExp[] | "loopExp" ":" loopExp[] | "parentOperation" ":" parentOperation[] | "initializedVariable" ":" initializedVariable[] | "ifExp2" ":" ifExp2[] | "owningOperation" ":" owningOperation[] | "ifExp1" ":" ifExp1[] | "owningAttribute" ":" owningAttribute[])* "}";
	ocl.RealExp ::= "RealExp" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "type" ":" type | "ifExp3" ":" ifExp3[] | "appliedProperty" ":" appliedProperty[] | "collection" ":" collection[] | "letExp" ":" letExp[] | "loopExp" ":" loopExp[] | "parentOperation" ":" parentOperation[] | "initializedVariable" ":" initializedVariable[] | "ifExp2" ":" ifExp2[] | "owningOperation" ":" owningOperation[] | "ifExp1" ":" ifExp1[] | "owningAttribute" ":" owningAttribute[] | "realSymbol" ":" realSymbol[FLOAT])* "}";
	ocl.IntegerExp ::= "IntegerExp" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "type" ":" type | "ifExp3" ":" ifExp3[] | "appliedProperty" ":" appliedProperty[] | "collection" ":" collection[] | "letExp" ":" letExp[] | "loopExp" ":" loopExp[] | "parentOperation" ":" parentOperation[] | "initializedVariable" ":" initializedVariable[] | "ifExp2" ":" ifExp2[] | "owningOperation" ":" owningOperation[] | "ifExp1" ":" ifExp1[] | "owningAttribute" ":" owningAttribute[] | "integerSymbol" ":" integerSymbol[INTEGER])* "}";
	ocl.BagExp ::= "BagExp" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "type" ":" type | "ifExp3" ":" ifExp3[] | "appliedProperty" ":" appliedProperty[] | "collection" ":" collection[] | "letExp" ":" letExp[] | "loopExp" ":" loopExp[] | "parentOperation" ":" parentOperation[] | "initializedVariable" ":" initializedVariable[] | "ifExp2" ":" ifExp2[] | "owningOperation" ":" owningOperation[] | "ifExp1" ":" ifExp1[] | "owningAttribute" ":" owningAttribute[] | "elements" ":" elements)* "}";
	ocl.OrderedSetExp ::= "OrderedSetExp" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "type" ":" type | "ifExp3" ":" ifExp3[] | "appliedProperty" ":" appliedProperty[] | "collection" ":" collection[] | "letExp" ":" letExp[] | "loopExp" ":" loopExp[] | "parentOperation" ":" parentOperation[] | "initializedVariable" ":" initializedVariable[] | "ifExp2" ":" ifExp2[] | "owningOperation" ":" owningOperation[] | "ifExp1" ":" ifExp1[] | "owningAttribute" ":" owningAttribute[] | "elements" ":" elements)* "}";
	ocl.SequenceExp ::= "SequenceExp" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "type" ":" type | "ifExp3" ":" ifExp3[] | "appliedProperty" ":" appliedProperty[] | "collection" ":" collection[] | "letExp" ":" letExp[] | "loopExp" ":" loopExp[] | "parentOperation" ":" parentOperation[] | "initializedVariable" ":" initializedVariable[] | "ifExp2" ":" ifExp2[] | "owningOperation" ":" owningOperation[] | "ifExp1" ":" ifExp1[] | "owningAttribute" ":" owningAttribute[] | "elements" ":" elements)* "}";
	ocl.SetExp ::= "SetExp" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "type" ":" type | "ifExp3" ":" ifExp3[] | "appliedProperty" ":" appliedProperty[] | "collection" ":" collection[] | "letExp" ":" letExp[] | "loopExp" ":" loopExp[] | "parentOperation" ":" parentOperation[] | "initializedVariable" ":" initializedVariable[] | "ifExp2" ":" ifExp2[] | "owningOperation" ":" owningOperation[] | "ifExp1" ":" ifExp1[] | "owningAttribute" ":" owningAttribute[] | "elements" ":" elements)* "}";
	ocl.TupleExp ::= "TupleExp" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "type" ":" type | "ifExp3" ":" ifExp3[] | "appliedProperty" ":" appliedProperty[] | "collection" ":" collection[] | "letExp" ":" letExp[] | "loopExp" ":" loopExp[] | "parentOperation" ":" parentOperation[] | "initializedVariable" ":" initializedVariable[] | "ifExp2" ":" ifExp2[] | "owningOperation" ":" owningOperation[] | "ifExp1" ":" ifExp1[] | "owningAttribute" ":" owningAttribute[] | "tuplePart" ":" tuplePart)* "}";
	ocl.TuplePart ::= "TuplePart" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "id" ":" id['"','"'] | "varName" ":" varName['"','"'] | "type" ":" type | "initExpression" ":" initExpression | "letExp" ":" letExp[] | "baseExp" ":" baseExp[] | "variableExp" ":" variableExp[] | "tuple" ":" tuple[])* "}";
	ocl.MapExp ::= "MapExp" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "type" ":" type | "ifExp3" ":" ifExp3[] | "appliedProperty" ":" appliedProperty[] | "collection" ":" collection[] | "letExp" ":" letExp[] | "loopExp" ":" loopExp[] | "parentOperation" ":" parentOperation[] | "initializedVariable" ":" initializedVariable[] | "ifExp2" ":" ifExp2[] | "owningOperation" ":" owningOperation[] | "ifExp1" ":" ifExp1[] | "owningAttribute" ":" owningAttribute[] | "elements" ":" elements)* "}";
	ocl.MapElement ::= "MapElement" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "map" ":" map[] | "key" ":" key | "value" ":" value)* "}";
	ocl.EnumLiteralExp ::= "EnumLiteralExp" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "type" ":" type | "ifExp3" ":" ifExp3[] | "appliedProperty" ":" appliedProperty[] | "collection" ":" collection[] | "letExp" ":" letExp[] | "loopExp" ":" loopExp[] | "parentOperation" ":" parentOperation[] | "initializedVariable" ":" initializedVariable[] | "ifExp2" ":" ifExp2[] | "owningOperation" ":" owningOperation[] | "ifExp1" ":" ifExp1[] | "owningAttribute" ":" owningAttribute[] | "name" ":" name['"','"'])* "}";
	ocl.OclUndefinedExp ::= "OclUndefinedExp" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "type" ":" type | "ifExp3" ":" ifExp3[] | "appliedProperty" ":" appliedProperty[] | "collection" ":" collection[] | "letExp" ":" letExp[] | "loopExp" ":" loopExp[] | "parentOperation" ":" parentOperation[] | "initializedVariable" ":" initializedVariable[] | "ifExp2" ":" ifExp2[] | "owningOperation" ":" owningOperation[] | "ifExp1" ":" ifExp1[] | "owningAttribute" ":" owningAttribute[])* "}";
	ocl.NavigationOrAttributeCallExp ::= "NavigationOrAttributeCallExp" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "type" ":" type | "ifExp3" ":" ifExp3[] | "appliedProperty" ":" appliedProperty[] | "collection" ":" collection[] | "letExp" ":" letExp[] | "loopExp" ":" loopExp[] | "parentOperation" ":" parentOperation[] | "initializedVariable" ":" initializedVariable[] | "ifExp2" ":" ifExp2[] | "owningOperation" ":" owningOperation[] | "ifExp1" ":" ifExp1[] | "owningAttribute" ":" owningAttribute[] | "source" ":" source | "name" ":" name['"','"'])* "}";
	ocl.OperationCallExp ::= "OperationCallExp" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "type" ":" type | "ifExp3" ":" ifExp3[] | "appliedProperty" ":" appliedProperty[] | "collection" ":" collection[] | "letExp" ":" letExp[] | "loopExp" ":" loopExp[] | "parentOperation" ":" parentOperation[] | "initializedVariable" ":" initializedVariable[] | "ifExp2" ":" ifExp2[] | "owningOperation" ":" owningOperation[] | "ifExp1" ":" ifExp1[] | "owningAttribute" ":" owningAttribute[] | "source" ":" source | "arguments" ":" arguments | "operationName" ":" operationName['"','"'])* "}";
	ocl.OperatorCallExp ::= "OperatorCallExp" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "type" ":" type | "ifExp3" ":" ifExp3[] | "appliedProperty" ":" appliedProperty[] | "collection" ":" collection[] | "letExp" ":" letExp[] | "loopExp" ":" loopExp[] | "parentOperation" ":" parentOperation[] | "initializedVariable" ":" initializedVariable[] | "ifExp2" ":" ifExp2[] | "owningOperation" ":" owningOperation[] | "ifExp1" ":" ifExp1[] | "owningAttribute" ":" owningAttribute[] | "source" ":" source | "arguments" ":" arguments | "operationName" ":" operationName['"','"'])* "}";
	ocl.CollectionOperationCallExp ::= "CollectionOperationCallExp" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "type" ":" type | "ifExp3" ":" ifExp3[] | "appliedProperty" ":" appliedProperty[] | "collection" ":" collection[] | "letExp" ":" letExp[] | "loopExp" ":" loopExp[] | "parentOperation" ":" parentOperation[] | "initializedVariable" ":" initializedVariable[] | "ifExp2" ":" ifExp2[] | "owningOperation" ":" owningOperation[] | "ifExp1" ":" ifExp1[] | "owningAttribute" ":" owningAttribute[] | "source" ":" source | "arguments" ":" arguments | "operationName" ":" operationName['"','"'])* "}";
	ocl.IterateExp ::= "IterateExp" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "type" ":" type | "ifExp3" ":" ifExp3[] | "appliedProperty" ":" appliedProperty[] | "collection" ":" collection[] | "letExp" ":" letExp[] | "loopExp" ":" loopExp[] | "parentOperation" ":" parentOperation[] | "initializedVariable" ":" initializedVariable[] | "ifExp2" ":" ifExp2[] | "owningOperation" ":" owningOperation[] | "ifExp1" ":" ifExp1[] | "owningAttribute" ":" owningAttribute[] | "source" ":" source | "body" ":" body | "iterators" ":" iterators | "result" ":" result)* "}";
	ocl.IteratorExp ::= "IteratorExp" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "type" ":" type | "ifExp3" ":" ifExp3[] | "appliedProperty" ":" appliedProperty[] | "collection" ":" collection[] | "letExp" ":" letExp[] | "loopExp" ":" loopExp[] | "parentOperation" ":" parentOperation[] | "initializedVariable" ":" initializedVariable[] | "ifExp2" ":" ifExp2[] | "owningOperation" ":" owningOperation[] | "ifExp1" ":" ifExp1[] | "owningAttribute" ":" owningAttribute[] | "source" ":" source | "body" ":" body | "iterators" ":" iterators | "name" ":" name['"','"'])* "}";
	ocl.LetExp ::= "LetExp" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "type" ":" type | "ifExp3" ":" ifExp3[] | "appliedProperty" ":" appliedProperty[] | "collection" ":" collection[] | "letExp" ":" letExp[] | "loopExp" ":" loopExp[] | "parentOperation" ":" parentOperation[] | "initializedVariable" ":" initializedVariable[] | "ifExp2" ":" ifExp2[] | "owningOperation" ":" owningOperation[] | "ifExp1" ":" ifExp1[] | "owningAttribute" ":" owningAttribute[] | "variable" ":" variable | "in_" ":" in_)* "}";
	ocl.IfExp ::= "IfExp" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "type" ":" type | "ifExp3" ":" ifExp3[] | "appliedProperty" ":" appliedProperty[] | "collection" ":" collection[] | "letExp" ":" letExp[] | "loopExp" ":" loopExp[] | "parentOperation" ":" parentOperation[] | "initializedVariable" ":" initializedVariable[] | "ifExp2" ":" ifExp2[] | "owningOperation" ":" owningOperation[] | "ifExp1" ":" ifExp1[] | "owningAttribute" ":" owningAttribute[] | "thenExpression" ":" thenExpression | "condition" ":" condition | "elseExpression" ":" elseExpression)* "}";
	ocl.VariableDeclaration ::= "VariableDeclaration" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "id" ":" id['"','"'] | "varName" ":" varName['"','"'] | "type" ":" type | "initExpression" ":" initExpression | "letExp" ":" letExp[] | "baseExp" ":" baseExp[] | "variableExp" ":" variableExp[])* "}";
	ocl.Iterator ::= "Iterator" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "id" ":" id['"','"'] | "varName" ":" varName['"','"'] | "type" ":" type | "initExpression" ":" initExpression | "letExp" ":" letExp[] | "baseExp" ":" baseExp[] | "variableExp" ":" variableExp[] | "loopExpr" ":" loopExpr[])* "}";
	ocl.Parameter ::= "Parameter" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "id" ":" id['"','"'] | "varName" ":" varName['"','"'] | "type" ":" type | "initExpression" ":" initExpression | "letExp" ":" letExp[] | "baseExp" ":" baseExp[] | "variableExp" ":" variableExp[] | "operation" ":" operation[])* "}";
	ocl.CollectionType ::= "CollectionType" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "type" ":" type | "ifExp3" ":" ifExp3[] | "appliedProperty" ":" appliedProperty[] | "collection" ":" collection[] | "letExp" ":" letExp[] | "loopExp" ":" loopExp[] | "parentOperation" ":" parentOperation[] | "initializedVariable" ":" initializedVariable[] | "ifExp2" ":" ifExp2[] | "owningOperation" ":" owningOperation[] | "ifExp1" ":" ifExp1[] | "owningAttribute" ":" owningAttribute[] | "name" ":" name['"','"'] | "definitions" ":" definitions[] | "oclExpression" ":" oclExpression[] | "operation" ":" operation[] | "mapType2" ":" mapType2[] | "attribute" ":" attribute[] | "mapType" ":" mapType[] | "collectionTypes" ":" collectionTypes[] | "tupleTypeAttribute" ":" tupleTypeAttribute[] | "variableDeclaration" ":" variableDeclaration[] | "elementType" ":" elementType)* "}";
	ocl.OclType ::= "OclType" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "type" ":" type | "ifExp3" ":" ifExp3[] | "appliedProperty" ":" appliedProperty[] | "collection" ":" collection[] | "letExp" ":" letExp[] | "loopExp" ":" loopExp[] | "parentOperation" ":" parentOperation[] | "initializedVariable" ":" initializedVariable[] | "ifExp2" ":" ifExp2[] | "owningOperation" ":" owningOperation[] | "ifExp1" ":" ifExp1[] | "owningAttribute" ":" owningAttribute[] | "name" ":" name['"','"'] | "definitions" ":" definitions[] | "oclExpression" ":" oclExpression[] | "operation" ":" operation[] | "mapType2" ":" mapType2[] | "attribute" ":" attribute[] | "mapType" ":" mapType[] | "collectionTypes" ":" collectionTypes[] | "tupleTypeAttribute" ":" tupleTypeAttribute[] | "variableDeclaration" ":" variableDeclaration[])* "}";
	ocl.StringType ::= "StringType" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "type" ":" type | "ifExp3" ":" ifExp3[] | "appliedProperty" ":" appliedProperty[] | "collection" ":" collection[] | "letExp" ":" letExp[] | "loopExp" ":" loopExp[] | "parentOperation" ":" parentOperation[] | "initializedVariable" ":" initializedVariable[] | "ifExp2" ":" ifExp2[] | "owningOperation" ":" owningOperation[] | "ifExp1" ":" ifExp1[] | "owningAttribute" ":" owningAttribute[] | "name" ":" name['"','"'] | "definitions" ":" definitions[] | "oclExpression" ":" oclExpression[] | "operation" ":" operation[] | "mapType2" ":" mapType2[] | "attribute" ":" attribute[] | "mapType" ":" mapType[] | "collectionTypes" ":" collectionTypes[] | "tupleTypeAttribute" ":" tupleTypeAttribute[] | "variableDeclaration" ":" variableDeclaration[])* "}";
	ocl.BooleanType ::= "BooleanType" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "type" ":" type | "ifExp3" ":" ifExp3[] | "appliedProperty" ":" appliedProperty[] | "collection" ":" collection[] | "letExp" ":" letExp[] | "loopExp" ":" loopExp[] | "parentOperation" ":" parentOperation[] | "initializedVariable" ":" initializedVariable[] | "ifExp2" ":" ifExp2[] | "owningOperation" ":" owningOperation[] | "ifExp1" ":" ifExp1[] | "owningAttribute" ":" owningAttribute[] | "name" ":" name['"','"'] | "definitions" ":" definitions[] | "oclExpression" ":" oclExpression[] | "operation" ":" operation[] | "mapType2" ":" mapType2[] | "attribute" ":" attribute[] | "mapType" ":" mapType[] | "collectionTypes" ":" collectionTypes[] | "tupleTypeAttribute" ":" tupleTypeAttribute[] | "variableDeclaration" ":" variableDeclaration[])* "}";
	ocl.IntegerType ::= "IntegerType" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "type" ":" type | "ifExp3" ":" ifExp3[] | "appliedProperty" ":" appliedProperty[] | "collection" ":" collection[] | "letExp" ":" letExp[] | "loopExp" ":" loopExp[] | "parentOperation" ":" parentOperation[] | "initializedVariable" ":" initializedVariable[] | "ifExp2" ":" ifExp2[] | "owningOperation" ":" owningOperation[] | "ifExp1" ":" ifExp1[] | "owningAttribute" ":" owningAttribute[] | "name" ":" name['"','"'] | "definitions" ":" definitions[] | "oclExpression" ":" oclExpression[] | "operation" ":" operation[] | "mapType2" ":" mapType2[] | "attribute" ":" attribute[] | "mapType" ":" mapType[] | "collectionTypes" ":" collectionTypes[] | "tupleTypeAttribute" ":" tupleTypeAttribute[] | "variableDeclaration" ":" variableDeclaration[])* "}";
	ocl.RealType ::= "RealType" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "type" ":" type | "ifExp3" ":" ifExp3[] | "appliedProperty" ":" appliedProperty[] | "collection" ":" collection[] | "letExp" ":" letExp[] | "loopExp" ":" loopExp[] | "parentOperation" ":" parentOperation[] | "initializedVariable" ":" initializedVariable[] | "ifExp2" ":" ifExp2[] | "owningOperation" ":" owningOperation[] | "ifExp1" ":" ifExp1[] | "owningAttribute" ":" owningAttribute[] | "name" ":" name['"','"'] | "definitions" ":" definitions[] | "oclExpression" ":" oclExpression[] | "operation" ":" operation[] | "mapType2" ":" mapType2[] | "attribute" ":" attribute[] | "mapType" ":" mapType[] | "collectionTypes" ":" collectionTypes[] | "tupleTypeAttribute" ":" tupleTypeAttribute[] | "variableDeclaration" ":" variableDeclaration[])* "}";
	ocl.BagType ::= "BagType" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "type" ":" type | "ifExp3" ":" ifExp3[] | "appliedProperty" ":" appliedProperty[] | "collection" ":" collection[] | "letExp" ":" letExp[] | "loopExp" ":" loopExp[] | "parentOperation" ":" parentOperation[] | "initializedVariable" ":" initializedVariable[] | "ifExp2" ":" ifExp2[] | "owningOperation" ":" owningOperation[] | "ifExp1" ":" ifExp1[] | "owningAttribute" ":" owningAttribute[] | "name" ":" name['"','"'] | "definitions" ":" definitions[] | "oclExpression" ":" oclExpression[] | "operation" ":" operation[] | "mapType2" ":" mapType2[] | "attribute" ":" attribute[] | "mapType" ":" mapType[] | "collectionTypes" ":" collectionTypes[] | "tupleTypeAttribute" ":" tupleTypeAttribute[] | "variableDeclaration" ":" variableDeclaration[] | "elementType" ":" elementType)* "}";
	ocl.OrderedSetType ::= "OrderedSetType" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "type" ":" type | "ifExp3" ":" ifExp3[] | "appliedProperty" ":" appliedProperty[] | "collection" ":" collection[] | "letExp" ":" letExp[] | "loopExp" ":" loopExp[] | "parentOperation" ":" parentOperation[] | "initializedVariable" ":" initializedVariable[] | "ifExp2" ":" ifExp2[] | "owningOperation" ":" owningOperation[] | "ifExp1" ":" ifExp1[] | "owningAttribute" ":" owningAttribute[] | "name" ":" name['"','"'] | "definitions" ":" definitions[] | "oclExpression" ":" oclExpression[] | "operation" ":" operation[] | "mapType2" ":" mapType2[] | "attribute" ":" attribute[] | "mapType" ":" mapType[] | "collectionTypes" ":" collectionTypes[] | "tupleTypeAttribute" ":" tupleTypeAttribute[] | "variableDeclaration" ":" variableDeclaration[] | "elementType" ":" elementType)* "}";
	ocl.SequenceType ::= "SequenceType" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "type" ":" type | "ifExp3" ":" ifExp3[] | "appliedProperty" ":" appliedProperty[] | "collection" ":" collection[] | "letExp" ":" letExp[] | "loopExp" ":" loopExp[] | "parentOperation" ":" parentOperation[] | "initializedVariable" ":" initializedVariable[] | "ifExp2" ":" ifExp2[] | "owningOperation" ":" owningOperation[] | "ifExp1" ":" ifExp1[] | "owningAttribute" ":" owningAttribute[] | "name" ":" name['"','"'] | "definitions" ":" definitions[] | "oclExpression" ":" oclExpression[] | "operation" ":" operation[] | "mapType2" ":" mapType2[] | "attribute" ":" attribute[] | "mapType" ":" mapType[] | "collectionTypes" ":" collectionTypes[] | "tupleTypeAttribute" ":" tupleTypeAttribute[] | "variableDeclaration" ":" variableDeclaration[] | "elementType" ":" elementType)* "}";
	ocl.SetType ::= "SetType" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "type" ":" type | "ifExp3" ":" ifExp3[] | "appliedProperty" ":" appliedProperty[] | "collection" ":" collection[] | "letExp" ":" letExp[] | "loopExp" ":" loopExp[] | "parentOperation" ":" parentOperation[] | "initializedVariable" ":" initializedVariable[] | "ifExp2" ":" ifExp2[] | "owningOperation" ":" owningOperation[] | "ifExp1" ":" ifExp1[] | "owningAttribute" ":" owningAttribute[] | "name" ":" name['"','"'] | "definitions" ":" definitions[] | "oclExpression" ":" oclExpression[] | "operation" ":" operation[] | "mapType2" ":" mapType2[] | "attribute" ":" attribute[] | "mapType" ":" mapType[] | "collectionTypes" ":" collectionTypes[] | "tupleTypeAttribute" ":" tupleTypeAttribute[] | "variableDeclaration" ":" variableDeclaration[] | "elementType" ":" elementType)* "}";
	ocl.OclAnyType ::= "OclAnyType" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "type" ":" type | "ifExp3" ":" ifExp3[] | "appliedProperty" ":" appliedProperty[] | "collection" ":" collection[] | "letExp" ":" letExp[] | "loopExp" ":" loopExp[] | "parentOperation" ":" parentOperation[] | "initializedVariable" ":" initializedVariable[] | "ifExp2" ":" ifExp2[] | "owningOperation" ":" owningOperation[] | "ifExp1" ":" ifExp1[] | "owningAttribute" ":" owningAttribute[] | "name" ":" name['"','"'] | "definitions" ":" definitions[] | "oclExpression" ":" oclExpression[] | "operation" ":" operation[] | "mapType2" ":" mapType2[] | "attribute" ":" attribute[] | "mapType" ":" mapType[] | "collectionTypes" ":" collectionTypes[] | "tupleTypeAttribute" ":" tupleTypeAttribute[] | "variableDeclaration" ":" variableDeclaration[])* "}";
	ocl.TupleType ::= "TupleType" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "type" ":" type | "ifExp3" ":" ifExp3[] | "appliedProperty" ":" appliedProperty[] | "collection" ":" collection[] | "letExp" ":" letExp[] | "loopExp" ":" loopExp[] | "parentOperation" ":" parentOperation[] | "initializedVariable" ":" initializedVariable[] | "ifExp2" ":" ifExp2[] | "owningOperation" ":" owningOperation[] | "ifExp1" ":" ifExp1[] | "owningAttribute" ":" owningAttribute[] | "name" ":" name['"','"'] | "definitions" ":" definitions[] | "oclExpression" ":" oclExpression[] | "operation" ":" operation[] | "mapType2" ":" mapType2[] | "attribute" ":" attribute[] | "mapType" ":" mapType[] | "collectionTypes" ":" collectionTypes[] | "tupleTypeAttribute" ":" tupleTypeAttribute[] | "variableDeclaration" ":" variableDeclaration[] | "attributes" ":" attributes)* "}";
	ocl.TupleTypeAttribute ::= "TupleTypeAttribute" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "type" ":" type | "tupleType" ":" tupleType[] | "name" ":" name['"','"'])* "}";
	ocl.OclModelElement ::= "OclModelElement" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "type" ":" type | "ifExp3" ":" ifExp3[] | "appliedProperty" ":" appliedProperty[] | "collection" ":" collection[] | "letExp" ":" letExp[] | "loopExp" ":" loopExp[] | "parentOperation" ":" parentOperation[] | "initializedVariable" ":" initializedVariable[] | "ifExp2" ":" ifExp2[] | "owningOperation" ":" owningOperation[] | "ifExp1" ":" ifExp1[] | "owningAttribute" ":" owningAttribute[] | "name" ":" name['"','"'] | "definitions" ":" definitions[] | "oclExpression" ":" oclExpression[] | "operation" ":" operation[] | "mapType2" ":" mapType2[] | "attribute" ":" attribute[] | "mapType" ":" mapType[] | "collectionTypes" ":" collectionTypes[] | "tupleTypeAttribute" ":" tupleTypeAttribute[] | "variableDeclaration" ":" variableDeclaration[] | "model" ":" model[])* "}";
	ocl.MapType ::= "MapType" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "type" ":" type | "ifExp3" ":" ifExp3[] | "appliedProperty" ":" appliedProperty[] | "collection" ":" collection[] | "letExp" ":" letExp[] | "loopExp" ":" loopExp[] | "parentOperation" ":" parentOperation[] | "initializedVariable" ":" initializedVariable[] | "ifExp2" ":" ifExp2[] | "owningOperation" ":" owningOperation[] | "ifExp1" ":" ifExp1[] | "owningAttribute" ":" owningAttribute[] | "name" ":" name['"','"'] | "definitions" ":" definitions[] | "oclExpression" ":" oclExpression[] | "operation" ":" operation[] | "mapType2" ":" mapType2[] | "attribute" ":" attribute[] | "mapType" ":" mapType[] | "collectionTypes" ":" collectionTypes[] | "tupleTypeAttribute" ":" tupleTypeAttribute[] | "variableDeclaration" ":" variableDeclaration[] | "valueType" ":" valueType | "keyType" ":" keyType)* "}";
	ocl.OclFeatureDefinition ::= "OclFeatureDefinition" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "feature" ":" feature | "context_" ":" context_)* "}";
	ocl.OclContextDefinition ::= "OclContextDefinition" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "definition" ":" definition[] | "context_" ":" context_)* "}";
	ocl.Attribute ::= "Attribute" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "definition" ":" definition[] | "name" ":" name['"','"'] | "initExpression" ":" initExpression | "type" ":" type)* "}";
	ocl.Operation ::= "Operation" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "definition" ":" definition[] | "name" ":" name['"','"'] | "parameters" ":" parameters | "returnType" ":" returnType | "body" ":" body)* "}";
	ocl.OclModel ::= "OclModel" "{" ("location" ":" location['"','"'] | "commentsBefore" ":" commentsBefore[] | "commentsAfter" ":" commentsAfter[] | "name" ":" name['"','"'] | "metamodel" ":" metamodel[] | "elements" ":" elements[] | "model" ":" model[])* "}";
}