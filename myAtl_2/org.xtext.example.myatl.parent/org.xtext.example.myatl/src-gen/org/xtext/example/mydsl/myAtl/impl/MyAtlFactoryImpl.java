/**
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.myAtl.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.mydsl.myAtl.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MyAtlFactoryImpl extends EFactoryImpl implements MyAtlFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MyAtlFactory init()
  {
    try
    {
      MyAtlFactory theMyAtlFactory = (MyAtlFactory)EPackage.Registry.INSTANCE.getEFactory(MyAtlPackage.eNS_URI);
      if (theMyAtlFactory != null)
      {
        return theMyAtlFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MyAtlFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyAtlFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MyAtlPackage.MODULE: return createModule();
      case MyAtlPackage.MODULE_ELEMENT: return createModuleElement();
      case MyAtlPackage.MATCHED_RULE: return createMatchedRule();
      case MyAtlPackage.CALLED_RULE: return createCalledRule();
      case MyAtlPackage.QUERY_RULE: return createQueryRule();
      case MyAtlPackage.HELPER: return createHelper();
      case MyAtlPackage.ATL_DEF_CS: return createATLDefCS();
      case MyAtlPackage.ATL_PARAMETER_CS: return createATLParameterCS();
      case MyAtlPackage.RULE_VARIABLE_DECLARATION: return createRuleVariableDeclaration();
      case MyAtlPackage.IN_PATTERN: return createInPattern();
      case MyAtlPackage.IN_PATTERN_ELEMENT: return createInPatternElement();
      case MyAtlPackage.OUT_PATTERN: return createOutPattern();
      case MyAtlPackage.OUT_PATTERN_ELEMENT: return createOutPatternElement();
      case MyAtlPackage.SIMPLE_OUT_PATTERN_ELEMENT: return createSimpleOutPatternElement();
      case MyAtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT: return createForEachOutPatternElement();
      case MyAtlPackage.BINDING: return createBinding();
      case MyAtlPackage.ACTION_BLOCK: return createActionBlock();
      case MyAtlPackage.STATEMENT: return createStatement();
      case MyAtlPackage.BINDING_STAT: return createBindingStat();
      case MyAtlPackage.ATL_TYPE: return createATLType();
      case MyAtlPackage.COLLECTION_TYPE_CS: return createCollectionTypeCS();
      case MyAtlPackage.TUPLE_TYPE_CS: return createTupleTypeCS();
      case MyAtlPackage.TUPLE_PART_CS: return createtuplePartCS();
      case MyAtlPackage.COLLECTION_LITERAL_EXP_CS: return createCollectionLiteralExpCS();
      case MyAtlPackage.COLLECTION_LITERAL_PART_CS: return createCollectionLiteralPartCS();
      case MyAtlPackage.PRIMITIVE_LITERAL_EXP_CS: return createPrimitiveLiteralExpCS();
      case MyAtlPackage.TUPLE_LITERAL_EXP_CS: return createTupleLiteralExpCS();
      case MyAtlPackage.TUPLE_LITERAL_PART_CS: return createTupleLiteralPartCS();
      case MyAtlPackage.NUMBER_LITERAL_EXP_CS: return createNumberLiteralExpCS();
      case MyAtlPackage.STRING_LITERAL_EXP_CS: return createStringLiteralExpCS();
      case MyAtlPackage.BOOLEAN_LITERAL_EXP_CS: return createBooleanLiteralExpCS();
      case MyAtlPackage.UNLIMITED_NATURAL_LITERAL_EXP_CS: return createUnlimitedNaturalLiteralExpCS();
      case MyAtlPackage.INVALID_LITERAL_EXP_CS: return createInvalidLiteralExpCS();
      case MyAtlPackage.NULL_LITERAL_EXP_CS: return createNullLiteralExpCS();
      case MyAtlPackage.PRIMITIVE_TYPE_CS: return createPrimitiveTypeCS();
      case MyAtlPackage.TYPE_LITERAL_CS: return createTypeLiteralCS();
      case MyAtlPackage.TYPE_LITERAL_EXP_CS: return createTypeLiteralExpCS();
      case MyAtlPackage.TYPE_NAME_EXP_CS: return createTypeNameExpCS();
      case MyAtlPackage.TYPE_EXP_CS: return createTypeExpCS();
      case MyAtlPackage.NAVIGATING_ARG_CS: return createNavigatingArgCS();
      case MyAtlPackage.NAVIGATING_BAR_ARG_CS: return createNavigatingBarArgCS();
      case MyAtlPackage.NAVIGATING_COMMA_ARG_CS: return createNavigatingCommaArgCS();
      case MyAtlPackage.NAVIGATING_SEMI_ARG_CS: return createNavigatingSemiArgCS();
      case MyAtlPackage.NAVIGATING_ARG_EXP_CS: return createNavigatingArgExpCS();
      case MyAtlPackage.IF_EXP_CS: return createIfExpCS();
      case MyAtlPackage.LET_EXP_CS: return createLetExpCS();
      case MyAtlPackage.LET_VARIABLE_CS: return createLetVariableCS();
      case MyAtlPackage.NESTED_EXP_CS: return createNestedExpCS();
      case MyAtlPackage.SELF_EXP_CS: return createSelfExpCS();
      case MyAtlPackage.PRIMARY_EXP_CS: return createPrimaryExpCS();
      case MyAtlPackage.STRING_EXP_CS: return createStringExpCs();
      case MyAtlPackage.NAME_EXP_CS: return createNameExpCS();
      case MyAtlPackage.EXP_CS: return createExpCS();
      case MyAtlPackage.INFIXED_EXP_CS: return createInfixedExpCS();
      case MyAtlPackage.BINARY_OPERATOR_CS: return createBinaryOperatorCS();
      case MyAtlPackage.INFIX_OPERATOR_CS: return createInfixOperatorCS();
      case MyAtlPackage.NAVIGATION_OPERATOR_CS: return createNavigationOperatorCS();
      case MyAtlPackage.PREFIXED_EXP_CS: return createPrefixedExpCS();
      case MyAtlPackage.UNARY_OPERATOR_CS: return createUnaryOperatorCS();
      case MyAtlPackage.INDEX_EXP_CS: return createIndexExpCS();
      case MyAtlPackage.NAVIGATING_EXP_CS_BASE: return createNavigatingExpCS_Base();
      case MyAtlPackage.NAVIGATING_EXP_CS: return createNavigatingExpCS();
      case MyAtlPackage.INFIX_EXP_CS: return createInfixExpCS();
      case MyAtlPackage.PREFIX_EXP_CS: return createPrefixExpCS();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Module createModule()
  {
    ModuleImpl module = new ModuleImpl();
    return module;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModuleElement createModuleElement()
  {
    ModuleElementImpl moduleElement = new ModuleElementImpl();
    return moduleElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MatchedRule createMatchedRule()
  {
    MatchedRuleImpl matchedRule = new MatchedRuleImpl();
    return matchedRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CalledRule createCalledRule()
  {
    CalledRuleImpl calledRule = new CalledRuleImpl();
    return calledRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public QueryRule createQueryRule()
  {
    QueryRuleImpl queryRule = new QueryRuleImpl();
    return queryRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Helper createHelper()
  {
    HelperImpl helper = new HelperImpl();
    return helper;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ATLDefCS createATLDefCS()
  {
    ATLDefCSImpl atlDefCS = new ATLDefCSImpl();
    return atlDefCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ATLParameterCS createATLParameterCS()
  {
    ATLParameterCSImpl atlParameterCS = new ATLParameterCSImpl();
    return atlParameterCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RuleVariableDeclaration createRuleVariableDeclaration()
  {
    RuleVariableDeclarationImpl ruleVariableDeclaration = new RuleVariableDeclarationImpl();
    return ruleVariableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InPattern createInPattern()
  {
    InPatternImpl inPattern = new InPatternImpl();
    return inPattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InPatternElement createInPatternElement()
  {
    InPatternElementImpl inPatternElement = new InPatternElementImpl();
    return inPatternElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OutPattern createOutPattern()
  {
    OutPatternImpl outPattern = new OutPatternImpl();
    return outPattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OutPatternElement createOutPatternElement()
  {
    OutPatternElementImpl outPatternElement = new OutPatternElementImpl();
    return outPatternElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimpleOutPatternElement createSimpleOutPatternElement()
  {
    SimpleOutPatternElementImpl simpleOutPatternElement = new SimpleOutPatternElementImpl();
    return simpleOutPatternElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ForEachOutPatternElement createForEachOutPatternElement()
  {
    ForEachOutPatternElementImpl forEachOutPatternElement = new ForEachOutPatternElementImpl();
    return forEachOutPatternElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Binding createBinding()
  {
    BindingImpl binding = new BindingImpl();
    return binding;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ActionBlock createActionBlock()
  {
    ActionBlockImpl actionBlock = new ActionBlockImpl();
    return actionBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BindingStat createBindingStat()
  {
    BindingStatImpl bindingStat = new BindingStatImpl();
    return bindingStat;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ATLType createATLType()
  {
    ATLTypeImpl atlType = new ATLTypeImpl();
    return atlType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CollectionTypeCS createCollectionTypeCS()
  {
    CollectionTypeCSImpl collectionTypeCS = new CollectionTypeCSImpl();
    return collectionTypeCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TupleTypeCS createTupleTypeCS()
  {
    TupleTypeCSImpl tupleTypeCS = new TupleTypeCSImpl();
    return tupleTypeCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public tuplePartCS createtuplePartCS()
  {
    tuplePartCSImpl tuplePartCS = new tuplePartCSImpl();
    return tuplePartCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CollectionLiteralExpCS createCollectionLiteralExpCS()
  {
    CollectionLiteralExpCSImpl collectionLiteralExpCS = new CollectionLiteralExpCSImpl();
    return collectionLiteralExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CollectionLiteralPartCS createCollectionLiteralPartCS()
  {
    CollectionLiteralPartCSImpl collectionLiteralPartCS = new CollectionLiteralPartCSImpl();
    return collectionLiteralPartCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PrimitiveLiteralExpCS createPrimitiveLiteralExpCS()
  {
    PrimitiveLiteralExpCSImpl primitiveLiteralExpCS = new PrimitiveLiteralExpCSImpl();
    return primitiveLiteralExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TupleLiteralExpCS createTupleLiteralExpCS()
  {
    TupleLiteralExpCSImpl tupleLiteralExpCS = new TupleLiteralExpCSImpl();
    return tupleLiteralExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TupleLiteralPartCS createTupleLiteralPartCS()
  {
    TupleLiteralPartCSImpl tupleLiteralPartCS = new TupleLiteralPartCSImpl();
    return tupleLiteralPartCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NumberLiteralExpCS createNumberLiteralExpCS()
  {
    NumberLiteralExpCSImpl numberLiteralExpCS = new NumberLiteralExpCSImpl();
    return numberLiteralExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StringLiteralExpCS createStringLiteralExpCS()
  {
    StringLiteralExpCSImpl stringLiteralExpCS = new StringLiteralExpCSImpl();
    return stringLiteralExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BooleanLiteralExpCS createBooleanLiteralExpCS()
  {
    BooleanLiteralExpCSImpl booleanLiteralExpCS = new BooleanLiteralExpCSImpl();
    return booleanLiteralExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UnlimitedNaturalLiteralExpCS createUnlimitedNaturalLiteralExpCS()
  {
    UnlimitedNaturalLiteralExpCSImpl unlimitedNaturalLiteralExpCS = new UnlimitedNaturalLiteralExpCSImpl();
    return unlimitedNaturalLiteralExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InvalidLiteralExpCS createInvalidLiteralExpCS()
  {
    InvalidLiteralExpCSImpl invalidLiteralExpCS = new InvalidLiteralExpCSImpl();
    return invalidLiteralExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NullLiteralExpCS createNullLiteralExpCS()
  {
    NullLiteralExpCSImpl nullLiteralExpCS = new NullLiteralExpCSImpl();
    return nullLiteralExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PrimitiveTypeCS createPrimitiveTypeCS()
  {
    PrimitiveTypeCSImpl primitiveTypeCS = new PrimitiveTypeCSImpl();
    return primitiveTypeCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeLiteralCS createTypeLiteralCS()
  {
    TypeLiteralCSImpl typeLiteralCS = new TypeLiteralCSImpl();
    return typeLiteralCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeLiteralExpCS createTypeLiteralExpCS()
  {
    TypeLiteralExpCSImpl typeLiteralExpCS = new TypeLiteralExpCSImpl();
    return typeLiteralExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeNameExpCS createTypeNameExpCS()
  {
    TypeNameExpCSImpl typeNameExpCS = new TypeNameExpCSImpl();
    return typeNameExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeExpCS createTypeExpCS()
  {
    TypeExpCSImpl typeExpCS = new TypeExpCSImpl();
    return typeExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NavigatingArgCS createNavigatingArgCS()
  {
    NavigatingArgCSImpl navigatingArgCS = new NavigatingArgCSImpl();
    return navigatingArgCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NavigatingBarArgCS createNavigatingBarArgCS()
  {
    NavigatingBarArgCSImpl navigatingBarArgCS = new NavigatingBarArgCSImpl();
    return navigatingBarArgCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NavigatingCommaArgCS createNavigatingCommaArgCS()
  {
    NavigatingCommaArgCSImpl navigatingCommaArgCS = new NavigatingCommaArgCSImpl();
    return navigatingCommaArgCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NavigatingSemiArgCS createNavigatingSemiArgCS()
  {
    NavigatingSemiArgCSImpl navigatingSemiArgCS = new NavigatingSemiArgCSImpl();
    return navigatingSemiArgCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NavigatingArgExpCS createNavigatingArgExpCS()
  {
    NavigatingArgExpCSImpl navigatingArgExpCS = new NavigatingArgExpCSImpl();
    return navigatingArgExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IfExpCS createIfExpCS()
  {
    IfExpCSImpl ifExpCS = new IfExpCSImpl();
    return ifExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LetExpCS createLetExpCS()
  {
    LetExpCSImpl letExpCS = new LetExpCSImpl();
    return letExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LetVariableCS createLetVariableCS()
  {
    LetVariableCSImpl letVariableCS = new LetVariableCSImpl();
    return letVariableCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NestedExpCS createNestedExpCS()
  {
    NestedExpCSImpl nestedExpCS = new NestedExpCSImpl();
    return nestedExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SelfExpCS createSelfExpCS()
  {
    SelfExpCSImpl selfExpCS = new SelfExpCSImpl();
    return selfExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PrimaryExpCS createPrimaryExpCS()
  {
    PrimaryExpCSImpl primaryExpCS = new PrimaryExpCSImpl();
    return primaryExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StringExpCs createStringExpCs()
  {
    StringExpCsImpl stringExpCs = new StringExpCsImpl();
    return stringExpCs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NameExpCS createNameExpCS()
  {
    NameExpCSImpl nameExpCS = new NameExpCSImpl();
    return nameExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpCS createExpCS()
  {
    ExpCSImpl expCS = new ExpCSImpl();
    return expCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InfixedExpCS createInfixedExpCS()
  {
    InfixedExpCSImpl infixedExpCS = new InfixedExpCSImpl();
    return infixedExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BinaryOperatorCS createBinaryOperatorCS()
  {
    BinaryOperatorCSImpl binaryOperatorCS = new BinaryOperatorCSImpl();
    return binaryOperatorCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InfixOperatorCS createInfixOperatorCS()
  {
    InfixOperatorCSImpl infixOperatorCS = new InfixOperatorCSImpl();
    return infixOperatorCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NavigationOperatorCS createNavigationOperatorCS()
  {
    NavigationOperatorCSImpl navigationOperatorCS = new NavigationOperatorCSImpl();
    return navigationOperatorCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PrefixedExpCS createPrefixedExpCS()
  {
    PrefixedExpCSImpl prefixedExpCS = new PrefixedExpCSImpl();
    return prefixedExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UnaryOperatorCS createUnaryOperatorCS()
  {
    UnaryOperatorCSImpl unaryOperatorCS = new UnaryOperatorCSImpl();
    return unaryOperatorCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IndexExpCS createIndexExpCS()
  {
    IndexExpCSImpl indexExpCS = new IndexExpCSImpl();
    return indexExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NavigatingExpCS_Base createNavigatingExpCS_Base()
  {
    NavigatingExpCS_BaseImpl navigatingExpCS_Base = new NavigatingExpCS_BaseImpl();
    return navigatingExpCS_Base;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NavigatingExpCS createNavigatingExpCS()
  {
    NavigatingExpCSImpl navigatingExpCS = new NavigatingExpCSImpl();
    return navigatingExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InfixExpCS createInfixExpCS()
  {
    InfixExpCSImpl infixExpCS = new InfixExpCSImpl();
    return infixExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PrefixExpCS createPrefixExpCS()
  {
    PrefixExpCSImpl prefixExpCS = new PrefixExpCSImpl();
    return prefixExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyAtlPackage getMyAtlPackage()
  {
    return (MyAtlPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MyAtlPackage getPackage()
  {
    return MyAtlPackage.eINSTANCE;
  }

} //MyAtlFactoryImpl
