/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyATLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameUnrestrictedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cCreateKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cOUTKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOutModelsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOutModelsNameExpCSParserRuleCall_6_0 = (RuleCall)cOutModelsAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cOutModelsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cOutModelsNameExpCSParserRuleCall_7_1_0 = (RuleCall)cOutModelsAssignment_7_1.eContents().get(0);
		private final Keyword cFromKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cINKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cColonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cInModelsAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cInModelsNameExpCSParserRuleCall_11_0 = (RuleCall)cInModelsAssignment_11.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cCommaKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cInModelsAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cInModelsNameExpCSParserRuleCall_12_1_0 = (RuleCall)cInModelsAssignment_12_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cElementsAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cElementsModuleElementParserRuleCall_14_0 = (RuleCall)cElementsAssignment_14.eContents().get(0);
		
		////Solo ATL, mancano le regole OCL (alcune inserite perchè 
		////usate anche da ATL come UnreservedName etc.
		//Module:
		//	'module'
		//	name=UnrestrictedName ';'
		//	'create' 'OUT' ':' outModels+=NameExpCS ("," outModels+=NameExpCS)*
		//	'from' 'IN' ':' inModels+=NameExpCS ("," inModels+=NameExpCS)* ';'
		//	elements+=ModuleElement*;
		@Override public ParserRule getRule() { return rule; }
		
		//'module' name=UnrestrictedName ';' 'create' 'OUT' ':' outModels+=NameExpCS ("," outModels+=NameExpCS)* 'from' 'IN' ':'
		//inModels+=NameExpCS ("," inModels+=NameExpCS)* ';' elements+=ModuleElement*
		public Group getGroup() { return cGroup; }
		
		//'module'
		public Keyword getModuleKeyword_0() { return cModuleKeyword_0; }
		
		//name=UnrestrictedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//UnrestrictedName
		public RuleCall getNameUnrestrictedNameParserRuleCall_1_0() { return cNameUnrestrictedNameParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//'create'
		public Keyword getCreateKeyword_3() { return cCreateKeyword_3; }
		
		//'OUT'
		public Keyword getOUTKeyword_4() { return cOUTKeyword_4; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//outModels+=NameExpCS
		public Assignment getOutModelsAssignment_6() { return cOutModelsAssignment_6; }
		
		//NameExpCS
		public RuleCall getOutModelsNameExpCSParserRuleCall_6_0() { return cOutModelsNameExpCSParserRuleCall_6_0; }
		
		//("," outModels+=NameExpCS)*
		public Group getGroup_7() { return cGroup_7; }
		
		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//outModels+=NameExpCS
		public Assignment getOutModelsAssignment_7_1() { return cOutModelsAssignment_7_1; }
		
		//NameExpCS
		public RuleCall getOutModelsNameExpCSParserRuleCall_7_1_0() { return cOutModelsNameExpCSParserRuleCall_7_1_0; }
		
		//'from'
		public Keyword getFromKeyword_8() { return cFromKeyword_8; }
		
		//'IN'
		public Keyword getINKeyword_9() { return cINKeyword_9; }
		
		//':'
		public Keyword getColonKeyword_10() { return cColonKeyword_10; }
		
		//inModels+=NameExpCS
		public Assignment getInModelsAssignment_11() { return cInModelsAssignment_11; }
		
		//NameExpCS
		public RuleCall getInModelsNameExpCSParserRuleCall_11_0() { return cInModelsNameExpCSParserRuleCall_11_0; }
		
		//("," inModels+=NameExpCS)*
		public Group getGroup_12() { return cGroup_12; }
		
		//","
		public Keyword getCommaKeyword_12_0() { return cCommaKeyword_12_0; }
		
		//inModels+=NameExpCS
		public Assignment getInModelsAssignment_12_1() { return cInModelsAssignment_12_1; }
		
		//NameExpCS
		public RuleCall getInModelsNameExpCSParserRuleCall_12_1_0() { return cInModelsNameExpCSParserRuleCall_12_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_13() { return cSemicolonKeyword_13; }
		
		//elements+=ModuleElement*
		public Assignment getElementsAssignment_14() { return cElementsAssignment_14; }
		
		//ModuleElement
		public RuleCall getElementsModuleElementParserRuleCall_14_0() { return cElementsModuleElementParserRuleCall_14_0; }
	}
	public class EssentialOCLUnreservedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.EssentialOCLUnreservedName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnrestrictedNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCollectionTypeIdentifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPrimitiveTypeIdentifierParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Keyword cTupleKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//EssentialOCLUnreservedName:
		//	UnrestrictedName | CollectionTypeIdentifier | PrimitiveTypeIdentifier | 'Tuple';
		@Override public ParserRule getRule() { return rule; }
		
		//UnrestrictedName | CollectionTypeIdentifier | PrimitiveTypeIdentifier | 'Tuple'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameParserRuleCall_0() { return cUnrestrictedNameParserRuleCall_0; }
		
		//CollectionTypeIdentifier
		public RuleCall getCollectionTypeIdentifierParserRuleCall_1() { return cCollectionTypeIdentifierParserRuleCall_1; }
		
		//PrimitiveTypeIdentifier
		public RuleCall getPrimitiveTypeIdentifierParserRuleCall_2() { return cPrimitiveTypeIdentifierParserRuleCall_2; }
		
		//'Tuple'
		public Keyword getTupleKeyword_3() { return cTupleKeyword_3; }
	}
	public class UnreservedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.UnreservedName");
		private final RuleCall cEssentialOCLUnreservedNameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//UnreservedName:
		//	EssentialOCLUnreservedName;
		@Override public ParserRule getRule() { return rule; }
		
		//EssentialOCLUnreservedName
		public RuleCall getEssentialOCLUnreservedNameParserRuleCall() { return cEssentialOCLUnreservedNameParserRuleCall; }
	}
	public class PrimitiveTypeIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.PrimitiveTypeIdentifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBooleanKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIntegerKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cRealKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cStringKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cUnlimitedNaturalKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cOclAnyKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cOclInvalidKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cOclVoidKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//PrimitiveTypeIdentifier:
		//	'Boolean' | 'Integer' | 'Real' | 'String' | 'UnlimitedNatural' | 'OclAny'
		//	| 'OclInvalid' | 'OclVoid';
		@Override public ParserRule getRule() { return rule; }
		
		//'Boolean' | 'Integer' | 'Real' | 'String' | 'UnlimitedNatural' | 'OclAny' | 'OclInvalid' | 'OclVoid'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Boolean'
		public Keyword getBooleanKeyword_0() { return cBooleanKeyword_0; }
		
		//'Integer'
		public Keyword getIntegerKeyword_1() { return cIntegerKeyword_1; }
		
		//'Real'
		public Keyword getRealKeyword_2() { return cRealKeyword_2; }
		
		//'String'
		public Keyword getStringKeyword_3() { return cStringKeyword_3; }
		
		//'UnlimitedNatural'
		public Keyword getUnlimitedNaturalKeyword_4() { return cUnlimitedNaturalKeyword_4; }
		
		//'OclAny'
		public Keyword getOclAnyKeyword_5() { return cOclAnyKeyword_5; }
		
		//'OclInvalid'
		public Keyword getOclInvalidKeyword_6() { return cOclInvalidKeyword_6; }
		
		//'OclVoid'
		public Keyword getOclVoidKeyword_7() { return cOclVoidKeyword_7; }
	}
	public class CollectionTypeIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.CollectionTypeIdentifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cBagKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSequenceKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cCollectionKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cOrderedSetKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//CollectionTypeIdentifier:
		//	'Set' | 'Bag' | 'Sequence' | 'Collection' | 'OrderedSet';
		@Override public ParserRule getRule() { return rule; }
		
		//'Set' | 'Bag' | 'Sequence' | 'Collection' | 'OrderedSet'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Set'
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }
		
		//'Bag'
		public Keyword getBagKeyword_1() { return cBagKeyword_1; }
		
		//'Sequence'
		public Keyword getSequenceKeyword_2() { return cSequenceKeyword_2; }
		
		//'Collection'
		public Keyword getCollectionKeyword_3() { return cCollectionKeyword_3; }
		
		//'OrderedSet'
		public Keyword getOrderedSetKeyword_4() { return cOrderedSetKeyword_4; }
	}
	public class UnrestrictedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.UnrestrictedName");
		private final RuleCall cEssentialOCLUnrestrictedNameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//UnrestrictedName:
		//	EssentialOCLUnrestrictedName;
		@Override public ParserRule getRule() { return rule; }
		
		//EssentialOCLUnrestrictedName
		public RuleCall getEssentialOCLUnrestrictedNameParserRuleCall() { return cEssentialOCLUnrestrictedNameParserRuleCall; }
	}
	public class EssentialOCLUnrestrictedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.EssentialOCLUnrestrictedName");
		private final RuleCall cSIMPLE_IDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EssentialOCLUnrestrictedName:
		//	SIMPLE_ID;
		@Override public ParserRule getRule() { return rule; }
		
		//SIMPLE_ID
		public RuleCall getSIMPLE_IDTerminalRuleCall() { return cSIMPLE_IDTerminalRuleCall; }
	}
	public class ModuleElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.ModuleElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHelperParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMatchedRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCalledRuleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ModuleElement:
		//	Helper | MatchedRule | CalledRule;
		@Override public ParserRule getRule() { return rule; }
		
		//Helper | MatchedRule | CalledRule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Helper
		public RuleCall getHelperParserRuleCall_0() { return cHelperParserRuleCall_0; }
		
		//MatchedRule
		public RuleCall getMatchedRuleParserRuleCall_1() { return cMatchedRuleParserRuleCall_1; }
		
		//CalledRule
		public RuleCall getCalledRuleParserRuleCall_2() { return cCalledRuleParserRuleCall_2; }
	}
	public class MatchedRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.MatchedRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameUnrestrictedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cFromKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInPatternAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInPatternInPatternParserRuleCall_4_0 = (RuleCall)cInPatternAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cUsingKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cVariablesAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cVariablesRuleVariableDeclarationParserRuleCall_5_2_0 = (RuleCall)cVariablesAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Keyword cToKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cOutPatternAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cOutPatternOutPatternParserRuleCall_7_0 = (RuleCall)cOutPatternAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cDoKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cActionBlockAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cActionBlockActionBlockParserRuleCall_8_2_0 = (RuleCall)cActionBlockAssignment_8_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//MatchedRule:
		//	'rule' name=UnrestrictedName '{'
		//	'from'
		//	inPattern=InPattern ('using' '{'
		//	variables+=RuleVariableDeclaration*
		//	'}')?
		//	'to'
		//	outPattern=OutPattern ('do' '{'
		//	actionBlock=ActionBlock
		//	'}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'rule' name=UnrestrictedName '{' 'from' inPattern=InPattern ('using' '{' variables+=RuleVariableDeclaration* '}')? 'to'
		//outPattern=OutPattern ('do' '{' actionBlock=ActionBlock '}')? '}'
		public Group getGroup() { return cGroup; }
		
		//'rule'
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }
		
		//name=UnrestrictedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//UnrestrictedName
		public RuleCall getNameUnrestrictedNameParserRuleCall_1_0() { return cNameUnrestrictedNameParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'from'
		public Keyword getFromKeyword_3() { return cFromKeyword_3; }
		
		//inPattern=InPattern
		public Assignment getInPatternAssignment_4() { return cInPatternAssignment_4; }
		
		//InPattern
		public RuleCall getInPatternInPatternParserRuleCall_4_0() { return cInPatternInPatternParserRuleCall_4_0; }
		
		//('using' '{' variables+=RuleVariableDeclaration* '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'using'
		public Keyword getUsingKeyword_5_0() { return cUsingKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//variables+=RuleVariableDeclaration*
		public Assignment getVariablesAssignment_5_2() { return cVariablesAssignment_5_2; }
		
		//RuleVariableDeclaration
		public RuleCall getVariablesRuleVariableDeclarationParserRuleCall_5_2_0() { return cVariablesRuleVariableDeclarationParserRuleCall_5_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }
		
		//'to'
		public Keyword getToKeyword_6() { return cToKeyword_6; }
		
		//outPattern=OutPattern
		public Assignment getOutPatternAssignment_7() { return cOutPatternAssignment_7; }
		
		//OutPattern
		public RuleCall getOutPatternOutPatternParserRuleCall_7_0() { return cOutPatternOutPatternParserRuleCall_7_0; }
		
		//('do' '{' actionBlock=ActionBlock '}')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'do'
		public Keyword getDoKeyword_8_0() { return cDoKeyword_8_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_1() { return cLeftCurlyBracketKeyword_8_1; }
		
		//actionBlock=ActionBlock
		public Assignment getActionBlockAssignment_8_2() { return cActionBlockAssignment_8_2; }
		
		//ActionBlock
		public RuleCall getActionBlockActionBlockParserRuleCall_8_2_0() { return cActionBlockActionBlockParserRuleCall_8_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_3() { return cRightCurlyBracketKeyword_8_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class CalledRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.CalledRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntrypointKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameUnrestrictedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cUsingKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cVariablesAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cVariablesRuleVariableDeclarationParserRuleCall_5_2_0 = (RuleCall)cVariablesAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Keyword cToKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cOutPatternAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cOutPatternOutPatternParserRuleCall_7_0 = (RuleCall)cOutPatternAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cDoKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cActionBlockAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cActionBlockActionBlockParserRuleCall_8_2_0 = (RuleCall)cActionBlockAssignment_8_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//CalledRule:
		//	'entrypoint'? 'rule' name=UnrestrictedName ('(' ')')? '{' ('using' '{'
		//	variables+=RuleVariableDeclaration*
		//	'}')?
		//	'to'
		//	outPattern=OutPattern ('do' '{'
		//	actionBlock=ActionBlock
		//	'}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'entrypoint'? 'rule' name=UnrestrictedName ('(' ')')? '{' ('using' '{' variables+=RuleVariableDeclaration* '}')? 'to'
		//outPattern=OutPattern ('do' '{' actionBlock=ActionBlock '}')? '}'
		public Group getGroup() { return cGroup; }
		
		//'entrypoint'?
		public Keyword getEntrypointKeyword_0() { return cEntrypointKeyword_0; }
		
		//'rule'
		public Keyword getRuleKeyword_1() { return cRuleKeyword_1; }
		
		//name=UnrestrictedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//UnrestrictedName
		public RuleCall getNameUnrestrictedNameParserRuleCall_2_0() { return cNameUnrestrictedNameParserRuleCall_2_0; }
		
		//('(' ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_1() { return cRightParenthesisKeyword_3_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//('using' '{' variables+=RuleVariableDeclaration* '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'using'
		public Keyword getUsingKeyword_5_0() { return cUsingKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//variables+=RuleVariableDeclaration*
		public Assignment getVariablesAssignment_5_2() { return cVariablesAssignment_5_2; }
		
		//RuleVariableDeclaration
		public RuleCall getVariablesRuleVariableDeclarationParserRuleCall_5_2_0() { return cVariablesRuleVariableDeclarationParserRuleCall_5_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }
		
		//'to'
		public Keyword getToKeyword_6() { return cToKeyword_6; }
		
		//outPattern=OutPattern
		public Assignment getOutPatternAssignment_7() { return cOutPatternAssignment_7; }
		
		//OutPattern
		public RuleCall getOutPatternOutPatternParserRuleCall_7_0() { return cOutPatternOutPatternParserRuleCall_7_0; }
		
		//('do' '{' actionBlock=ActionBlock '}')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'do'
		public Keyword getDoKeyword_8_0() { return cDoKeyword_8_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_1() { return cLeftCurlyBracketKeyword_8_1; }
		
		//actionBlock=ActionBlock
		public Assignment getActionBlockAssignment_8_2() { return cActionBlockAssignment_8_2; }
		
		//ActionBlock
		public RuleCall getActionBlockActionBlockParserRuleCall_8_2_0() { return cActionBlockActionBlockParserRuleCall_8_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_3() { return cRightCurlyBracketKeyword_8_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class HelperElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.Helper");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHelperKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cContextKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDefinitionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefinitionATLDefCSParserRuleCall_2_0 = (RuleCall)cDefinitionAssignment_2.eContents().get(0);
		
		///*
		// *helper [context context type]? def :
		// *helper_name(parameters) : return_type = exp;
		// */ Helper:
		//	'helper' 'context'?
		//	definition=ATLDefCS;
		@Override public ParserRule getRule() { return rule; }
		
		//'helper' 'context'? definition=ATLDefCS
		public Group getGroup() { return cGroup; }
		
		//'helper'
		public Keyword getHelperKeyword_0() { return cHelperKeyword_0; }
		
		//'context'?
		public Keyword getContextKeyword_1() { return cContextKeyword_1; }
		
		//definition=ATLDefCS
		public Assignment getDefinitionAssignment_2() { return cDefinitionAssignment_2; }
		
		//ATLDefCS
		public RuleCall getDefinitionATLDefCSParserRuleCall_2_0() { return cDefinitionATLDefCSParserRuleCall_2_0; }
	}
	public class ATLDefCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.ATLDefCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarNameUnrestrictedNameParserRuleCall_2_0 = (RuleCall)cVarNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cParametersAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cParametersATLParameterCSParserRuleCall_3_1_0_0 = (RuleCall)cParametersAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cParametersATLParameterCSParserRuleCall_3_1_1_1_0 = (RuleCall)cParametersAssignment_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTypeATLTypeParserRuleCall_5_0 = (RuleCall)cTypeAssignment_5.eContents().get(0);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cInitExpressionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cInitExpressionExpCSParserRuleCall_7_0 = (RuleCall)cInitExpressionAssignment_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		///*
		// *Implementation of Complete OGL Parts for ATL.
		// *Adaption, ATL hac nome differences; 'context' is not
		// *optional in OCL.
		// *OCL DefCS requires 'stat1c' key word.
		// */ ATLDefCS:
		//	'def' ':' varName=UnrestrictedName ('(' (parameters+=ATLParameterCS (','
		//	parameters+=ATLParameterCS)*)?
		//	')')?
		//	':' type=ATLType
		//	'=' initExpression=ExpCS ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'def' ':' varName=UnrestrictedName ('(' (parameters+=ATLParameterCS (',' parameters+=ATLParameterCS)*)? ')')? ':'
		//type=ATLType '=' initExpression=ExpCS ';'
		public Group getGroup() { return cGroup; }
		
		//'def'
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//varName=UnrestrictedName
		public Assignment getVarNameAssignment_2() { return cVarNameAssignment_2; }
		
		//UnrestrictedName
		public RuleCall getVarNameUnrestrictedNameParserRuleCall_2_0() { return cVarNameUnrestrictedNameParserRuleCall_2_0; }
		
		//('(' (parameters+=ATLParameterCS (',' parameters+=ATLParameterCS)*)? ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//(parameters+=ATLParameterCS (',' parameters+=ATLParameterCS)*)?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//parameters+=ATLParameterCS
		public Assignment getParametersAssignment_3_1_0() { return cParametersAssignment_3_1_0; }
		
		//ATLParameterCS
		public RuleCall getParametersATLParameterCSParserRuleCall_3_1_0_0() { return cParametersATLParameterCSParserRuleCall_3_1_0_0; }
		
		//(',' parameters+=ATLParameterCS)*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_1_0() { return cCommaKeyword_3_1_1_0; }
		
		//parameters+=ATLParameterCS
		public Assignment getParametersAssignment_3_1_1_1() { return cParametersAssignment_3_1_1_1; }
		
		//ATLParameterCS
		public RuleCall getParametersATLParameterCSParserRuleCall_3_1_1_1_0() { return cParametersATLParameterCSParserRuleCall_3_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//type=ATLType
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }
		
		//ATLType
		public RuleCall getTypeATLTypeParserRuleCall_5_0() { return cTypeATLTypeParserRuleCall_5_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//initExpression=ExpCS
		public Assignment getInitExpressionAssignment_7() { return cInitExpressionAssignment_7; }
		
		//ExpCS
		public RuleCall getInitExpressionExpCSParserRuleCall_7_0() { return cInitExpressionExpCSParserRuleCall_7_0; }
		
		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}
	public class ATLParameterCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.ATLParameterCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarNameUnrestrictedNameParserRuleCall_0_0 = (RuleCall)cVarNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeATLTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//ATLParameterCS:
		//	varName=UnrestrictedName ':' type=ATLType;
		@Override public ParserRule getRule() { return rule; }
		
		//varName=UnrestrictedName ':' type=ATLType
		public Group getGroup() { return cGroup; }
		
		//varName=UnrestrictedName
		public Assignment getVarNameAssignment_0() { return cVarNameAssignment_0; }
		
		//UnrestrictedName
		public RuleCall getVarNameUnrestrictedNameParserRuleCall_0_0() { return cVarNameUnrestrictedNameParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=ATLType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//ATLType
		public RuleCall getTypeATLTypeParserRuleCall_2_0() { return cTypeATLTypeParserRuleCall_2_0; }
	}
	public class RuleVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.RuleVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarNameUnrestrictedNameParserRuleCall_0_0 = (RuleCall)cVarNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeATLTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInitExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInitExpressionExpCSParserRuleCall_4_0 = (RuleCall)cInitExpressionAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//RuleVariableDeclaration:
		//	varName=UnrestrictedName ':' type=ATLType
		//	'=' initExpression=ExpCS ';';
		@Override public ParserRule getRule() { return rule; }
		
		//varName=UnrestrictedName ':' type=ATLType '=' initExpression=ExpCS ';'
		public Group getGroup() { return cGroup; }
		
		//varName=UnrestrictedName
		public Assignment getVarNameAssignment_0() { return cVarNameAssignment_0; }
		
		//UnrestrictedName
		public RuleCall getVarNameUnrestrictedNameParserRuleCall_0_0() { return cVarNameUnrestrictedNameParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=ATLType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//ATLType
		public RuleCall getTypeATLTypeParserRuleCall_2_0() { return cTypeATLTypeParserRuleCall_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//initExpression=ExpCS
		public Assignment getInitExpressionAssignment_4() { return cInitExpressionAssignment_4; }
		
		//ExpCS
		public RuleCall getInitExpressionExpCSParserRuleCall_4_0() { return cInitExpressionExpCSParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class InPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.InPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsInPatternElementParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFilterAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFilterExpCSParserRuleCall_1_1_0 = (RuleCall)cFilterAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//InPattern:
		//	elements+=InPatternElement ('('
		//	filter=ExpCS?
		//	')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=InPatternElement ('(' filter=ExpCS? ')')?
		public Group getGroup() { return cGroup; }
		
		//elements+=InPatternElement
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }
		
		//InPatternElement
		public RuleCall getElementsInPatternElementParserRuleCall_0_0() { return cElementsInPatternElementParserRuleCall_0_0; }
		
		//('(' filter=ExpCS? ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//filter=ExpCS?
		public Assignment getFilterAssignment_1_1() { return cFilterAssignment_1_1; }
		
		//ExpCS
		public RuleCall getFilterExpCSParserRuleCall_1_1_0() { return cFilterExpCSParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class InPatternElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.InPatternElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarNameUnrestrictedNameParserRuleCall_0_0 = (RuleCall)cVarNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeATLTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//InPatternElement:
		//	varName=UnrestrictedName ':' type=ATLType;
		@Override public ParserRule getRule() { return rule; }
		
		//varName=UnrestrictedName ':' type=ATLType
		public Group getGroup() { return cGroup; }
		
		//varName=UnrestrictedName
		public Assignment getVarNameAssignment_0() { return cVarNameAssignment_0; }
		
		//UnrestrictedName
		public RuleCall getVarNameUnrestrictedNameParserRuleCall_0_0() { return cVarNameUnrestrictedNameParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=ATLType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//ATLType
		public RuleCall getTypeATLTypeParserRuleCall_2_0() { return cTypeATLTypeParserRuleCall_2_0; }
	}
	public class OutPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.OutPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsOutPatternElementParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElementsOutPatternElementParserRuleCall_1_1_0 = (RuleCall)cElementsAssignment_1_1.eContents().get(0);
		
		//OutPattern:
		//	elements+=OutPatternElement (','
		//	elements+=OutPatternElement)*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=OutPatternElement (',' elements+=OutPatternElement)*
		public Group getGroup() { return cGroup; }
		
		//elements+=OutPatternElement
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }
		
		//OutPatternElement
		public RuleCall getElementsOutPatternElementParserRuleCall_0_0() { return cElementsOutPatternElementParserRuleCall_0_0; }
		
		//(',' elements+=OutPatternElement)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//elements+=OutPatternElement
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }
		
		//OutPatternElement
		public RuleCall getElementsOutPatternElementParserRuleCall_1_1_0() { return cElementsOutPatternElementParserRuleCall_1_1_0; }
	}
	public class OutPatternElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.OutPatternElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleOutPatternElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cForEachOutPatternElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OutPatternElement:
		//	SimpleOutPatternElement
		//	| ForEachOutPatternElement;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleOutPatternElement | ForEachOutPatternElement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleOutPatternElement
		public RuleCall getSimpleOutPatternElementParserRuleCall_0() { return cSimpleOutPatternElementParserRuleCall_0; }
		
		//ForEachOutPatternElement
		public RuleCall getForEachOutPatternElementParserRuleCall_1() { return cForEachOutPatternElementParserRuleCall_1; }
	}
	public class SimpleOutPatternElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.SimpleOutPatternElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarNameUnrestrictedNameParserRuleCall_0_0 = (RuleCall)cVarNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeATLTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cBindingsAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cBindingsBindingParserRuleCall_3_1_0_0 = (RuleCall)cBindingsAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cBindingsAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cBindingsBindingParserRuleCall_3_1_1_1_0 = (RuleCall)cBindingsAssignment_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//SimpleOutPatternElement:
		//	varName=UnrestrictedName ':' type=ATLType ('(' (bindings+=Binding (',' bindings+=Binding)*)?
		//	')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//varName=UnrestrictedName ':' type=ATLType ('(' (bindings+=Binding (',' bindings+=Binding)*)? ')')?
		public Group getGroup() { return cGroup; }
		
		//varName=UnrestrictedName
		public Assignment getVarNameAssignment_0() { return cVarNameAssignment_0; }
		
		//UnrestrictedName
		public RuleCall getVarNameUnrestrictedNameParserRuleCall_0_0() { return cVarNameUnrestrictedNameParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=ATLType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//ATLType
		public RuleCall getTypeATLTypeParserRuleCall_2_0() { return cTypeATLTypeParserRuleCall_2_0; }
		
		//('(' (bindings+=Binding (',' bindings+=Binding)*)? ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//(bindings+=Binding (',' bindings+=Binding)*)?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//bindings+=Binding
		public Assignment getBindingsAssignment_3_1_0() { return cBindingsAssignment_3_1_0; }
		
		//Binding
		public RuleCall getBindingsBindingParserRuleCall_3_1_0_0() { return cBindingsBindingParserRuleCall_3_1_0_0; }
		
		//(',' bindings+=Binding)*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_1_0() { return cCommaKeyword_3_1_1_0; }
		
		//bindings+=Binding
		public Assignment getBindingsAssignment_3_1_1_1() { return cBindingsAssignment_3_1_1_1; }
		
		//Binding
		public RuleCall getBindingsBindingParserRuleCall_3_1_1_1_0() { return cBindingsBindingParserRuleCall_3_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	public class ForEachOutPatternElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.ForEachOutPatternElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cXxxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCollectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCollectionExpCSParserRuleCall_1_0 = (RuleCall)cCollectionAssignment_1.eContents().get(0);
		private final Keyword cYyyKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ForEachOutPatternElement:
		//	'xxx'
		//	collection=ExpCS
		//	'yyy';
		@Override public ParserRule getRule() { return rule; }
		
		//'xxx' collection=ExpCS 'yyy'
		public Group getGroup() { return cGroup; }
		
		//'xxx'
		public Keyword getXxxKeyword_0() { return cXxxKeyword_0; }
		
		//collection=ExpCS
		public Assignment getCollectionAssignment_1() { return cCollectionAssignment_1; }
		
		//ExpCS
		public RuleCall getCollectionExpCSParserRuleCall_1_0() { return cCollectionExpCSParserRuleCall_1_0; }
		
		//'yyy'
		public Keyword getYyyKeyword_2() { return cYyyKeyword_2; }
	}
	public class BindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.Binding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPropertyNameUnrestrictedNameParserRuleCall_0_0 = (RuleCall)cPropertyNameAssignment_0.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpCSParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Binding:
		//	propertyName=UnrestrictedName '<-' value=ExpCS;
		@Override public ParserRule getRule() { return rule; }
		
		//propertyName=UnrestrictedName '<-' value=ExpCS
		public Group getGroup() { return cGroup; }
		
		//propertyName=UnrestrictedName
		public Assignment getPropertyNameAssignment_0() { return cPropertyNameAssignment_0; }
		
		//UnrestrictedName
		public RuleCall getPropertyNameUnrestrictedNameParserRuleCall_0_0() { return cPropertyNameUnrestrictedNameParserRuleCall_0_0; }
		
		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_1() { return cLessThanSignHyphenMinusKeyword_1; }
		
		//value=ExpCS
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//ExpCS
		public RuleCall getValueExpCSParserRuleCall_2_0() { return cValueExpCSParserRuleCall_2_0; }
	}
	public class ActionBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.ActionBlock");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//ActionBlock:
		//	statements+=Statement+;
		@Override public ParserRule getRule() { return rule; }
		
		//statements+=Statement+
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.Statement");
		private final RuleCall cBindingStatParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Statement:
		//	BindingStat;
		@Override public ParserRule getRule() { return rule; }
		
		//BindingStat
		public RuleCall getBindingStatParserRuleCall() { return cBindingStatParserRuleCall; }
	}
	public class BindingStatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.BindingStat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSourceExpCSParserRuleCall_0_0 = (RuleCall)cSourceAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertyNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertyNameUnrestrictedNameParserRuleCall_2_0 = (RuleCall)cPropertyNameAssignment_2.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueExpCSParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//BindingStat:
		//	source=ExpCS '.'
		//	propertyName=UnrestrictedName '<-'
		//	value=ExpCS ';';
		@Override public ParserRule getRule() { return rule; }
		
		//source=ExpCS '.' propertyName=UnrestrictedName '<-' value=ExpCS ';'
		public Group getGroup() { return cGroup; }
		
		//source=ExpCS
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//ExpCS
		public RuleCall getSourceExpCSParserRuleCall_0_0() { return cSourceExpCSParserRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//propertyName=UnrestrictedName
		public Assignment getPropertyNameAssignment_2() { return cPropertyNameAssignment_2; }
		
		//UnrestrictedName
		public RuleCall getPropertyNameUnrestrictedNameParserRuleCall_2_0() { return cPropertyNameUnrestrictedNameParserRuleCall_2_0; }
		
		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_3() { return cLessThanSignHyphenMinusKeyword_3; }
		
		//value=ExpCS
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//ExpCS
		public RuleCall getValueExpCSParserRuleCall_4_0() { return cValueExpCSParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class ATLTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.ATLType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cModelNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cModelNameATLModelNameParserRuleCall_0_0_0 = (RuleCall)cModelNameAssignment_0_0.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeExpCSParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//ATLType:
		//	(modelName=ATLModelName '!')? type=TypeExpCS;
		@Override public ParserRule getRule() { return rule; }
		
		//(modelName=ATLModelName '!')? type=TypeExpCS
		public Group getGroup() { return cGroup; }
		
		//(modelName=ATLModelName '!')?
		public Group getGroup_0() { return cGroup_0; }
		
		//modelName=ATLModelName
		public Assignment getModelNameAssignment_0_0() { return cModelNameAssignment_0_0; }
		
		//ATLModelName
		public RuleCall getModelNameATLModelNameParserRuleCall_0_0_0() { return cModelNameATLModelNameParserRuleCall_0_0_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_0_1() { return cExclamationMarkKeyword_0_1; }
		
		//type=TypeExpCS
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//TypeExpCS
		public RuleCall getTypeTypeExpCSParserRuleCall_1_0() { return cTypeTypeExpCSParserRuleCall_1_0; }
	}
	public class ATLModelNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.ATLModelName");
		private final RuleCall cUnrestrictedNameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ATLModelName:
		//	UnrestrictedName;
		@Override public ParserRule getRule() { return rule; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameParserRuleCall() { return cUnrestrictedNameParserRuleCall; }
	}
	public class EssentialOCLRersevedKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.EssentialOCLRersevedKeyword");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cElseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEndifKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cIfKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cImpliesKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cInKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cLetKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cNotKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cOrKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cThenKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cXorKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		
		//EssentialOCLRersevedKeyword:
		//	'and' | 'else' | 'endif' | 'if' | 'implies' | 'in' | 'let'
		//	| 'not' | 'or' | 'then' | 'xor';
		@Override public ParserRule getRule() { return rule; }
		
		//'and' | 'else' | 'endif' | 'if' | 'implies' | 'in' | 'let' | 'not' | 'or' | 'then' | 'xor'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'and'
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }
		
		//'else'
		public Keyword getElseKeyword_1() { return cElseKeyword_1; }
		
		//'endif'
		public Keyword getEndifKeyword_2() { return cEndifKeyword_2; }
		
		//'if'
		public Keyword getIfKeyword_3() { return cIfKeyword_3; }
		
		//'implies'
		public Keyword getImpliesKeyword_4() { return cImpliesKeyword_4; }
		
		//'in'
		public Keyword getInKeyword_5() { return cInKeyword_5; }
		
		//'let'
		public Keyword getLetKeyword_6() { return cLetKeyword_6; }
		
		//'not'
		public Keyword getNotKeyword_7() { return cNotKeyword_7; }
		
		//'or'
		public Keyword getOrKeyword_8() { return cOrKeyword_8; }
		
		//'then'
		public Keyword getThenKeyword_9() { return cThenKeyword_9; }
		
		//'xor'
		public Keyword getXorKeyword_10() { return cXorKeyword_10; }
	}
	public class EssentialOCLPrefixOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.EssentialOCLPrefixOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cNotKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EssentialOCLPrefixOperator:
		//	'-' | 'not';
		@Override public ParserRule getRule() { return rule; }
		
		//'-' | 'not'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//'not'
		public Keyword getNotKeyword_1() { return cNotKeyword_1; }
	}
	public class EssentialOCLInfixOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.EssentialOCLInfixOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPlusSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLessThanSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cGreaterThanSignEqualsSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cLessThanSignEqualsSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cEqualsSignKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cLessThanSignGreaterThanSignKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cAndKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cOrKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cXorKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cImpliesKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		
		//EssentialOCLInfixOperator:
		//	'*' | '/' | '+' | '-' | '>' | '<' | '>=' | '<=' | '=' | '<>' | 'and'
		//	| 'or' | 'xor' | 'implies';
		@Override public ParserRule getRule() { return rule; }
		
		//'*' | '/' | '+' | '-' | '>' | '<' | '>=' | '<=' | '=' | '<>' | 'and' | 'or' | 'xor' | 'implies'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_2() { return cPlusSignKeyword_2; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_3() { return cHyphenMinusKeyword_3; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
		
		//'<'
		public Keyword getLessThanSignKeyword_5() { return cLessThanSignKeyword_5; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_6() { return cGreaterThanSignEqualsSignKeyword_6; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_7() { return cLessThanSignEqualsSignKeyword_7; }
		
		//'='
		public Keyword getEqualsSignKeyword_8() { return cEqualsSignKeyword_8; }
		
		//'<>'
		public Keyword getLessThanSignGreaterThanSignKeyword_9() { return cLessThanSignGreaterThanSignKeyword_9; }
		
		//'and'
		public Keyword getAndKeyword_10() { return cAndKeyword_10; }
		
		//'or'
		public Keyword getOrKeyword_11() { return cOrKeyword_11; }
		
		//'xor'
		public Keyword getXorKeyword_12() { return cXorKeyword_12; }
		
		//'implies'
		public Keyword getImpliesKeyword_13() { return cImpliesKeyword_13; }
	}
	public class EssentialOCLNavigationOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.EssentialOCLNavigationOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EssentialOCLNavigationOperator:
		//	'.' | '->';
		@Override public ParserRule getRule() { return rule; }
		
		//'.' | '->'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'.'
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
	}
	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.StringLiteral");
		private final RuleCall cSINGLE_QUOTED_STRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//StringLiteral:
		//	SINGLE_QUOTED_STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//SINGLE_QUOTED_STRING
		public RuleCall getSINGLE_QUOTED_STRINGTerminalRuleCall() { return cSINGLE_QUOTED_STRINGTerminalRuleCall; }
	}
	public class PrefixOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.PrefixOperator");
		private final RuleCall cEssentialOCLPrefixOperatorParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PrefixOperator:
		//	EssentialOCLPrefixOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//EssentialOCLPrefixOperator
		public RuleCall getEssentialOCLPrefixOperatorParserRuleCall() { return cEssentialOCLPrefixOperatorParserRuleCall; }
	}
	public class InfixOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.InfixOperator");
		private final RuleCall cEssentialOCLInfixOperatorParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//InfixOperator:
		//	EssentialOCLInfixOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//EssentialOCLInfixOperator
		public RuleCall getEssentialOCLInfixOperatorParserRuleCall() { return cEssentialOCLInfixOperatorParserRuleCall; }
	}
	public class NavigationOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.NavigationOperator");
		private final RuleCall cEssentialOCLNavigationOperatorParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//NavigationOperator:
		//	EssentialOCLNavigationOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//EssentialOCLNavigationOperator
		public RuleCall getEssentialOCLNavigationOperatorParserRuleCall() { return cEssentialOCLNavigationOperatorParserRuleCall; }
	}
	public class CollectionTypeCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.CollectionTypeCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameCollectionTypeIdentifierParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cOwnedTypeAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cOwnedTypeTypeExpCSParserRuleCall_1_0_1_0 = (RuleCall)cOwnedTypeAssignment_1_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cOwnedTypeAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOwnedTypeTypeExpCSParserRuleCall_1_1_1_0 = (RuleCall)cOwnedTypeAssignment_1_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cBacktrackAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cBacktrackTrueKeyword_2_0 = (Keyword)cBacktrackAssignment_2.eContents().get(0);
		
		//CollectionTypeCS:
		//	name=CollectionTypeIdentifier ('(' ownedType=TypeExpCS ')' | '<' ownedType=TypeExpCS '>')?
		//	backtrack='true';
		@Override public ParserRule getRule() { return rule; }
		
		//name=CollectionTypeIdentifier ('(' ownedType=TypeExpCS ')' | '<' ownedType=TypeExpCS '>')? backtrack='true'
		public Group getGroup() { return cGroup; }
		
		//name=CollectionTypeIdentifier
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//CollectionTypeIdentifier
		public RuleCall getNameCollectionTypeIdentifierParserRuleCall_0_0() { return cNameCollectionTypeIdentifierParserRuleCall_0_0; }
		
		//('(' ownedType=TypeExpCS ')' | '<' ownedType=TypeExpCS '>')?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'(' ownedType=TypeExpCS ')'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0_0() { return cLeftParenthesisKeyword_1_0_0; }
		
		//ownedType=TypeExpCS
		public Assignment getOwnedTypeAssignment_1_0_1() { return cOwnedTypeAssignment_1_0_1; }
		
		//TypeExpCS
		public RuleCall getOwnedTypeTypeExpCSParserRuleCall_1_0_1_0() { return cOwnedTypeTypeExpCSParserRuleCall_1_0_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_0_2() { return cRightParenthesisKeyword_1_0_2; }
		
		//'<' ownedType=TypeExpCS '>'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_1_0() { return cLessThanSignKeyword_1_1_0; }
		
		//ownedType=TypeExpCS
		public Assignment getOwnedTypeAssignment_1_1_1() { return cOwnedTypeAssignment_1_1_1; }
		
		//TypeExpCS
		public RuleCall getOwnedTypeTypeExpCSParserRuleCall_1_1_1_0() { return cOwnedTypeTypeExpCSParserRuleCall_1_1_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_1_2() { return cGreaterThanSignKeyword_1_1_2; }
		
		//backtrack='true'
		public Assignment getBacktrackAssignment_2() { return cBacktrackAssignment_2; }
		
		//'true'
		public Keyword getBacktrackTrueKeyword_2_0() { return cBacktrackTrueKeyword_2_0; }
	}
	public class TupleTypeCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.TupleTypeCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameTupleKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Assignment cOwnedPartsAssignment_1_0_1_0 = (Assignment)cGroup_1_0_1.eContents().get(0);
		private final RuleCall cOwnedPartsTuplePartCSParserRuleCall_1_0_1_0_0 = (RuleCall)cOwnedPartsAssignment_1_0_1_0.eContents().get(0);
		private final Group cGroup_1_0_1_1 = (Group)cGroup_1_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_1_1_0 = (Keyword)cGroup_1_0_1_1.eContents().get(0);
		private final Assignment cOwnedPartsAssignment_1_0_1_1_1 = (Assignment)cGroup_1_0_1_1.eContents().get(1);
		private final RuleCall cOwnedPartsTuplePartCSParserRuleCall_1_0_1_1_1_0 = (RuleCall)cOwnedPartsAssignment_1_0_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Assignment cOwnedPartsAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cOwnedPartsTuplePartCSParserRuleCall_1_1_1_0_0 = (RuleCall)cOwnedPartsAssignment_1_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1_1 = (Group)cGroup_1_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_1_0 = (Keyword)cGroup_1_1_1_1.eContents().get(0);
		private final Assignment cOwnedPartsAssignment_1_1_1_1_1 = (Assignment)cGroup_1_1_1_1.eContents().get(1);
		private final RuleCall cOwnedPartsTuplePartCSParserRuleCall_1_1_1_1_1_0 = (RuleCall)cOwnedPartsAssignment_1_1_1_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cBacktrackAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cBacktrackTrueKeyword_2_0 = (Keyword)cBacktrackAssignment_2.eContents().get(0);
		
		//TupleTypeCS:
		//	name='Tuple' ('(' (ownedParts+=tuplePartCS (',' ownedParts+=tuplePartCS)*)? ')' | '<' (ownedParts+=tuplePartCS (','
		//	ownedParts+=tuplePartCS)*)? '>')?
		//	backtrack='true';
		@Override public ParserRule getRule() { return rule; }
		
		//name='Tuple' ('(' (ownedParts+=tuplePartCS (',' ownedParts+=tuplePartCS)*)? ')' | '<' (ownedParts+=tuplePartCS (','
		//ownedParts+=tuplePartCS)*)? '>')? backtrack='true'
		public Group getGroup() { return cGroup; }
		
		//name='Tuple'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'Tuple'
		public Keyword getNameTupleKeyword_0_0() { return cNameTupleKeyword_0_0; }
		
		//('(' (ownedParts+=tuplePartCS (',' ownedParts+=tuplePartCS)*)? ')' | '<' (ownedParts+=tuplePartCS (','
		//ownedParts+=tuplePartCS)*)? '>')?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'(' (ownedParts+=tuplePartCS (',' ownedParts+=tuplePartCS)*)? ')'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0_0() { return cLeftParenthesisKeyword_1_0_0; }
		
		//(ownedParts+=tuplePartCS (',' ownedParts+=tuplePartCS)*)?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//ownedParts+=tuplePartCS
		public Assignment getOwnedPartsAssignment_1_0_1_0() { return cOwnedPartsAssignment_1_0_1_0; }
		
		//tuplePartCS
		public RuleCall getOwnedPartsTuplePartCSParserRuleCall_1_0_1_0_0() { return cOwnedPartsTuplePartCSParserRuleCall_1_0_1_0_0; }
		
		//(',' ownedParts+=tuplePartCS)*
		public Group getGroup_1_0_1_1() { return cGroup_1_0_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_0_1_1_0() { return cCommaKeyword_1_0_1_1_0; }
		
		//ownedParts+=tuplePartCS
		public Assignment getOwnedPartsAssignment_1_0_1_1_1() { return cOwnedPartsAssignment_1_0_1_1_1; }
		
		//tuplePartCS
		public RuleCall getOwnedPartsTuplePartCSParserRuleCall_1_0_1_1_1_0() { return cOwnedPartsTuplePartCSParserRuleCall_1_0_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_0_2() { return cRightParenthesisKeyword_1_0_2; }
		
		//'<' (ownedParts+=tuplePartCS (',' ownedParts+=tuplePartCS)*)? '>'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_1_0() { return cLessThanSignKeyword_1_1_0; }
		
		//(ownedParts+=tuplePartCS (',' ownedParts+=tuplePartCS)*)?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//ownedParts+=tuplePartCS
		public Assignment getOwnedPartsAssignment_1_1_1_0() { return cOwnedPartsAssignment_1_1_1_0; }
		
		//tuplePartCS
		public RuleCall getOwnedPartsTuplePartCSParserRuleCall_1_1_1_0_0() { return cOwnedPartsTuplePartCSParserRuleCall_1_1_1_0_0; }
		
		//(',' ownedParts+=tuplePartCS)*
		public Group getGroup_1_1_1_1() { return cGroup_1_1_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_1_1_0() { return cCommaKeyword_1_1_1_1_0; }
		
		//ownedParts+=tuplePartCS
		public Assignment getOwnedPartsAssignment_1_1_1_1_1() { return cOwnedPartsAssignment_1_1_1_1_1; }
		
		//tuplePartCS
		public RuleCall getOwnedPartsTuplePartCSParserRuleCall_1_1_1_1_1_0() { return cOwnedPartsTuplePartCSParserRuleCall_1_1_1_1_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_1_2() { return cGreaterThanSignKeyword_1_1_2; }
		
		//backtrack='true'
		public Assignment getBacktrackAssignment_2() { return cBacktrackAssignment_2; }
		
		//'true'
		public Keyword getBacktrackTrueKeyword_2_0() { return cBacktrackTrueKeyword_2_0; }
	}
	public class TuplePartCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.tuplePartCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameUnrestrictedNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedTypeTypeExpCSParserRuleCall_2_0 = (RuleCall)cOwnedTypeAssignment_2.eContents().get(0);
		
		//tuplePartCS:
		//	name=UnrestrictedName ':' ownedType=TypeExpCS;
		@Override public ParserRule getRule() { return rule; }
		
		//name=UnrestrictedName ':' ownedType=TypeExpCS
		public Group getGroup() { return cGroup; }
		
		//name=UnrestrictedName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//UnrestrictedName
		public RuleCall getNameUnrestrictedNameParserRuleCall_0_0() { return cNameUnrestrictedNameParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//ownedType=TypeExpCS
		public Assignment getOwnedTypeAssignment_2() { return cOwnedTypeAssignment_2; }
		
		//TypeExpCS
		public RuleCall getOwnedTypeTypeExpCSParserRuleCall_2_0() { return cOwnedTypeTypeExpCSParserRuleCall_2_0; }
	}
	public class CollectionLiteralExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.CollectionLiteralExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedTypeCollectionTypeCSParserRuleCall_0_0 = (RuleCall)cOwnedTypeAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cOwnedPartsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cOwnedPartsCollectionLiteralPartCSParserRuleCall_2_0_0 = (RuleCall)cOwnedPartsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cOwnedPartsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cOwnedPartsCollectionLiteralPartCSParserRuleCall_2_1_1_0 = (RuleCall)cOwnedPartsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBacktrackAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cBacktrackTrueKeyword_4_0 = (Keyword)cBacktrackAssignment_4.eContents().get(0);
		
		//CollectionLiteralExpCS:
		//	ownedType=CollectionTypeCS
		//	'{' (ownedParts+=CollectionLiteralPartCS (',' ownedParts+=CollectionLiteralPartCS)*)? '}'
		//	backtrack="true";
		@Override public ParserRule getRule() { return rule; }
		
		//ownedType=CollectionTypeCS '{' (ownedParts+=CollectionLiteralPartCS (',' ownedParts+=CollectionLiteralPartCS)*)? '}'
		//backtrack="true"
		public Group getGroup() { return cGroup; }
		
		//ownedType=CollectionTypeCS
		public Assignment getOwnedTypeAssignment_0() { return cOwnedTypeAssignment_0; }
		
		//CollectionTypeCS
		public RuleCall getOwnedTypeCollectionTypeCSParserRuleCall_0_0() { return cOwnedTypeCollectionTypeCSParserRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(ownedParts+=CollectionLiteralPartCS (',' ownedParts+=CollectionLiteralPartCS)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//ownedParts+=CollectionLiteralPartCS
		public Assignment getOwnedPartsAssignment_2_0() { return cOwnedPartsAssignment_2_0; }
		
		//CollectionLiteralPartCS
		public RuleCall getOwnedPartsCollectionLiteralPartCSParserRuleCall_2_0_0() { return cOwnedPartsCollectionLiteralPartCSParserRuleCall_2_0_0; }
		
		//(',' ownedParts+=CollectionLiteralPartCS)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//ownedParts+=CollectionLiteralPartCS
		public Assignment getOwnedPartsAssignment_2_1_1() { return cOwnedPartsAssignment_2_1_1; }
		
		//CollectionLiteralPartCS
		public RuleCall getOwnedPartsCollectionLiteralPartCSParserRuleCall_2_1_1_0() { return cOwnedPartsCollectionLiteralPartCSParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
		
		//backtrack="true"
		public Assignment getBacktrackAssignment_4() { return cBacktrackAssignment_4; }
		
		//"true"
		public Keyword getBacktrackTrueKeyword_4_0() { return cBacktrackTrueKeyword_4_0; }
	}
	public class CollectionLiteralPartCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.CollectionLiteralPartCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionCSAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionCSExpCSParserRuleCall_0_0 = (RuleCall)cExpressionCSAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLastExpressionCSAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLastExpressionCSExpCSParserRuleCall_1_1_0 = (RuleCall)cLastExpressionCSAssignment_1_1.eContents().get(0);
		private final Assignment cBacktrackAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cBacktrackTrueKeyword_2_0 = (Keyword)cBacktrackAssignment_2.eContents().get(0);
		
		//CollectionLiteralPartCS:
		//	expressionCS=ExpCS ('..' lastExpressionCS=ExpCS)?
		//	backtrack="true";
		@Override public ParserRule getRule() { return rule; }
		
		//expressionCS=ExpCS ('..' lastExpressionCS=ExpCS)? backtrack="true"
		public Group getGroup() { return cGroup; }
		
		//expressionCS=ExpCS
		public Assignment getExpressionCSAssignment_0() { return cExpressionCSAssignment_0; }
		
		//ExpCS
		public RuleCall getExpressionCSExpCSParserRuleCall_0_0() { return cExpressionCSExpCSParserRuleCall_0_0; }
		
		//('..' lastExpressionCS=ExpCS)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1_0() { return cFullStopFullStopKeyword_1_0; }
		
		//lastExpressionCS=ExpCS
		public Assignment getLastExpressionCSAssignment_1_1() { return cLastExpressionCSAssignment_1_1; }
		
		//ExpCS
		public RuleCall getLastExpressionCSExpCSParserRuleCall_1_1_0() { return cLastExpressionCSExpCSParserRuleCall_1_1_0; }
		
		//backtrack="true"
		public Assignment getBacktrackAssignment_2() { return cBacktrackAssignment_2; }
		
		//"true"
		public Keyword getBacktrackTrueKeyword_2_0() { return cBacktrackTrueKeyword_2_0; }
	}
	public class PrimitiveLiteralExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.PrimitiveLiteralExpCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberLiteralExpCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringLiteralExpCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanLiteralExpCSParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cUnlimitedNaturalLiteralExpCSParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cInvalidLiteralExpCSParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cNullLiteralExpCSParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//PrimitiveLiteralExpCS:
		//	NumberLiteralExpCS | StringLiteralExpCS | BooleanLiteralExpCS
		//	| UnlimitedNaturalLiteralExpCS | InvalidLiteralExpCS | NullLiteralExpCS;
		@Override public ParserRule getRule() { return rule; }
		
		//NumberLiteralExpCS | StringLiteralExpCS | BooleanLiteralExpCS | UnlimitedNaturalLiteralExpCS | InvalidLiteralExpCS |
		//NullLiteralExpCS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NumberLiteralExpCS
		public RuleCall getNumberLiteralExpCSParserRuleCall_0() { return cNumberLiteralExpCSParserRuleCall_0; }
		
		//StringLiteralExpCS
		public RuleCall getStringLiteralExpCSParserRuleCall_1() { return cStringLiteralExpCSParserRuleCall_1; }
		
		//BooleanLiteralExpCS
		public RuleCall getBooleanLiteralExpCSParserRuleCall_2() { return cBooleanLiteralExpCSParserRuleCall_2; }
		
		//UnlimitedNaturalLiteralExpCS
		public RuleCall getUnlimitedNaturalLiteralExpCSParserRuleCall_3() { return cUnlimitedNaturalLiteralExpCSParserRuleCall_3; }
		
		//InvalidLiteralExpCS
		public RuleCall getInvalidLiteralExpCSParserRuleCall_4() { return cInvalidLiteralExpCSParserRuleCall_4; }
		
		//NullLiteralExpCS
		public RuleCall getNullLiteralExpCSParserRuleCall_5() { return cNullLiteralExpCSParserRuleCall_5; }
	}
	public class TupleLiteralExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.TupleLiteralExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTupleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedPartsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedPartsTupleLiteralPartCSParserRuleCall_2_0 = (RuleCall)cOwnedPartsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOwnedPartsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOwnedPartsTupleLiteralPartCSParserRuleCall_3_1_0 = (RuleCall)cOwnedPartsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TupleLiteralExpCS:
		//	'Tuple' '{' ownedParts+=TupleLiteralPartCS (','
		//	ownedParts+=TupleLiteralPartCS)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Tuple' '{' ownedParts+=TupleLiteralPartCS (',' ownedParts+=TupleLiteralPartCS)* '}'
		public Group getGroup() { return cGroup; }
		
		//'Tuple'
		public Keyword getTupleKeyword_0() { return cTupleKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//ownedParts+=TupleLiteralPartCS
		public Assignment getOwnedPartsAssignment_2() { return cOwnedPartsAssignment_2; }
		
		//TupleLiteralPartCS
		public RuleCall getOwnedPartsTupleLiteralPartCSParserRuleCall_2_0() { return cOwnedPartsTupleLiteralPartCSParserRuleCall_2_0; }
		
		//(',' ownedParts+=TupleLiteralPartCS)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//ownedParts+=TupleLiteralPartCS
		public Assignment getOwnedPartsAssignment_3_1() { return cOwnedPartsAssignment_3_1; }
		
		//TupleLiteralPartCS
		public RuleCall getOwnedPartsTupleLiteralPartCSParserRuleCall_3_1_0() { return cOwnedPartsTupleLiteralPartCSParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class TupleLiteralPartCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.TupleLiteralPartCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameUnrestrictedNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedTypeTypeExpCSParserRuleCall_1_1_0 = (RuleCall)cOwnedTypeAssignment_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInitExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInitExpressionExpCSParserRuleCall_3_0 = (RuleCall)cInitExpressionAssignment_3.eContents().get(0);
		
		//TupleLiteralPartCS:
		//	name=UnrestrictedName (':' ownedType=TypeExpCS)? '='
		//	initExpression=ExpCS;
		@Override public ParserRule getRule() { return rule; }
		
		//name=UnrestrictedName (':' ownedType=TypeExpCS)? '=' initExpression=ExpCS
		public Group getGroup() { return cGroup; }
		
		//name=UnrestrictedName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//UnrestrictedName
		public RuleCall getNameUnrestrictedNameParserRuleCall_0_0() { return cNameUnrestrictedNameParserRuleCall_0_0; }
		
		//(':' ownedType=TypeExpCS)?
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//ownedType=TypeExpCS
		public Assignment getOwnedTypeAssignment_1_1() { return cOwnedTypeAssignment_1_1; }
		
		//TypeExpCS
		public RuleCall getOwnedTypeTypeExpCSParserRuleCall_1_1_0() { return cOwnedTypeTypeExpCSParserRuleCall_1_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//initExpression=ExpCS
		public Assignment getInitExpressionAssignment_3() { return cInitExpressionAssignment_3; }
		
		//ExpCS
		public RuleCall getInitExpressionExpCSParserRuleCall_3_0() { return cInitExpressionExpCSParserRuleCall_3_0; }
	}
	public class NumberLiteralExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.NumberLiteralExpCS");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameBIG_INTTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//NumberLiteralExpCS:
		//	name=BIG_INT;
		@Override public ParserRule getRule() { return rule; }
		
		//name=BIG_INT
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//BIG_INT
		public RuleCall getNameBIG_INTTerminalRuleCall_0() { return cNameBIG_INTTerminalRuleCall_0; }
	}
	public class StringLiteralExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.StringLiteralExpCS");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameStringLiteralParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//StringLiteralExpCS:
		//	name+=StringLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//name+=StringLiteral
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//StringLiteral
		public RuleCall getNameStringLiteralParserRuleCall_0() { return cNameStringLiteralParserRuleCall_0; }
	}
	public class BooleanLiteralExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.BooleanLiteralExpCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cNameTrueKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cNameFalseKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		
		//BooleanLiteralExpCS:
		//	name='true' | name='false';
		@Override public ParserRule getRule() { return rule; }
		
		//name='true' | name='false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name='true'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'true'
		public Keyword getNameTrueKeyword_0_0() { return cNameTrueKeyword_0_0; }
		
		//name='false'
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//'false'
		public Keyword getNameFalseKeyword_1_0() { return cNameFalseKeyword_1_0; }
	}
	public class UnlimitedNaturalLiteralExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.UnlimitedNaturalLiteralExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnlimitedNaturalLiteralExpCSAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//UnlimitedNaturalLiteralExpCS:
		//	{UnlimitedNaturalLiteralExpCS} '*';
		@Override public ParserRule getRule() { return rule; }
		
		//{UnlimitedNaturalLiteralExpCS} '*'
		public Group getGroup() { return cGroup; }
		
		//{UnlimitedNaturalLiteralExpCS}
		public Action getUnlimitedNaturalLiteralExpCSAction_0() { return cUnlimitedNaturalLiteralExpCSAction_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}
	public class InvalidLiteralExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.InvalidLiteralExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInvalidLiteralExpCSAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInvalidKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//InvalidLiteralExpCS:
		//	{InvalidLiteralExpCS} 'invalid';
		@Override public ParserRule getRule() { return rule; }
		
		//{InvalidLiteralExpCS} 'invalid'
		public Group getGroup() { return cGroup; }
		
		//{InvalidLiteralExpCS}
		public Action getInvalidLiteralExpCSAction_0() { return cInvalidLiteralExpCSAction_0; }
		
		//'invalid'
		public Keyword getInvalidKeyword_1() { return cInvalidKeyword_1; }
	}
	public class NullLiteralExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.NullLiteralExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNullLiteralExpCSAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NullLiteralExpCS:
		//	{NullLiteralExpCS} 'null';
		@Override public ParserRule getRule() { return rule; }
		
		//{NullLiteralExpCS} 'null'
		public Group getGroup() { return cGroup; }
		
		//{NullLiteralExpCS}
		public Action getNullLiteralExpCSAction_0() { return cNullLiteralExpCSAction_0; }
		
		//'null'
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}
	public class PrimitiveTypeCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.PrimitiveTypeCS");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNamePrimitiveTypeIdentifierParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//PrimitiveTypeCS:
		//	name=PrimitiveTypeIdentifier;
		@Override public ParserRule getRule() { return rule; }
		
		//name=PrimitiveTypeIdentifier
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//PrimitiveTypeIdentifier
		public RuleCall getNamePrimitiveTypeIdentifierParserRuleCall_0() { return cNamePrimitiveTypeIdentifierParserRuleCall_0; }
	}
	public class TypeLiteralCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.TypeLiteralCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveTypeCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTupleTypeCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCollectionTypeCSParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TypeLiteralCS:
		//	PrimitiveTypeCS | TupleTypeCS | CollectionTypeCS;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimitiveTypeCS | TupleTypeCS | CollectionTypeCS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimitiveTypeCS
		public RuleCall getPrimitiveTypeCSParserRuleCall_0() { return cPrimitiveTypeCSParserRuleCall_0; }
		
		//TupleTypeCS
		public RuleCall getTupleTypeCSParserRuleCall_1() { return cTupleTypeCSParserRuleCall_1; }
		
		//CollectionTypeCS
		public RuleCall getCollectionTypeCSParserRuleCall_2() { return cCollectionTypeCSParserRuleCall_2; }
	}
	public class TypeLiteralExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.TypeLiteralExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedTypeTypeLiteralCSParserRuleCall_0_0 = (RuleCall)cOwnedTypeAssignment_0.eContents().get(0);
		private final Assignment cBacktrackAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cBacktrackTrueKeyword_1_0 = (Keyword)cBacktrackAssignment_1.eContents().get(0);
		
		//TypeLiteralExpCS:
		//	ownedType=TypeLiteralCS
		//	backtrack="true";
		@Override public ParserRule getRule() { return rule; }
		
		//ownedType=TypeLiteralCS backtrack="true"
		public Group getGroup() { return cGroup; }
		
		//ownedType=TypeLiteralCS
		public Assignment getOwnedTypeAssignment_0() { return cOwnedTypeAssignment_0; }
		
		//TypeLiteralCS
		public RuleCall getOwnedTypeTypeLiteralCSParserRuleCall_0_0() { return cOwnedTypeTypeLiteralCSParserRuleCall_0_0; }
		
		//backtrack="true"
		public Assignment getBacktrackAssignment_1() { return cBacktrackAssignment_1; }
		
		//"true"
		public Keyword getBacktrackTrueKeyword_1_0() { return cBacktrackTrueKeyword_1_0; }
	}
	public class TypeNameExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.TypeNameExpCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Assignment cNamespaceAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cNamespaceUnrestrictedNameParserRuleCall_0_0_0_0 = (RuleCall)cNamespaceAssignment_0_0_0.eContents().get(0);
		private final Keyword cColonColonKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_0_2 = (Group)cGroup_0_0.eContents().get(2);
		private final Assignment cNamespaceAssignment_0_0_2_0 = (Assignment)cGroup_0_0_2.eContents().get(0);
		private final RuleCall cNamespaceUnreservedNameParserRuleCall_0_0_2_0_0 = (RuleCall)cNamespaceAssignment_0_0_2_0.eContents().get(0);
		private final Keyword cColonColonKeyword_0_0_2_1 = (Keyword)cGroup_0_0_2.eContents().get(1);
		private final Assignment cElementAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cElementUnreservedNameParserRuleCall_0_1_0 = (RuleCall)cElementAssignment_0_1.eContents().get(0);
		private final Assignment cElementAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cElementUnrestrictedNameParserRuleCall_1_0 = (RuleCall)cElementAssignment_1.eContents().get(0);
		
		//TypeNameExpCS:
		//	(namespace+=UnrestrictedName '::' (namespace+=UnreservedName '::')*) element=UnreservedName |
		//	element=UnrestrictedName;
		@Override public ParserRule getRule() { return rule; }
		
		//(namespace+=UnrestrictedName '::' (namespace+=UnreservedName '::')*) element=UnreservedName | element=UnrestrictedName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(namespace+=UnrestrictedName '::' (namespace+=UnreservedName '::')*) element=UnreservedName
		public Group getGroup_0() { return cGroup_0; }
		
		//namespace+=UnrestrictedName '::' (namespace+=UnreservedName '::')*
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//namespace+=UnrestrictedName
		public Assignment getNamespaceAssignment_0_0_0() { return cNamespaceAssignment_0_0_0; }
		
		//UnrestrictedName
		public RuleCall getNamespaceUnrestrictedNameParserRuleCall_0_0_0_0() { return cNamespaceUnrestrictedNameParserRuleCall_0_0_0_0; }
		
		//'::'
		public Keyword getColonColonKeyword_0_0_1() { return cColonColonKeyword_0_0_1; }
		
		//(namespace+=UnreservedName '::')*
		public Group getGroup_0_0_2() { return cGroup_0_0_2; }
		
		//namespace+=UnreservedName
		public Assignment getNamespaceAssignment_0_0_2_0() { return cNamespaceAssignment_0_0_2_0; }
		
		//UnreservedName
		public RuleCall getNamespaceUnreservedNameParserRuleCall_0_0_2_0_0() { return cNamespaceUnreservedNameParserRuleCall_0_0_2_0_0; }
		
		//'::'
		public Keyword getColonColonKeyword_0_0_2_1() { return cColonColonKeyword_0_0_2_1; }
		
		//element=UnreservedName
		public Assignment getElementAssignment_0_1() { return cElementAssignment_0_1; }
		
		//UnreservedName
		public RuleCall getElementUnreservedNameParserRuleCall_0_1_0() { return cElementUnreservedNameParserRuleCall_0_1_0; }
		
		//element=UnrestrictedName
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }
		
		//UnrestrictedName
		public RuleCall getElementUnrestrictedNameParserRuleCall_1_0() { return cElementUnrestrictedNameParserRuleCall_1_0; }
	}
	public class TypeExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.TypeExpCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeNameExpCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeLiteralCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeExpCS:
		//	TypeNameExpCS | TypeLiteralCS;
		@Override public ParserRule getRule() { return rule; }
		
		//TypeNameExpCS | TypeLiteralCS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TypeNameExpCS
		public RuleCall getTypeNameExpCSParserRuleCall_0() { return cTypeNameExpCSParserRuleCall_0; }
		
		//TypeLiteralCS
		public RuleCall getTypeLiteralCSParserRuleCall_1() { return cTypeLiteralCSParserRuleCall_1; }
	}
	public class NavigatingArgCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.NavigatingArgCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNavigatingArgExpCSParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedTypeTypeExpCSParserRuleCall_1_1_0 = (RuleCall)cOwnedTypeAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInitAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInitExpCSParserRuleCall_2_1_0 = (RuleCall)cInitAssignment_2_1.eContents().get(0);
		
		//NavigatingArgCS:
		//	name=NavigatingArgExpCS (':' ownedType=TypeExpCS)? ('=' init=ExpCS)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=NavigatingArgExpCS (':' ownedType=TypeExpCS)? ('=' init=ExpCS)?
		public Group getGroup() { return cGroup; }
		
		//name=NavigatingArgExpCS
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//NavigatingArgExpCS
		public RuleCall getNameNavigatingArgExpCSParserRuleCall_0_0() { return cNameNavigatingArgExpCSParserRuleCall_0_0; }
		
		//(':' ownedType=TypeExpCS)?
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//ownedType=TypeExpCS
		public Assignment getOwnedTypeAssignment_1_1() { return cOwnedTypeAssignment_1_1; }
		
		//TypeExpCS
		public RuleCall getOwnedTypeTypeExpCSParserRuleCall_1_1_0() { return cOwnedTypeTypeExpCSParserRuleCall_1_1_0; }
		
		//('=' init=ExpCS)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//init=ExpCS
		public Assignment getInitAssignment_2_1() { return cInitAssignment_2_1; }
		
		//ExpCS
		public RuleCall getInitExpCSParserRuleCall_2_1_0() { return cInitExpCSParserRuleCall_2_1_0; }
	}
	public class NavigatingBarArgCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.NavigatingBarArgCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrefixAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPrefixVerticalLineKeyword_0_0 = (Keyword)cPrefixAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNavigatingArgExpCSParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOwnedTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOwnedTypeTypeExpCSParserRuleCall_2_1_0 = (RuleCall)cOwnedTypeAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInitAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInitExpCSParserRuleCall_3_1_0 = (RuleCall)cInitAssignment_3_1.eContents().get(0);
		
		//NavigatingBarArgCS:
		//	prefix='|' name=NavigatingArgExpCS (':' ownedType=TypeExpCS)? ('=' init=ExpCS)?;
		@Override public ParserRule getRule() { return rule; }
		
		//prefix='|' name=NavigatingArgExpCS (':' ownedType=TypeExpCS)? ('=' init=ExpCS)?
		public Group getGroup() { return cGroup; }
		
		//prefix='|'
		public Assignment getPrefixAssignment_0() { return cPrefixAssignment_0; }
		
		//'|'
		public Keyword getPrefixVerticalLineKeyword_0_0() { return cPrefixVerticalLineKeyword_0_0; }
		
		//name=NavigatingArgExpCS
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//NavigatingArgExpCS
		public RuleCall getNameNavigatingArgExpCSParserRuleCall_1_0() { return cNameNavigatingArgExpCSParserRuleCall_1_0; }
		
		//(':' ownedType=TypeExpCS)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//ownedType=TypeExpCS
		public Assignment getOwnedTypeAssignment_2_1() { return cOwnedTypeAssignment_2_1; }
		
		//TypeExpCS
		public RuleCall getOwnedTypeTypeExpCSParserRuleCall_2_1_0() { return cOwnedTypeTypeExpCSParserRuleCall_2_1_0; }
		
		//('=' init=ExpCS)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//init=ExpCS
		public Assignment getInitAssignment_3_1() { return cInitAssignment_3_1; }
		
		//ExpCS
		public RuleCall getInitExpCSParserRuleCall_3_1_0() { return cInitExpCSParserRuleCall_3_1_0; }
	}
	public class NavigatingCommaArgCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.NavigatingCommaArgCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrefixAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPrefixCommaKeyword_0_0 = (Keyword)cPrefixAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNavigatingArgExpCSParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOwnedTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOwnedTypeTypeExpCSParserRuleCall_2_1_0 = (RuleCall)cOwnedTypeAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInitAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInitExpCSParserRuleCall_3_1_0 = (RuleCall)cInitAssignment_3_1.eContents().get(0);
		
		//NavigatingCommaArgCS:
		//	prefix=',' name=NavigatingArgExpCS (':' ownedType=TypeExpCS)? ('=' init=ExpCS)?;
		@Override public ParserRule getRule() { return rule; }
		
		//prefix=',' name=NavigatingArgExpCS (':' ownedType=TypeExpCS)? ('=' init=ExpCS)?
		public Group getGroup() { return cGroup; }
		
		//prefix=','
		public Assignment getPrefixAssignment_0() { return cPrefixAssignment_0; }
		
		//','
		public Keyword getPrefixCommaKeyword_0_0() { return cPrefixCommaKeyword_0_0; }
		
		//name=NavigatingArgExpCS
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//NavigatingArgExpCS
		public RuleCall getNameNavigatingArgExpCSParserRuleCall_1_0() { return cNameNavigatingArgExpCSParserRuleCall_1_0; }
		
		//(':' ownedType=TypeExpCS)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//ownedType=TypeExpCS
		public Assignment getOwnedTypeAssignment_2_1() { return cOwnedTypeAssignment_2_1; }
		
		//TypeExpCS
		public RuleCall getOwnedTypeTypeExpCSParserRuleCall_2_1_0() { return cOwnedTypeTypeExpCSParserRuleCall_2_1_0; }
		
		//('=' init=ExpCS)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//init=ExpCS
		public Assignment getInitAssignment_3_1() { return cInitAssignment_3_1; }
		
		//ExpCS
		public RuleCall getInitExpCSParserRuleCall_3_1_0() { return cInitExpCSParserRuleCall_3_1_0; }
	}
	public class NavigatingSemiArgCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.NavigatingSemiArgCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrefixAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPrefixSemicolonKeyword_0_0 = (Keyword)cPrefixAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNavigatingArgExpCSParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOwnedTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOwnedTypeTypeExpCSParserRuleCall_2_1_0 = (RuleCall)cOwnedTypeAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInitAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInitExpCSParserRuleCall_3_1_0 = (RuleCall)cInitAssignment_3_1.eContents().get(0);
		
		//NavigatingSemiArgCS:
		//	prefix=';' name=NavigatingArgExpCS (':' ownedType=TypeExpCS)? ('=' init=ExpCS)?;
		@Override public ParserRule getRule() { return rule; }
		
		//prefix=';' name=NavigatingArgExpCS (':' ownedType=TypeExpCS)? ('=' init=ExpCS)?
		public Group getGroup() { return cGroup; }
		
		//prefix=';'
		public Assignment getPrefixAssignment_0() { return cPrefixAssignment_0; }
		
		//';'
		public Keyword getPrefixSemicolonKeyword_0_0() { return cPrefixSemicolonKeyword_0_0; }
		
		//name=NavigatingArgExpCS
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//NavigatingArgExpCS
		public RuleCall getNameNavigatingArgExpCSParserRuleCall_1_0() { return cNameNavigatingArgExpCSParserRuleCall_1_0; }
		
		//(':' ownedType=TypeExpCS)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//ownedType=TypeExpCS
		public Assignment getOwnedTypeAssignment_2_1() { return cOwnedTypeAssignment_2_1; }
		
		//TypeExpCS
		public RuleCall getOwnedTypeTypeExpCSParserRuleCall_2_1_0() { return cOwnedTypeTypeExpCSParserRuleCall_2_1_0; }
		
		//('=' init=ExpCS)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//init=ExpCS
		public Assignment getInitAssignment_3_1() { return cInitAssignment_3_1; }
		
		//ExpCS
		public RuleCall getInitExpCSParserRuleCall_3_1_0() { return cInitExpCSParserRuleCall_3_1_0; }
	}
	public class NavigatingArgExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.NavigatingArgExpCS");
		private final RuleCall cExpCSParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//NavigatingArgExpCS ExpCS:
		//	ExpCS;
		@Override public ParserRule getRule() { return rule; }
		
		//ExpCS
		public RuleCall getExpCSParserRuleCall() { return cExpCSParserRuleCall; }
	}
	public class IfExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.IfExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExpCSParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenExpressionExpCSParserRuleCall_3_0 = (RuleCall)cThenExpressionAssignment_3.eContents().get(0);
		private final Keyword cElseKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cElseExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElseExpressionExpCSParserRuleCall_5_0 = (RuleCall)cElseExpressionAssignment_5.eContents().get(0);
		private final Keyword cEndifKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//IfExpCS:
		//	'if' condition=ExpCS
		//	'then' thenExpression=ExpCS
		//	'else' elseExpression=ExpCS
		//	'endif';
		@Override public ParserRule getRule() { return rule; }
		
		//'if' condition=ExpCS 'then' thenExpression=ExpCS 'else' elseExpression=ExpCS 'endif'
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//condition=ExpCS
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//ExpCS
		public RuleCall getConditionExpCSParserRuleCall_1_0() { return cConditionExpCSParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//thenExpression=ExpCS
		public Assignment getThenExpressionAssignment_3() { return cThenExpressionAssignment_3; }
		
		//ExpCS
		public RuleCall getThenExpressionExpCSParserRuleCall_3_0() { return cThenExpressionExpCSParserRuleCall_3_0; }
		
		//'else'
		public Keyword getElseKeyword_4() { return cElseKeyword_4; }
		
		//elseExpression=ExpCS
		public Assignment getElseExpressionAssignment_5() { return cElseExpressionAssignment_5; }
		
		//ExpCS
		public RuleCall getElseExpressionExpCSParserRuleCall_5_0() { return cElseExpressionExpCSParserRuleCall_5_0; }
		
		//'endif'
		public Keyword getEndifKeyword_6() { return cEndifKeyword_6; }
	}
	public class LetExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.LetExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableLetVariableCSParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariableAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariableLetVariableCSParserRuleCall_2_1_0 = (RuleCall)cVariableAssignment_2_1.eContents().get(0);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInExpCSParserRuleCall_4_0 = (RuleCall)cInAssignment_4.eContents().get(0);
		
		//LetExpCS:
		//	'let' variable+=LetVariableCS (',' variable+=LetVariableCS)*
		//	'in' in=ExpCS;
		@Override public ParserRule getRule() { return rule; }
		
		//'let' variable+=LetVariableCS (',' variable+=LetVariableCS)* 'in' in=ExpCS
		public Group getGroup() { return cGroup; }
		
		//'let'
		public Keyword getLetKeyword_0() { return cLetKeyword_0; }
		
		//variable+=LetVariableCS
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//LetVariableCS
		public RuleCall getVariableLetVariableCSParserRuleCall_1_0() { return cVariableLetVariableCSParserRuleCall_1_0; }
		
		//(',' variable+=LetVariableCS)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//variable+=LetVariableCS
		public Assignment getVariableAssignment_2_1() { return cVariableAssignment_2_1; }
		
		//LetVariableCS
		public RuleCall getVariableLetVariableCSParserRuleCall_2_1_0() { return cVariableLetVariableCSParserRuleCall_2_1_0; }
		
		//'in'
		public Keyword getInKeyword_3() { return cInKeyword_3; }
		
		//in=ExpCS
		public Assignment getInAssignment_4() { return cInAssignment_4; }
		
		//ExpCS
		public RuleCall getInExpCSParserRuleCall_4_0() { return cInExpCSParserRuleCall_4_0; }
	}
	public class LetVariableCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.LetVariableCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameUnrestrictedNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedTypeTypeExpCSParserRuleCall_1_1_0 = (RuleCall)cOwnedTypeAssignment_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInitExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInitExpressionExpCSParserRuleCall_3_0 = (RuleCall)cInitExpressionAssignment_3.eContents().get(0);
		
		//LetVariableCS:
		//	name=UnrestrictedName (':' ownedType=TypeExpCS)? '='
		//	initExpression=ExpCS;
		@Override public ParserRule getRule() { return rule; }
		
		//name=UnrestrictedName (':' ownedType=TypeExpCS)? '=' initExpression=ExpCS
		public Group getGroup() { return cGroup; }
		
		//name=UnrestrictedName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//UnrestrictedName
		public RuleCall getNameUnrestrictedNameParserRuleCall_0_0() { return cNameUnrestrictedNameParserRuleCall_0_0; }
		
		//(':' ownedType=TypeExpCS)?
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//ownedType=TypeExpCS
		public Assignment getOwnedTypeAssignment_1_1() { return cOwnedTypeAssignment_1_1; }
		
		//TypeExpCS
		public RuleCall getOwnedTypeTypeExpCSParserRuleCall_1_1_0() { return cOwnedTypeTypeExpCSParserRuleCall_1_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//initExpression=ExpCS
		public Assignment getInitExpressionAssignment_3() { return cInitExpressionAssignment_3; }
		
		//ExpCS
		public RuleCall getInitExpressionExpCSParserRuleCall_3_0() { return cInitExpressionExpCSParserRuleCall_3_0; }
	}
	public class NestedExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.NestedExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSourceExpCSParserRuleCall_1_0 = (RuleCall)cSourceAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//NestedExpCS:
		//	'(' source=ExpCS ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' source=ExpCS ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//source=ExpCS
		public Assignment getSourceAssignment_1() { return cSourceAssignment_1; }
		
		//ExpCS
		public RuleCall getSourceExpCSParserRuleCall_1_0() { return cSourceExpCSParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class SelfExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.SelfExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSelfExpCSAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSelfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SelfExpCS:
		//	{SelfExpCS} 'self';
		@Override public ParserRule getRule() { return rule; }
		
		//{SelfExpCS} 'self'
		public Group getGroup() { return cGroup; }
		
		//{SelfExpCS}
		public Action getSelfExpCSAction_0() { return cSelfExpCSAction_0; }
		
		//'self'
		public Keyword getSelfKeyword_1() { return cSelfKeyword_1; }
	}
	public class PrimaryExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.PrimaryExpCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNavigatingExpCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSelfExpCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPrimitiveLiteralExpCSParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTupleLiteralExpCSParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLetExpCSParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cIfExpCSParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cNestedExpCSParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		////regola incompleta mancano i tipi 4 e 5 (vedere sotto)
		//PrimaryExpCS:
		//	NavigatingExpCS | SelfExpCS | PrimitiveLiteralExpCS | TupleLiteralExpCS | LetExpCS | IfExpCS | NestedExpCS;
		@Override public ParserRule getRule() { return rule; }
		
		//NavigatingExpCS | SelfExpCS | PrimitiveLiteralExpCS | TupleLiteralExpCS | LetExpCS | IfExpCS | NestedExpCS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NavigatingExpCS
		public RuleCall getNavigatingExpCSParserRuleCall_0() { return cNavigatingExpCSParserRuleCall_0; }
		
		//SelfExpCS
		public RuleCall getSelfExpCSParserRuleCall_1() { return cSelfExpCSParserRuleCall_1; }
		
		//PrimitiveLiteralExpCS
		public RuleCall getPrimitiveLiteralExpCSParserRuleCall_2() { return cPrimitiveLiteralExpCSParserRuleCall_2; }
		
		//TupleLiteralExpCS
		public RuleCall getTupleLiteralExpCSParserRuleCall_3() { return cTupleLiteralExpCSParserRuleCall_3; }
		
		//LetExpCS
		public RuleCall getLetExpCSParserRuleCall_4() { return cLetExpCSParserRuleCall_4; }
		
		//IfExpCS
		public RuleCall getIfExpCSParserRuleCall_5() { return cIfExpCSParserRuleCall_5; }
		
		//NestedExpCS
		public RuleCall getNestedExpCSParserRuleCall_6() { return cNestedExpCSParserRuleCall_6; }
	}
	public class NameExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.NameExpCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Assignment cNamespaceAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cNamespaceUnrestrictedNameParserRuleCall_0_0_0_0 = (RuleCall)cNamespaceAssignment_0_0_0.eContents().get(0);
		private final Keyword cColonColonKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_0_2 = (Group)cGroup_0_0.eContents().get(2);
		private final Assignment cNamespaceAssignment_0_0_2_0 = (Assignment)cGroup_0_0_2.eContents().get(0);
		private final RuleCall cNamespaceUnreservedNameParserRuleCall_0_0_2_0_0 = (RuleCall)cNamespaceAssignment_0_0_2_0.eContents().get(0);
		private final Keyword cColonColonKeyword_0_0_2_1 = (Keyword)cGroup_0_0_2.eContents().get(1);
		private final Assignment cElementAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cElementUnreservedNameParserRuleCall_0_1_0 = (RuleCall)cElementAssignment_0_1.eContents().get(0);
		private final Assignment cElementAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cElementUnrestrictedNameParserRuleCall_1_0 = (RuleCall)cElementAssignment_1.eContents().get(0);
		
		////regola ricorsiva da sistemare
		///* 
		//PrimaryExpCS:
		//	NavigatingExpCS | SelfExpCS | PrimitiveLiteralExpCS | TupleLiteralExpCS |
		//	CollectionLiteralExpCS | TypeLiteralExpCS | LetExpCS | IfExpCS | NestedExpCS
		//		;*/ NameExpCS:
		//	(namespace+=UnrestrictedName '::' (namespace+=UnreservedName '::')*) element=UnreservedName |
		//	element=UnrestrictedName;
		@Override public ParserRule getRule() { return rule; }
		
		//(namespace+=UnrestrictedName '::' (namespace+=UnreservedName '::')*) element=UnreservedName | element=UnrestrictedName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(namespace+=UnrestrictedName '::' (namespace+=UnreservedName '::')*) element=UnreservedName
		public Group getGroup_0() { return cGroup_0; }
		
		//namespace+=UnrestrictedName '::' (namespace+=UnreservedName '::')*
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//namespace+=UnrestrictedName
		public Assignment getNamespaceAssignment_0_0_0() { return cNamespaceAssignment_0_0_0; }
		
		//UnrestrictedName
		public RuleCall getNamespaceUnrestrictedNameParserRuleCall_0_0_0_0() { return cNamespaceUnrestrictedNameParserRuleCall_0_0_0_0; }
		
		//'::'
		public Keyword getColonColonKeyword_0_0_1() { return cColonColonKeyword_0_0_1; }
		
		//(namespace+=UnreservedName '::')*
		public Group getGroup_0_0_2() { return cGroup_0_0_2; }
		
		//namespace+=UnreservedName
		public Assignment getNamespaceAssignment_0_0_2_0() { return cNamespaceAssignment_0_0_2_0; }
		
		//UnreservedName
		public RuleCall getNamespaceUnreservedNameParserRuleCall_0_0_2_0_0() { return cNamespaceUnreservedNameParserRuleCall_0_0_2_0_0; }
		
		//'::'
		public Keyword getColonColonKeyword_0_0_2_1() { return cColonColonKeyword_0_0_2_1; }
		
		//element=UnreservedName
		public Assignment getElementAssignment_0_1() { return cElementAssignment_0_1; }
		
		//UnreservedName
		public RuleCall getElementUnreservedNameParserRuleCall_0_1_0() { return cElementUnreservedNameParserRuleCall_0_1_0; }
		
		//element=UnrestrictedName
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }
		
		//UnrestrictedName
		public RuleCall getElementUnrestrictedNameParserRuleCall_1_0() { return cElementUnrestrictedNameParserRuleCall_1_0; }
	}
	public class ExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.ExpCS");
		private final RuleCall cInfixedExpCSParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ExpCS:
		//	InfixedExpCS;
		@Override public ParserRule getRule() { return rule; }
		
		//InfixedExpCS
		public RuleCall getInfixedExpCSParserRuleCall() { return cInfixedExpCSParserRuleCall; }
	}
	public class InfixedExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.InfixedExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrefixedExpCSParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cInfixExpCSOwnedExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOwnedOperatorAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOwnedOperatorBinaryOperatorCSParserRuleCall_1_1_0_0 = (RuleCall)cOwnedOperatorAssignment_1_1_0.eContents().get(0);
		private final Assignment cOwnedExpressionAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOwnedExpressionPrefixedExpCSParserRuleCall_1_1_1_0 = (RuleCall)cOwnedExpressionAssignment_1_1_1.eContents().get(0);
		
		//InfixedExpCS:
		//	PrefixedExpCS ({InfixExpCS.ownedExpression+=current} (ownedOperator+=BinaryOperatorCS
		//	ownedExpression+=PrefixedExpCS)+)?;
		@Override public ParserRule getRule() { return rule; }
		
		//PrefixedExpCS ({InfixExpCS.ownedExpression+=current} (ownedOperator+=BinaryOperatorCS ownedExpression+=PrefixedExpCS)+)?
		public Group getGroup() { return cGroup; }
		
		//PrefixedExpCS
		public RuleCall getPrefixedExpCSParserRuleCall_0() { return cPrefixedExpCSParserRuleCall_0; }
		
		//({InfixExpCS.ownedExpression+=current} (ownedOperator+=BinaryOperatorCS ownedExpression+=PrefixedExpCS)+)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{InfixExpCS.ownedExpression+=current}
		public Action getInfixExpCSOwnedExpressionAction_1_0() { return cInfixExpCSOwnedExpressionAction_1_0; }
		
		//(ownedOperator+=BinaryOperatorCS ownedExpression+=PrefixedExpCS)+
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//ownedOperator+=BinaryOperatorCS
		public Assignment getOwnedOperatorAssignment_1_1_0() { return cOwnedOperatorAssignment_1_1_0; }
		
		//BinaryOperatorCS
		public RuleCall getOwnedOperatorBinaryOperatorCSParserRuleCall_1_1_0_0() { return cOwnedOperatorBinaryOperatorCSParserRuleCall_1_1_0_0; }
		
		//ownedExpression+=PrefixedExpCS
		public Assignment getOwnedExpressionAssignment_1_1_1() { return cOwnedExpressionAssignment_1_1_1; }
		
		//PrefixedExpCS
		public RuleCall getOwnedExpressionPrefixedExpCSParserRuleCall_1_1_1_0() { return cOwnedExpressionPrefixedExpCSParserRuleCall_1_1_1_0; }
	}
	public class BinaryOperatorCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.BinaryOperatorCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInfixOperatorCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNavigationOperatorCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BinaryOperatorCS:
		//	InfixOperatorCS | NavigationOperatorCS;
		@Override public ParserRule getRule() { return rule; }
		
		//InfixOperatorCS | NavigationOperatorCS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//InfixOperatorCS
		public RuleCall getInfixOperatorCSParserRuleCall_0() { return cInfixOperatorCSParserRuleCall_0; }
		
		//NavigationOperatorCS
		public RuleCall getNavigationOperatorCSParserRuleCall_1() { return cNavigationOperatorCSParserRuleCall_1; }
	}
	public class InfixOperatorCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.InfixOperatorCS");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameInfixOperatorParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//InfixOperatorCS:
		//	name=InfixOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//name=InfixOperator
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//InfixOperator
		public RuleCall getNameInfixOperatorParserRuleCall_0() { return cNameInfixOperatorParserRuleCall_0; }
	}
	public class NavigationOperatorCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.NavigationOperatorCS");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameNavigationOperatorParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//NavigationOperatorCS:
		//	name=NavigationOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//name=NavigationOperator
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//NavigationOperator
		public RuleCall getNameNavigationOperatorParserRuleCall_0() { return cNameNavigationOperatorParserRuleCall_0; }
	}
	public class PrefixedExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.PrefixedExpCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimaryExpCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cPrefixExpCSAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOwnedOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedOperatorUnaryOperatorCSParserRuleCall_1_1_0 = (RuleCall)cOwnedOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOwnedExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOwnedExpressionPrimaryExpCSParserRuleCall_1_2_0 = (RuleCall)cOwnedExpressionAssignment_1_2.eContents().get(0);
		
		//PrefixedExpCS:
		//	PrimaryExpCS | {PrefixExpCS} ownedOperator+=UnaryOperatorCS+
		//	ownedExpression=PrimaryExpCS;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpCS | {PrefixExpCS} ownedOperator+=UnaryOperatorCS+ ownedExpression=PrimaryExpCS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimaryExpCS
		public RuleCall getPrimaryExpCSParserRuleCall_0() { return cPrimaryExpCSParserRuleCall_0; }
		
		//{PrefixExpCS} ownedOperator+=UnaryOperatorCS+ ownedExpression=PrimaryExpCS
		public Group getGroup_1() { return cGroup_1; }
		
		//{PrefixExpCS}
		public Action getPrefixExpCSAction_1_0() { return cPrefixExpCSAction_1_0; }
		
		//ownedOperator+=UnaryOperatorCS+
		public Assignment getOwnedOperatorAssignment_1_1() { return cOwnedOperatorAssignment_1_1; }
		
		//UnaryOperatorCS
		public RuleCall getOwnedOperatorUnaryOperatorCSParserRuleCall_1_1_0() { return cOwnedOperatorUnaryOperatorCSParserRuleCall_1_1_0; }
		
		//ownedExpression=PrimaryExpCS
		public Assignment getOwnedExpressionAssignment_1_2() { return cOwnedExpressionAssignment_1_2; }
		
		//PrimaryExpCS
		public RuleCall getOwnedExpressionPrimaryExpCSParserRuleCall_1_2_0() { return cOwnedExpressionPrimaryExpCSParserRuleCall_1_2_0; }
	}
	public class UnaryOperatorCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.UnaryOperatorCS");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNamePrefixOperatorParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//UnaryOperatorCS:
		//	name=PrefixOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//name=PrefixOperator
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//PrefixOperator
		public RuleCall getNamePrefixOperatorParserRuleCall_0() { return cNamePrefixOperatorParserRuleCall_0; }
	}
	public class IndexExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.IndexExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNameExpCSParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cIndexExpCSNamedExpAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cFirstIndexesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cFirstIndexesExpCSParserRuleCall_1_2_0 = (RuleCall)cFirstIndexesAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cCommaKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cFirstIndexesAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cFirstIndexesExpCSParserRuleCall_1_3_1_0 = (RuleCall)cFirstIndexesAssignment_1_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_1_5 = (Group)cGroup_1.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_1_5_0 = (Keyword)cGroup_1_5.eContents().get(0);
		private final Assignment cSecondIndexesAssignment_1_5_1 = (Assignment)cGroup_1_5.eContents().get(1);
		private final RuleCall cSecondIndexesExpCSParserRuleCall_1_5_1_0 = (RuleCall)cSecondIndexesAssignment_1_5_1.eContents().get(0);
		private final Group cGroup_1_5_2 = (Group)cGroup_1_5.eContents().get(2);
		private final Keyword cCommaKeyword_1_5_2_0 = (Keyword)cGroup_1_5_2.eContents().get(0);
		private final Assignment cSecondIndexesAssignment_1_5_2_1 = (Assignment)cGroup_1_5_2.eContents().get(1);
		private final RuleCall cSecondIndexesExpCSParserRuleCall_1_5_2_1_0 = (RuleCall)cSecondIndexesAssignment_1_5_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_5_3 = (Keyword)cGroup_1_5.eContents().get(3);
		
		//IndexExpCS:
		//	NameExpCS ({IndexExpCS.namedExp=current}
		//	'[' firstIndexes+=ExpCS (',' firstIndexes+=ExpCS)* ']' ('[' secondIndexes+=ExpCS (',' secondIndexes+=ExpCS)* ']')?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//NameExpCS ({IndexExpCS.namedExp=current} '[' firstIndexes+=ExpCS (',' firstIndexes+=ExpCS)* ']' ('['
		//secondIndexes+=ExpCS (',' secondIndexes+=ExpCS)* ']')?)?
		public Group getGroup() { return cGroup; }
		
		//NameExpCS
		public RuleCall getNameExpCSParserRuleCall_0() { return cNameExpCSParserRuleCall_0; }
		
		//({IndexExpCS.namedExp=current} '[' firstIndexes+=ExpCS (',' firstIndexes+=ExpCS)* ']' ('[' secondIndexes+=ExpCS (','
		//secondIndexes+=ExpCS)* ']')?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{IndexExpCS.namedExp=current}
		public Action getIndexExpCSNamedExpAction_1_0() { return cIndexExpCSNamedExpAction_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_1() { return cLeftSquareBracketKeyword_1_1; }
		
		//firstIndexes+=ExpCS
		public Assignment getFirstIndexesAssignment_1_2() { return cFirstIndexesAssignment_1_2; }
		
		//ExpCS
		public RuleCall getFirstIndexesExpCSParserRuleCall_1_2_0() { return cFirstIndexesExpCSParserRuleCall_1_2_0; }
		
		//(',' firstIndexes+=ExpCS)*
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//','
		public Keyword getCommaKeyword_1_3_0() { return cCommaKeyword_1_3_0; }
		
		//firstIndexes+=ExpCS
		public Assignment getFirstIndexesAssignment_1_3_1() { return cFirstIndexesAssignment_1_3_1; }
		
		//ExpCS
		public RuleCall getFirstIndexesExpCSParserRuleCall_1_3_1_0() { return cFirstIndexesExpCSParserRuleCall_1_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_4() { return cRightSquareBracketKeyword_1_4; }
		
		//('[' secondIndexes+=ExpCS (',' secondIndexes+=ExpCS)* ']')?
		public Group getGroup_1_5() { return cGroup_1_5; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_5_0() { return cLeftSquareBracketKeyword_1_5_0; }
		
		//secondIndexes+=ExpCS
		public Assignment getSecondIndexesAssignment_1_5_1() { return cSecondIndexesAssignment_1_5_1; }
		
		//ExpCS
		public RuleCall getSecondIndexesExpCSParserRuleCall_1_5_1_0() { return cSecondIndexesExpCSParserRuleCall_1_5_1_0; }
		
		//(',' secondIndexes+=ExpCS)*
		public Group getGroup_1_5_2() { return cGroup_1_5_2; }
		
		//','
		public Keyword getCommaKeyword_1_5_2_0() { return cCommaKeyword_1_5_2_0; }
		
		//secondIndexes+=ExpCS
		public Assignment getSecondIndexesAssignment_1_5_2_1() { return cSecondIndexesAssignment_1_5_2_1; }
		
		//ExpCS
		public RuleCall getSecondIndexesExpCSParserRuleCall_1_5_2_1_0() { return cSecondIndexesExpCSParserRuleCall_1_5_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_5_3() { return cRightSquareBracketKeyword_1_5_3; }
	}
	public class NavigatingExpCS_BaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.NavigatingExpCS_Base");
		private final RuleCall cIndexExpCSParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//NavigatingExpCS_Base:
		//	IndexExpCS;
		@Override public ParserRule getRule() { return rule; }
		
		//IndexExpCS
		public RuleCall getIndexExpCSParserRuleCall() { return cIndexExpCSParserRuleCall; }
	}
	public class NavigatingExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.NavigatingExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNavigatingExpCS_BaseParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cNavigatingExpCSNamedExpAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Assignment cArgumentAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cArgumentNavigatingArgCSParserRuleCall_1_2_0_0 = (RuleCall)cArgumentAssignment_1_2_0.eContents().get(0);
		private final Assignment cArgumentAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cArgumentNavigatingCommaArgCSParserRuleCall_1_2_1_0 = (RuleCall)cArgumentAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_1_2_2 = (Group)cGroup_1_2.eContents().get(2);
		private final Assignment cArgumentAssignment_1_2_2_0 = (Assignment)cGroup_1_2_2.eContents().get(0);
		private final RuleCall cArgumentNavigatingSemiArgCSParserRuleCall_1_2_2_0_0 = (RuleCall)cArgumentAssignment_1_2_2_0.eContents().get(0);
		private final Assignment cArgumentAssignment_1_2_2_1 = (Assignment)cGroup_1_2_2.eContents().get(1);
		private final RuleCall cArgumentNavigatingCommaArgCSParserRuleCall_1_2_2_1_0 = (RuleCall)cArgumentAssignment_1_2_2_1.eContents().get(0);
		private final Group cGroup_1_2_3 = (Group)cGroup_1_2.eContents().get(3);
		private final Assignment cArgumentAssignment_1_2_3_0 = (Assignment)cGroup_1_2_3.eContents().get(0);
		private final RuleCall cArgumentNavigatingBarArgCSParserRuleCall_1_2_3_0_0 = (RuleCall)cArgumentAssignment_1_2_3_0.eContents().get(0);
		private final Assignment cArgumentAssignment_1_2_3_1 = (Assignment)cGroup_1_2_3.eContents().get(1);
		private final RuleCall cArgumentNavigatingCommaArgCSParserRuleCall_1_2_3_1_0 = (RuleCall)cArgumentAssignment_1_2_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//NavigatingExpCS:
		//	NavigatingExpCS_Base ({NavigatingExpCS.namedExp=current}
		//	'(' (argument+=NavigatingArgCS argument+=NavigatingCommaArgCS* (argument+=NavigatingSemiArgCS
		//	argument+=NavigatingCommaArgCS*)? (argument+=NavigatingBarArgCS argument+=NavigatingCommaArgCS*)?)? ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//NavigatingExpCS_Base ({NavigatingExpCS.namedExp=current} '(' (argument+=NavigatingArgCS argument+=NavigatingCommaArgCS*
		//(argument+=NavigatingSemiArgCS argument+=NavigatingCommaArgCS*)? (argument+=NavigatingBarArgCS
		//argument+=NavigatingCommaArgCS*)?)? ')')?
		public Group getGroup() { return cGroup; }
		
		//NavigatingExpCS_Base
		public RuleCall getNavigatingExpCS_BaseParserRuleCall_0() { return cNavigatingExpCS_BaseParserRuleCall_0; }
		
		//({NavigatingExpCS.namedExp=current} '(' (argument+=NavigatingArgCS argument+=NavigatingCommaArgCS*
		//(argument+=NavigatingSemiArgCS argument+=NavigatingCommaArgCS*)? (argument+=NavigatingBarArgCS
		//argument+=NavigatingCommaArgCS*)?)? ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//{NavigatingExpCS.namedExp=current}
		public Action getNavigatingExpCSNamedExpAction_1_0() { return cNavigatingExpCSNamedExpAction_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//(argument+=NavigatingArgCS argument+=NavigatingCommaArgCS* (argument+=NavigatingSemiArgCS
		//argument+=NavigatingCommaArgCS*)? (argument+=NavigatingBarArgCS argument+=NavigatingCommaArgCS*)?)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//argument+=NavigatingArgCS
		public Assignment getArgumentAssignment_1_2_0() { return cArgumentAssignment_1_2_0; }
		
		//NavigatingArgCS
		public RuleCall getArgumentNavigatingArgCSParserRuleCall_1_2_0_0() { return cArgumentNavigatingArgCSParserRuleCall_1_2_0_0; }
		
		//argument+=NavigatingCommaArgCS*
		public Assignment getArgumentAssignment_1_2_1() { return cArgumentAssignment_1_2_1; }
		
		//NavigatingCommaArgCS
		public RuleCall getArgumentNavigatingCommaArgCSParserRuleCall_1_2_1_0() { return cArgumentNavigatingCommaArgCSParserRuleCall_1_2_1_0; }
		
		//(argument+=NavigatingSemiArgCS argument+=NavigatingCommaArgCS*)?
		public Group getGroup_1_2_2() { return cGroup_1_2_2; }
		
		//argument+=NavigatingSemiArgCS
		public Assignment getArgumentAssignment_1_2_2_0() { return cArgumentAssignment_1_2_2_0; }
		
		//NavigatingSemiArgCS
		public RuleCall getArgumentNavigatingSemiArgCSParserRuleCall_1_2_2_0_0() { return cArgumentNavigatingSemiArgCSParserRuleCall_1_2_2_0_0; }
		
		//argument+=NavigatingCommaArgCS*
		public Assignment getArgumentAssignment_1_2_2_1() { return cArgumentAssignment_1_2_2_1; }
		
		//NavigatingCommaArgCS
		public RuleCall getArgumentNavigatingCommaArgCSParserRuleCall_1_2_2_1_0() { return cArgumentNavigatingCommaArgCSParserRuleCall_1_2_2_1_0; }
		
		//(argument+=NavigatingBarArgCS argument+=NavigatingCommaArgCS*)?
		public Group getGroup_1_2_3() { return cGroup_1_2_3; }
		
		//argument+=NavigatingBarArgCS
		public Assignment getArgumentAssignment_1_2_3_0() { return cArgumentAssignment_1_2_3_0; }
		
		//NavigatingBarArgCS
		public RuleCall getArgumentNavigatingBarArgCSParserRuleCall_1_2_3_0_0() { return cArgumentNavigatingBarArgCSParserRuleCall_1_2_3_0_0; }
		
		//argument+=NavigatingCommaArgCS*
		public Assignment getArgumentAssignment_1_2_3_1() { return cArgumentAssignment_1_2_3_1; }
		
		//NavigatingCommaArgCS
		public RuleCall getArgumentNavigatingCommaArgCSParserRuleCall_1_2_3_1_0() { return cArgumentNavigatingCommaArgCSParserRuleCall_1_2_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	
	
	private final ModuleElements pModule;
	private final EssentialOCLUnreservedNameElements pEssentialOCLUnreservedName;
	private final UnreservedNameElements pUnreservedName;
	private final PrimitiveTypeIdentifierElements pPrimitiveTypeIdentifier;
	private final CollectionTypeIdentifierElements pCollectionTypeIdentifier;
	private final UnrestrictedNameElements pUnrestrictedName;
	private final EssentialOCLUnrestrictedNameElements pEssentialOCLUnrestrictedName;
	private final ModuleElementElements pModuleElement;
	private final MatchedRuleElements pMatchedRule;
	private final CalledRuleElements pCalledRule;
	private final HelperElements pHelper;
	private final ATLDefCSElements pATLDefCS;
	private final ATLParameterCSElements pATLParameterCS;
	private final RuleVariableDeclarationElements pRuleVariableDeclaration;
	private final InPatternElements pInPattern;
	private final InPatternElementElements pInPatternElement;
	private final OutPatternElements pOutPattern;
	private final OutPatternElementElements pOutPatternElement;
	private final SimpleOutPatternElementElements pSimpleOutPatternElement;
	private final ForEachOutPatternElementElements pForEachOutPatternElement;
	private final BindingElements pBinding;
	private final ActionBlockElements pActionBlock;
	private final StatementElements pStatement;
	private final BindingStatElements pBindingStat;
	private final ATLTypeElements pATLType;
	private final ATLModelNameElements pATLModelName;
	private final TerminalRule tDOUBLE_QUOTED_STRING;
	private final TerminalRule tSINGLE_QUOTED_STRING;
	private final TerminalRule tML_SINGLE_QUOTED_STRING;
	private final TerminalRule tSIMPLE_ID;
	private final TerminalRule tBIG_INT;
	private final TerminalRule tDOCUMENTATION;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	private final EssentialOCLRersevedKeywordElements pEssentialOCLRersevedKeyword;
	private final EssentialOCLPrefixOperatorElements pEssentialOCLPrefixOperator;
	private final EssentialOCLInfixOperatorElements pEssentialOCLInfixOperator;
	private final EssentialOCLNavigationOperatorElements pEssentialOCLNavigationOperator;
	private final StringLiteralElements pStringLiteral;
	private final PrefixOperatorElements pPrefixOperator;
	private final InfixOperatorElements pInfixOperator;
	private final NavigationOperatorElements pNavigationOperator;
	private final CollectionTypeCSElements pCollectionTypeCS;
	private final TupleTypeCSElements pTupleTypeCS;
	private final TuplePartCSElements pTuplePartCS;
	private final CollectionLiteralExpCSElements pCollectionLiteralExpCS;
	private final CollectionLiteralPartCSElements pCollectionLiteralPartCS;
	private final PrimitiveLiteralExpCSElements pPrimitiveLiteralExpCS;
	private final TupleLiteralExpCSElements pTupleLiteralExpCS;
	private final TupleLiteralPartCSElements pTupleLiteralPartCS;
	private final NumberLiteralExpCSElements pNumberLiteralExpCS;
	private final StringLiteralExpCSElements pStringLiteralExpCS;
	private final BooleanLiteralExpCSElements pBooleanLiteralExpCS;
	private final UnlimitedNaturalLiteralExpCSElements pUnlimitedNaturalLiteralExpCS;
	private final InvalidLiteralExpCSElements pInvalidLiteralExpCS;
	private final NullLiteralExpCSElements pNullLiteralExpCS;
	private final PrimitiveTypeCSElements pPrimitiveTypeCS;
	private final TypeLiteralCSElements pTypeLiteralCS;
	private final TypeLiteralExpCSElements pTypeLiteralExpCS;
	private final TypeNameExpCSElements pTypeNameExpCS;
	private final TypeExpCSElements pTypeExpCS;
	private final NavigatingArgCSElements pNavigatingArgCS;
	private final NavigatingBarArgCSElements pNavigatingBarArgCS;
	private final NavigatingCommaArgCSElements pNavigatingCommaArgCS;
	private final NavigatingSemiArgCSElements pNavigatingSemiArgCS;
	private final NavigatingArgExpCSElements pNavigatingArgExpCS;
	private final IfExpCSElements pIfExpCS;
	private final LetExpCSElements pLetExpCS;
	private final LetVariableCSElements pLetVariableCS;
	private final NestedExpCSElements pNestedExpCS;
	private final SelfExpCSElements pSelfExpCS;
	private final PrimaryExpCSElements pPrimaryExpCS;
	private final NameExpCSElements pNameExpCS;
	private final ExpCSElements pExpCS;
	private final InfixedExpCSElements pInfixedExpCS;
	private final BinaryOperatorCSElements pBinaryOperatorCS;
	private final InfixOperatorCSElements pInfixOperatorCS;
	private final NavigationOperatorCSElements pNavigationOperatorCS;
	private final PrefixedExpCSElements pPrefixedExpCS;
	private final UnaryOperatorCSElements pUnaryOperatorCS;
	private final IndexExpCSElements pIndexExpCS;
	private final NavigatingExpCS_BaseElements pNavigatingExpCS_Base;
	private final NavigatingExpCSElements pNavigatingExpCS;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyATLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModule = new ModuleElements();
		this.pEssentialOCLUnreservedName = new EssentialOCLUnreservedNameElements();
		this.pUnreservedName = new UnreservedNameElements();
		this.pPrimitiveTypeIdentifier = new PrimitiveTypeIdentifierElements();
		this.pCollectionTypeIdentifier = new CollectionTypeIdentifierElements();
		this.pUnrestrictedName = new UnrestrictedNameElements();
		this.pEssentialOCLUnrestrictedName = new EssentialOCLUnrestrictedNameElements();
		this.pModuleElement = new ModuleElementElements();
		this.pMatchedRule = new MatchedRuleElements();
		this.pCalledRule = new CalledRuleElements();
		this.pHelper = new HelperElements();
		this.pATLDefCS = new ATLDefCSElements();
		this.pATLParameterCS = new ATLParameterCSElements();
		this.pRuleVariableDeclaration = new RuleVariableDeclarationElements();
		this.pInPattern = new InPatternElements();
		this.pInPatternElement = new InPatternElementElements();
		this.pOutPattern = new OutPatternElements();
		this.pOutPatternElement = new OutPatternElementElements();
		this.pSimpleOutPatternElement = new SimpleOutPatternElementElements();
		this.pForEachOutPatternElement = new ForEachOutPatternElementElements();
		this.pBinding = new BindingElements();
		this.pActionBlock = new ActionBlockElements();
		this.pStatement = new StatementElements();
		this.pBindingStat = new BindingStatElements();
		this.pATLType = new ATLTypeElements();
		this.pATLModelName = new ATLModelNameElements();
		this.tDOUBLE_QUOTED_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.DOUBLE_QUOTED_STRING");
		this.tSINGLE_QUOTED_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.SINGLE_QUOTED_STRING");
		this.tML_SINGLE_QUOTED_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.ML_SINGLE_QUOTED_STRING");
		this.tSIMPLE_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.SIMPLE_ID");
		this.tBIG_INT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.BIG_INT");
		this.tDOCUMENTATION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.DOCUMENTATION");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyATL.ANY_OTHER");
		this.pEssentialOCLRersevedKeyword = new EssentialOCLRersevedKeywordElements();
		this.pEssentialOCLPrefixOperator = new EssentialOCLPrefixOperatorElements();
		this.pEssentialOCLInfixOperator = new EssentialOCLInfixOperatorElements();
		this.pEssentialOCLNavigationOperator = new EssentialOCLNavigationOperatorElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pPrefixOperator = new PrefixOperatorElements();
		this.pInfixOperator = new InfixOperatorElements();
		this.pNavigationOperator = new NavigationOperatorElements();
		this.pCollectionTypeCS = new CollectionTypeCSElements();
		this.pTupleTypeCS = new TupleTypeCSElements();
		this.pTuplePartCS = new TuplePartCSElements();
		this.pCollectionLiteralExpCS = new CollectionLiteralExpCSElements();
		this.pCollectionLiteralPartCS = new CollectionLiteralPartCSElements();
		this.pPrimitiveLiteralExpCS = new PrimitiveLiteralExpCSElements();
		this.pTupleLiteralExpCS = new TupleLiteralExpCSElements();
		this.pTupleLiteralPartCS = new TupleLiteralPartCSElements();
		this.pNumberLiteralExpCS = new NumberLiteralExpCSElements();
		this.pStringLiteralExpCS = new StringLiteralExpCSElements();
		this.pBooleanLiteralExpCS = new BooleanLiteralExpCSElements();
		this.pUnlimitedNaturalLiteralExpCS = new UnlimitedNaturalLiteralExpCSElements();
		this.pInvalidLiteralExpCS = new InvalidLiteralExpCSElements();
		this.pNullLiteralExpCS = new NullLiteralExpCSElements();
		this.pPrimitiveTypeCS = new PrimitiveTypeCSElements();
		this.pTypeLiteralCS = new TypeLiteralCSElements();
		this.pTypeLiteralExpCS = new TypeLiteralExpCSElements();
		this.pTypeNameExpCS = new TypeNameExpCSElements();
		this.pTypeExpCS = new TypeExpCSElements();
		this.pNavigatingArgCS = new NavigatingArgCSElements();
		this.pNavigatingBarArgCS = new NavigatingBarArgCSElements();
		this.pNavigatingCommaArgCS = new NavigatingCommaArgCSElements();
		this.pNavigatingSemiArgCS = new NavigatingSemiArgCSElements();
		this.pNavigatingArgExpCS = new NavigatingArgExpCSElements();
		this.pIfExpCS = new IfExpCSElements();
		this.pLetExpCS = new LetExpCSElements();
		this.pLetVariableCS = new LetVariableCSElements();
		this.pNestedExpCS = new NestedExpCSElements();
		this.pSelfExpCS = new SelfExpCSElements();
		this.pPrimaryExpCS = new PrimaryExpCSElements();
		this.pNameExpCS = new NameExpCSElements();
		this.pExpCS = new ExpCSElements();
		this.pInfixedExpCS = new InfixedExpCSElements();
		this.pBinaryOperatorCS = new BinaryOperatorCSElements();
		this.pInfixOperatorCS = new InfixOperatorCSElements();
		this.pNavigationOperatorCS = new NavigationOperatorCSElements();
		this.pPrefixedExpCS = new PrefixedExpCSElements();
		this.pUnaryOperatorCS = new UnaryOperatorCSElements();
		this.pIndexExpCS = new IndexExpCSElements();
		this.pNavigatingExpCS_Base = new NavigatingExpCS_BaseElements();
		this.pNavigatingExpCS = new NavigatingExpCSElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyATL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////Solo ATL, mancano le regole OCL (alcune inserite perchè 
	////usate anche da ATL come UnreservedName etc.
	//Module:
	//	'module'
	//	name=UnrestrictedName ';'
	//	'create' 'OUT' ':' outModels+=NameExpCS ("," outModels+=NameExpCS)*
	//	'from' 'IN' ':' inModels+=NameExpCS ("," inModels+=NameExpCS)* ';'
	//	elements+=ModuleElement*;
	public ModuleElements getModuleAccess() {
		return pModule;
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}
	
	//EssentialOCLUnreservedName:
	//	UnrestrictedName | CollectionTypeIdentifier | PrimitiveTypeIdentifier | 'Tuple';
	public EssentialOCLUnreservedNameElements getEssentialOCLUnreservedNameAccess() {
		return pEssentialOCLUnreservedName;
	}
	
	public ParserRule getEssentialOCLUnreservedNameRule() {
		return getEssentialOCLUnreservedNameAccess().getRule();
	}
	
	//UnreservedName:
	//	EssentialOCLUnreservedName;
	public UnreservedNameElements getUnreservedNameAccess() {
		return pUnreservedName;
	}
	
	public ParserRule getUnreservedNameRule() {
		return getUnreservedNameAccess().getRule();
	}
	
	//PrimitiveTypeIdentifier:
	//	'Boolean' | 'Integer' | 'Real' | 'String' | 'UnlimitedNatural' | 'OclAny'
	//	| 'OclInvalid' | 'OclVoid';
	public PrimitiveTypeIdentifierElements getPrimitiveTypeIdentifierAccess() {
		return pPrimitiveTypeIdentifier;
	}
	
	public ParserRule getPrimitiveTypeIdentifierRule() {
		return getPrimitiveTypeIdentifierAccess().getRule();
	}
	
	//CollectionTypeIdentifier:
	//	'Set' | 'Bag' | 'Sequence' | 'Collection' | 'OrderedSet';
	public CollectionTypeIdentifierElements getCollectionTypeIdentifierAccess() {
		return pCollectionTypeIdentifier;
	}
	
	public ParserRule getCollectionTypeIdentifierRule() {
		return getCollectionTypeIdentifierAccess().getRule();
	}
	
	//UnrestrictedName:
	//	EssentialOCLUnrestrictedName;
	public UnrestrictedNameElements getUnrestrictedNameAccess() {
		return pUnrestrictedName;
	}
	
	public ParserRule getUnrestrictedNameRule() {
		return getUnrestrictedNameAccess().getRule();
	}
	
	//EssentialOCLUnrestrictedName:
	//	SIMPLE_ID;
	public EssentialOCLUnrestrictedNameElements getEssentialOCLUnrestrictedNameAccess() {
		return pEssentialOCLUnrestrictedName;
	}
	
	public ParserRule getEssentialOCLUnrestrictedNameRule() {
		return getEssentialOCLUnrestrictedNameAccess().getRule();
	}
	
	//ModuleElement:
	//	Helper | MatchedRule | CalledRule;
	public ModuleElementElements getModuleElementAccess() {
		return pModuleElement;
	}
	
	public ParserRule getModuleElementRule() {
		return getModuleElementAccess().getRule();
	}
	
	//MatchedRule:
	//	'rule' name=UnrestrictedName '{'
	//	'from'
	//	inPattern=InPattern ('using' '{'
	//	variables+=RuleVariableDeclaration*
	//	'}')?
	//	'to'
	//	outPattern=OutPattern ('do' '{'
	//	actionBlock=ActionBlock
	//	'}')?
	//	'}';
	public MatchedRuleElements getMatchedRuleAccess() {
		return pMatchedRule;
	}
	
	public ParserRule getMatchedRuleRule() {
		return getMatchedRuleAccess().getRule();
	}
	
	//CalledRule:
	//	'entrypoint'? 'rule' name=UnrestrictedName ('(' ')')? '{' ('using' '{'
	//	variables+=RuleVariableDeclaration*
	//	'}')?
	//	'to'
	//	outPattern=OutPattern ('do' '{'
	//	actionBlock=ActionBlock
	//	'}')?
	//	'}';
	public CalledRuleElements getCalledRuleAccess() {
		return pCalledRule;
	}
	
	public ParserRule getCalledRuleRule() {
		return getCalledRuleAccess().getRule();
	}
	
	///*
	// *helper [context context type]? def :
	// *helper_name(parameters) : return_type = exp;
	// */ Helper:
	//	'helper' 'context'?
	//	definition=ATLDefCS;
	public HelperElements getHelperAccess() {
		return pHelper;
	}
	
	public ParserRule getHelperRule() {
		return getHelperAccess().getRule();
	}
	
	///*
	// *Implementation of Complete OGL Parts for ATL.
	// *Adaption, ATL hac nome differences; 'context' is not
	// *optional in OCL.
	// *OCL DefCS requires 'stat1c' key word.
	// */ ATLDefCS:
	//	'def' ':' varName=UnrestrictedName ('(' (parameters+=ATLParameterCS (','
	//	parameters+=ATLParameterCS)*)?
	//	')')?
	//	':' type=ATLType
	//	'=' initExpression=ExpCS ';';
	public ATLDefCSElements getATLDefCSAccess() {
		return pATLDefCS;
	}
	
	public ParserRule getATLDefCSRule() {
		return getATLDefCSAccess().getRule();
	}
	
	//ATLParameterCS:
	//	varName=UnrestrictedName ':' type=ATLType;
	public ATLParameterCSElements getATLParameterCSAccess() {
		return pATLParameterCS;
	}
	
	public ParserRule getATLParameterCSRule() {
		return getATLParameterCSAccess().getRule();
	}
	
	//RuleVariableDeclaration:
	//	varName=UnrestrictedName ':' type=ATLType
	//	'=' initExpression=ExpCS ';';
	public RuleVariableDeclarationElements getRuleVariableDeclarationAccess() {
		return pRuleVariableDeclaration;
	}
	
	public ParserRule getRuleVariableDeclarationRule() {
		return getRuleVariableDeclarationAccess().getRule();
	}
	
	//InPattern:
	//	elements+=InPatternElement ('('
	//	filter=ExpCS?
	//	')')?;
	public InPatternElements getInPatternAccess() {
		return pInPattern;
	}
	
	public ParserRule getInPatternRule() {
		return getInPatternAccess().getRule();
	}
	
	//InPatternElement:
	//	varName=UnrestrictedName ':' type=ATLType;
	public InPatternElementElements getInPatternElementAccess() {
		return pInPatternElement;
	}
	
	public ParserRule getInPatternElementRule() {
		return getInPatternElementAccess().getRule();
	}
	
	//OutPattern:
	//	elements+=OutPatternElement (','
	//	elements+=OutPatternElement)*;
	public OutPatternElements getOutPatternAccess() {
		return pOutPattern;
	}
	
	public ParserRule getOutPatternRule() {
		return getOutPatternAccess().getRule();
	}
	
	//OutPatternElement:
	//	SimpleOutPatternElement
	//	| ForEachOutPatternElement;
	public OutPatternElementElements getOutPatternElementAccess() {
		return pOutPatternElement;
	}
	
	public ParserRule getOutPatternElementRule() {
		return getOutPatternElementAccess().getRule();
	}
	
	//SimpleOutPatternElement:
	//	varName=UnrestrictedName ':' type=ATLType ('(' (bindings+=Binding (',' bindings+=Binding)*)?
	//	')')?;
	public SimpleOutPatternElementElements getSimpleOutPatternElementAccess() {
		return pSimpleOutPatternElement;
	}
	
	public ParserRule getSimpleOutPatternElementRule() {
		return getSimpleOutPatternElementAccess().getRule();
	}
	
	//ForEachOutPatternElement:
	//	'xxx'
	//	collection=ExpCS
	//	'yyy';
	public ForEachOutPatternElementElements getForEachOutPatternElementAccess() {
		return pForEachOutPatternElement;
	}
	
	public ParserRule getForEachOutPatternElementRule() {
		return getForEachOutPatternElementAccess().getRule();
	}
	
	//Binding:
	//	propertyName=UnrestrictedName '<-' value=ExpCS;
	public BindingElements getBindingAccess() {
		return pBinding;
	}
	
	public ParserRule getBindingRule() {
		return getBindingAccess().getRule();
	}
	
	//ActionBlock:
	//	statements+=Statement+;
	public ActionBlockElements getActionBlockAccess() {
		return pActionBlock;
	}
	
	public ParserRule getActionBlockRule() {
		return getActionBlockAccess().getRule();
	}
	
	//Statement:
	//	BindingStat;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//BindingStat:
	//	source=ExpCS '.'
	//	propertyName=UnrestrictedName '<-'
	//	value=ExpCS ';';
	public BindingStatElements getBindingStatAccess() {
		return pBindingStat;
	}
	
	public ParserRule getBindingStatRule() {
		return getBindingStatAccess().getRule();
	}
	
	//ATLType:
	//	(modelName=ATLModelName '!')? type=TypeExpCS;
	public ATLTypeElements getATLTypeAccess() {
		return pATLType;
	}
	
	public ParserRule getATLTypeRule() {
		return getATLTypeAccess().getRule();
	}
	
	//ATLModelName:
	//	UnrestrictedName;
	public ATLModelNameElements getATLModelNameAccess() {
		return pATLModelName;
	}
	
	public ParserRule getATLModelNameRule() {
		return getATLModelNameAccess().getRule();
	}
	
	//terminal DOUBLE_QUOTED_STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'"
	//	| '\\') | !('\\' | '"'))* '"';
	public TerminalRule getDOUBLE_QUOTED_STRINGRule() {
		return tDOUBLE_QUOTED_STRING;
	}
	
	//terminal SINGLE_QUOTED_STRING:
	//	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'"
	//	| '\\') | !('\\' | "'"))* "'";
	public TerminalRule getSINGLE_QUOTED_STRINGRule() {
		return tSINGLE_QUOTED_STRING;
	}
	
	//terminal ML_SINGLE_QUOTED_STRING:
	//	"/'"->"'/";
	public TerminalRule getML_SINGLE_QUOTED_STRINGRule() {
		return tML_SINGLE_QUOTED_STRING;
	}
	
	//terminal SIMPLE_ID:
	//	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getSIMPLE_IDRule() {
		return tSIMPLE_ID;
	}
	
	//terminal BIG_INT:
	//	'0'..'9'+;
	public TerminalRule getBIG_INTRule() {
		return tBIG_INT;
	}
	
	//terminal DOCUMENTATION:
	//	'/**'->'*/';
	public TerminalRule getDOCUMENTATIONRule() {
		return tDOCUMENTATION;
	}
	
	//@ Override terminal ML_COMMENT:
	//	'/*' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//@ Override terminal SL_COMMENT:
	//	'--' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//@ Override terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//@ Override terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
	
	//EssentialOCLRersevedKeyword:
	//	'and' | 'else' | 'endif' | 'if' | 'implies' | 'in' | 'let'
	//	| 'not' | 'or' | 'then' | 'xor';
	public EssentialOCLRersevedKeywordElements getEssentialOCLRersevedKeywordAccess() {
		return pEssentialOCLRersevedKeyword;
	}
	
	public ParserRule getEssentialOCLRersevedKeywordRule() {
		return getEssentialOCLRersevedKeywordAccess().getRule();
	}
	
	//EssentialOCLPrefixOperator:
	//	'-' | 'not';
	public EssentialOCLPrefixOperatorElements getEssentialOCLPrefixOperatorAccess() {
		return pEssentialOCLPrefixOperator;
	}
	
	public ParserRule getEssentialOCLPrefixOperatorRule() {
		return getEssentialOCLPrefixOperatorAccess().getRule();
	}
	
	//EssentialOCLInfixOperator:
	//	'*' | '/' | '+' | '-' | '>' | '<' | '>=' | '<=' | '=' | '<>' | 'and'
	//	| 'or' | 'xor' | 'implies';
	public EssentialOCLInfixOperatorElements getEssentialOCLInfixOperatorAccess() {
		return pEssentialOCLInfixOperator;
	}
	
	public ParserRule getEssentialOCLInfixOperatorRule() {
		return getEssentialOCLInfixOperatorAccess().getRule();
	}
	
	//EssentialOCLNavigationOperator:
	//	'.' | '->';
	public EssentialOCLNavigationOperatorElements getEssentialOCLNavigationOperatorAccess() {
		return pEssentialOCLNavigationOperator;
	}
	
	public ParserRule getEssentialOCLNavigationOperatorRule() {
		return getEssentialOCLNavigationOperatorAccess().getRule();
	}
	
	//StringLiteral:
	//	SINGLE_QUOTED_STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	//PrefixOperator:
	//	EssentialOCLPrefixOperator;
	public PrefixOperatorElements getPrefixOperatorAccess() {
		return pPrefixOperator;
	}
	
	public ParserRule getPrefixOperatorRule() {
		return getPrefixOperatorAccess().getRule();
	}
	
	//InfixOperator:
	//	EssentialOCLInfixOperator;
	public InfixOperatorElements getInfixOperatorAccess() {
		return pInfixOperator;
	}
	
	public ParserRule getInfixOperatorRule() {
		return getInfixOperatorAccess().getRule();
	}
	
	//NavigationOperator:
	//	EssentialOCLNavigationOperator;
	public NavigationOperatorElements getNavigationOperatorAccess() {
		return pNavigationOperator;
	}
	
	public ParserRule getNavigationOperatorRule() {
		return getNavigationOperatorAccess().getRule();
	}
	
	//CollectionTypeCS:
	//	name=CollectionTypeIdentifier ('(' ownedType=TypeExpCS ')' | '<' ownedType=TypeExpCS '>')?
	//	backtrack='true';
	public CollectionTypeCSElements getCollectionTypeCSAccess() {
		return pCollectionTypeCS;
	}
	
	public ParserRule getCollectionTypeCSRule() {
		return getCollectionTypeCSAccess().getRule();
	}
	
	//TupleTypeCS:
	//	name='Tuple' ('(' (ownedParts+=tuplePartCS (',' ownedParts+=tuplePartCS)*)? ')' | '<' (ownedParts+=tuplePartCS (','
	//	ownedParts+=tuplePartCS)*)? '>')?
	//	backtrack='true';
	public TupleTypeCSElements getTupleTypeCSAccess() {
		return pTupleTypeCS;
	}
	
	public ParserRule getTupleTypeCSRule() {
		return getTupleTypeCSAccess().getRule();
	}
	
	//tuplePartCS:
	//	name=UnrestrictedName ':' ownedType=TypeExpCS;
	public TuplePartCSElements getTuplePartCSAccess() {
		return pTuplePartCS;
	}
	
	public ParserRule getTuplePartCSRule() {
		return getTuplePartCSAccess().getRule();
	}
	
	//CollectionLiteralExpCS:
	//	ownedType=CollectionTypeCS
	//	'{' (ownedParts+=CollectionLiteralPartCS (',' ownedParts+=CollectionLiteralPartCS)*)? '}'
	//	backtrack="true";
	public CollectionLiteralExpCSElements getCollectionLiteralExpCSAccess() {
		return pCollectionLiteralExpCS;
	}
	
	public ParserRule getCollectionLiteralExpCSRule() {
		return getCollectionLiteralExpCSAccess().getRule();
	}
	
	//CollectionLiteralPartCS:
	//	expressionCS=ExpCS ('..' lastExpressionCS=ExpCS)?
	//	backtrack="true";
	public CollectionLiteralPartCSElements getCollectionLiteralPartCSAccess() {
		return pCollectionLiteralPartCS;
	}
	
	public ParserRule getCollectionLiteralPartCSRule() {
		return getCollectionLiteralPartCSAccess().getRule();
	}
	
	//PrimitiveLiteralExpCS:
	//	NumberLiteralExpCS | StringLiteralExpCS | BooleanLiteralExpCS
	//	| UnlimitedNaturalLiteralExpCS | InvalidLiteralExpCS | NullLiteralExpCS;
	public PrimitiveLiteralExpCSElements getPrimitiveLiteralExpCSAccess() {
		return pPrimitiveLiteralExpCS;
	}
	
	public ParserRule getPrimitiveLiteralExpCSRule() {
		return getPrimitiveLiteralExpCSAccess().getRule();
	}
	
	//TupleLiteralExpCS:
	//	'Tuple' '{' ownedParts+=TupleLiteralPartCS (','
	//	ownedParts+=TupleLiteralPartCS)* '}';
	public TupleLiteralExpCSElements getTupleLiteralExpCSAccess() {
		return pTupleLiteralExpCS;
	}
	
	public ParserRule getTupleLiteralExpCSRule() {
		return getTupleLiteralExpCSAccess().getRule();
	}
	
	//TupleLiteralPartCS:
	//	name=UnrestrictedName (':' ownedType=TypeExpCS)? '='
	//	initExpression=ExpCS;
	public TupleLiteralPartCSElements getTupleLiteralPartCSAccess() {
		return pTupleLiteralPartCS;
	}
	
	public ParserRule getTupleLiteralPartCSRule() {
		return getTupleLiteralPartCSAccess().getRule();
	}
	
	//NumberLiteralExpCS:
	//	name=BIG_INT;
	public NumberLiteralExpCSElements getNumberLiteralExpCSAccess() {
		return pNumberLiteralExpCS;
	}
	
	public ParserRule getNumberLiteralExpCSRule() {
		return getNumberLiteralExpCSAccess().getRule();
	}
	
	//StringLiteralExpCS:
	//	name+=StringLiteral;
	public StringLiteralExpCSElements getStringLiteralExpCSAccess() {
		return pStringLiteralExpCS;
	}
	
	public ParserRule getStringLiteralExpCSRule() {
		return getStringLiteralExpCSAccess().getRule();
	}
	
	//BooleanLiteralExpCS:
	//	name='true' | name='false';
	public BooleanLiteralExpCSElements getBooleanLiteralExpCSAccess() {
		return pBooleanLiteralExpCS;
	}
	
	public ParserRule getBooleanLiteralExpCSRule() {
		return getBooleanLiteralExpCSAccess().getRule();
	}
	
	//UnlimitedNaturalLiteralExpCS:
	//	{UnlimitedNaturalLiteralExpCS} '*';
	public UnlimitedNaturalLiteralExpCSElements getUnlimitedNaturalLiteralExpCSAccess() {
		return pUnlimitedNaturalLiteralExpCS;
	}
	
	public ParserRule getUnlimitedNaturalLiteralExpCSRule() {
		return getUnlimitedNaturalLiteralExpCSAccess().getRule();
	}
	
	//InvalidLiteralExpCS:
	//	{InvalidLiteralExpCS} 'invalid';
	public InvalidLiteralExpCSElements getInvalidLiteralExpCSAccess() {
		return pInvalidLiteralExpCS;
	}
	
	public ParserRule getInvalidLiteralExpCSRule() {
		return getInvalidLiteralExpCSAccess().getRule();
	}
	
	//NullLiteralExpCS:
	//	{NullLiteralExpCS} 'null';
	public NullLiteralExpCSElements getNullLiteralExpCSAccess() {
		return pNullLiteralExpCS;
	}
	
	public ParserRule getNullLiteralExpCSRule() {
		return getNullLiteralExpCSAccess().getRule();
	}
	
	//PrimitiveTypeCS:
	//	name=PrimitiveTypeIdentifier;
	public PrimitiveTypeCSElements getPrimitiveTypeCSAccess() {
		return pPrimitiveTypeCS;
	}
	
	public ParserRule getPrimitiveTypeCSRule() {
		return getPrimitiveTypeCSAccess().getRule();
	}
	
	//TypeLiteralCS:
	//	PrimitiveTypeCS | TupleTypeCS | CollectionTypeCS;
	public TypeLiteralCSElements getTypeLiteralCSAccess() {
		return pTypeLiteralCS;
	}
	
	public ParserRule getTypeLiteralCSRule() {
		return getTypeLiteralCSAccess().getRule();
	}
	
	//TypeLiteralExpCS:
	//	ownedType=TypeLiteralCS
	//	backtrack="true";
	public TypeLiteralExpCSElements getTypeLiteralExpCSAccess() {
		return pTypeLiteralExpCS;
	}
	
	public ParserRule getTypeLiteralExpCSRule() {
		return getTypeLiteralExpCSAccess().getRule();
	}
	
	//TypeNameExpCS:
	//	(namespace+=UnrestrictedName '::' (namespace+=UnreservedName '::')*) element=UnreservedName |
	//	element=UnrestrictedName;
	public TypeNameExpCSElements getTypeNameExpCSAccess() {
		return pTypeNameExpCS;
	}
	
	public ParserRule getTypeNameExpCSRule() {
		return getTypeNameExpCSAccess().getRule();
	}
	
	//TypeExpCS:
	//	TypeNameExpCS | TypeLiteralCS;
	public TypeExpCSElements getTypeExpCSAccess() {
		return pTypeExpCS;
	}
	
	public ParserRule getTypeExpCSRule() {
		return getTypeExpCSAccess().getRule();
	}
	
	//NavigatingArgCS:
	//	name=NavigatingArgExpCS (':' ownedType=TypeExpCS)? ('=' init=ExpCS)?;
	public NavigatingArgCSElements getNavigatingArgCSAccess() {
		return pNavigatingArgCS;
	}
	
	public ParserRule getNavigatingArgCSRule() {
		return getNavigatingArgCSAccess().getRule();
	}
	
	//NavigatingBarArgCS:
	//	prefix='|' name=NavigatingArgExpCS (':' ownedType=TypeExpCS)? ('=' init=ExpCS)?;
	public NavigatingBarArgCSElements getNavigatingBarArgCSAccess() {
		return pNavigatingBarArgCS;
	}
	
	public ParserRule getNavigatingBarArgCSRule() {
		return getNavigatingBarArgCSAccess().getRule();
	}
	
	//NavigatingCommaArgCS:
	//	prefix=',' name=NavigatingArgExpCS (':' ownedType=TypeExpCS)? ('=' init=ExpCS)?;
	public NavigatingCommaArgCSElements getNavigatingCommaArgCSAccess() {
		return pNavigatingCommaArgCS;
	}
	
	public ParserRule getNavigatingCommaArgCSRule() {
		return getNavigatingCommaArgCSAccess().getRule();
	}
	
	//NavigatingSemiArgCS:
	//	prefix=';' name=NavigatingArgExpCS (':' ownedType=TypeExpCS)? ('=' init=ExpCS)?;
	public NavigatingSemiArgCSElements getNavigatingSemiArgCSAccess() {
		return pNavigatingSemiArgCS;
	}
	
	public ParserRule getNavigatingSemiArgCSRule() {
		return getNavigatingSemiArgCSAccess().getRule();
	}
	
	//NavigatingArgExpCS ExpCS:
	//	ExpCS;
	public NavigatingArgExpCSElements getNavigatingArgExpCSAccess() {
		return pNavigatingArgExpCS;
	}
	
	public ParserRule getNavigatingArgExpCSRule() {
		return getNavigatingArgExpCSAccess().getRule();
	}
	
	//IfExpCS:
	//	'if' condition=ExpCS
	//	'then' thenExpression=ExpCS
	//	'else' elseExpression=ExpCS
	//	'endif';
	public IfExpCSElements getIfExpCSAccess() {
		return pIfExpCS;
	}
	
	public ParserRule getIfExpCSRule() {
		return getIfExpCSAccess().getRule();
	}
	
	//LetExpCS:
	//	'let' variable+=LetVariableCS (',' variable+=LetVariableCS)*
	//	'in' in=ExpCS;
	public LetExpCSElements getLetExpCSAccess() {
		return pLetExpCS;
	}
	
	public ParserRule getLetExpCSRule() {
		return getLetExpCSAccess().getRule();
	}
	
	//LetVariableCS:
	//	name=UnrestrictedName (':' ownedType=TypeExpCS)? '='
	//	initExpression=ExpCS;
	public LetVariableCSElements getLetVariableCSAccess() {
		return pLetVariableCS;
	}
	
	public ParserRule getLetVariableCSRule() {
		return getLetVariableCSAccess().getRule();
	}
	
	//NestedExpCS:
	//	'(' source=ExpCS ')';
	public NestedExpCSElements getNestedExpCSAccess() {
		return pNestedExpCS;
	}
	
	public ParserRule getNestedExpCSRule() {
		return getNestedExpCSAccess().getRule();
	}
	
	//SelfExpCS:
	//	{SelfExpCS} 'self';
	public SelfExpCSElements getSelfExpCSAccess() {
		return pSelfExpCS;
	}
	
	public ParserRule getSelfExpCSRule() {
		return getSelfExpCSAccess().getRule();
	}
	
	////regola incompleta mancano i tipi 4 e 5 (vedere sotto)
	//PrimaryExpCS:
	//	NavigatingExpCS | SelfExpCS | PrimitiveLiteralExpCS | TupleLiteralExpCS | LetExpCS | IfExpCS | NestedExpCS;
	public PrimaryExpCSElements getPrimaryExpCSAccess() {
		return pPrimaryExpCS;
	}
	
	public ParserRule getPrimaryExpCSRule() {
		return getPrimaryExpCSAccess().getRule();
	}
	
	////regola ricorsiva da sistemare
	///* 
	//PrimaryExpCS:
	//	NavigatingExpCS | SelfExpCS | PrimitiveLiteralExpCS | TupleLiteralExpCS |
	//	CollectionLiteralExpCS | TypeLiteralExpCS | LetExpCS | IfExpCS | NestedExpCS
	//		;*/ NameExpCS:
	//	(namespace+=UnrestrictedName '::' (namespace+=UnreservedName '::')*) element=UnreservedName |
	//	element=UnrestrictedName;
	public NameExpCSElements getNameExpCSAccess() {
		return pNameExpCS;
	}
	
	public ParserRule getNameExpCSRule() {
		return getNameExpCSAccess().getRule();
	}
	
	//ExpCS:
	//	InfixedExpCS;
	public ExpCSElements getExpCSAccess() {
		return pExpCS;
	}
	
	public ParserRule getExpCSRule() {
		return getExpCSAccess().getRule();
	}
	
	//InfixedExpCS:
	//	PrefixedExpCS ({InfixExpCS.ownedExpression+=current} (ownedOperator+=BinaryOperatorCS
	//	ownedExpression+=PrefixedExpCS)+)?;
	public InfixedExpCSElements getInfixedExpCSAccess() {
		return pInfixedExpCS;
	}
	
	public ParserRule getInfixedExpCSRule() {
		return getInfixedExpCSAccess().getRule();
	}
	
	//BinaryOperatorCS:
	//	InfixOperatorCS | NavigationOperatorCS;
	public BinaryOperatorCSElements getBinaryOperatorCSAccess() {
		return pBinaryOperatorCS;
	}
	
	public ParserRule getBinaryOperatorCSRule() {
		return getBinaryOperatorCSAccess().getRule();
	}
	
	//InfixOperatorCS:
	//	name=InfixOperator;
	public InfixOperatorCSElements getInfixOperatorCSAccess() {
		return pInfixOperatorCS;
	}
	
	public ParserRule getInfixOperatorCSRule() {
		return getInfixOperatorCSAccess().getRule();
	}
	
	//NavigationOperatorCS:
	//	name=NavigationOperator;
	public NavigationOperatorCSElements getNavigationOperatorCSAccess() {
		return pNavigationOperatorCS;
	}
	
	public ParserRule getNavigationOperatorCSRule() {
		return getNavigationOperatorCSAccess().getRule();
	}
	
	//PrefixedExpCS:
	//	PrimaryExpCS | {PrefixExpCS} ownedOperator+=UnaryOperatorCS+
	//	ownedExpression=PrimaryExpCS;
	public PrefixedExpCSElements getPrefixedExpCSAccess() {
		return pPrefixedExpCS;
	}
	
	public ParserRule getPrefixedExpCSRule() {
		return getPrefixedExpCSAccess().getRule();
	}
	
	//UnaryOperatorCS:
	//	name=PrefixOperator;
	public UnaryOperatorCSElements getUnaryOperatorCSAccess() {
		return pUnaryOperatorCS;
	}
	
	public ParserRule getUnaryOperatorCSRule() {
		return getUnaryOperatorCSAccess().getRule();
	}
	
	//IndexExpCS:
	//	NameExpCS ({IndexExpCS.namedExp=current}
	//	'[' firstIndexes+=ExpCS (',' firstIndexes+=ExpCS)* ']' ('[' secondIndexes+=ExpCS (',' secondIndexes+=ExpCS)* ']')?)?;
	public IndexExpCSElements getIndexExpCSAccess() {
		return pIndexExpCS;
	}
	
	public ParserRule getIndexExpCSRule() {
		return getIndexExpCSAccess().getRule();
	}
	
	//NavigatingExpCS_Base:
	//	IndexExpCS;
	public NavigatingExpCS_BaseElements getNavigatingExpCS_BaseAccess() {
		return pNavigatingExpCS_Base;
	}
	
	public ParserRule getNavigatingExpCS_BaseRule() {
		return getNavigatingExpCS_BaseAccess().getRule();
	}
	
	//NavigatingExpCS:
	//	NavigatingExpCS_Base ({NavigatingExpCS.namedExp=current}
	//	'(' (argument+=NavigatingArgCS argument+=NavigatingCommaArgCS* (argument+=NavigatingSemiArgCS
	//	argument+=NavigatingCommaArgCS*)? (argument+=NavigatingBarArgCS argument+=NavigatingCommaArgCS*)?)? ')')?;
	public NavigatingExpCSElements getNavigatingExpCSAccess() {
		return pNavigatingExpCS;
	}
	
	public ParserRule getNavigatingExpCSRule() {
		return getNavigatingExpCSAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
}
