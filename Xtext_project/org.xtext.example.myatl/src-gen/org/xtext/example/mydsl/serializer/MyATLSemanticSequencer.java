/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.myATL.ATLDefCS;
import org.xtext.example.mydsl.myATL.ATLParameterCS;
import org.xtext.example.mydsl.myATL.ATLType;
import org.xtext.example.mydsl.myATL.ActionBlock;
import org.xtext.example.mydsl.myATL.Binding;
import org.xtext.example.mydsl.myATL.BindingStat;
import org.xtext.example.mydsl.myATL.BooleanLiteralExpCS;
import org.xtext.example.mydsl.myATL.CalledRule;
import org.xtext.example.mydsl.myATL.CollectionLiteralExpCS;
import org.xtext.example.mydsl.myATL.CollectionLiteralPartCS;
import org.xtext.example.mydsl.myATL.CollectionTypeCS;
import org.xtext.example.mydsl.myATL.ForEachOutPatternElement;
import org.xtext.example.mydsl.myATL.Helper;
import org.xtext.example.mydsl.myATL.IfExpCS;
import org.xtext.example.mydsl.myATL.InPattern;
import org.xtext.example.mydsl.myATL.InPatternElement;
import org.xtext.example.mydsl.myATL.IndexExpCS;
import org.xtext.example.mydsl.myATL.InfixExpCS;
import org.xtext.example.mydsl.myATL.InfixOperatorCS;
import org.xtext.example.mydsl.myATL.InvalidLiteralExpCS;
import org.xtext.example.mydsl.myATL.LetExpCS;
import org.xtext.example.mydsl.myATL.LetVariableCS;
import org.xtext.example.mydsl.myATL.MatchedRule;
import org.xtext.example.mydsl.myATL.Module;
import org.xtext.example.mydsl.myATL.MyATLPackage;
import org.xtext.example.mydsl.myATL.NameExpCS;
import org.xtext.example.mydsl.myATL.NavigatingArgCS;
import org.xtext.example.mydsl.myATL.NavigatingBarArgCS;
import org.xtext.example.mydsl.myATL.NavigatingCommaArgCS;
import org.xtext.example.mydsl.myATL.NavigatingExpCS;
import org.xtext.example.mydsl.myATL.NavigatingSemiArgCS;
import org.xtext.example.mydsl.myATL.NavigationOperatorCS;
import org.xtext.example.mydsl.myATL.NestedExpCS;
import org.xtext.example.mydsl.myATL.NullLiteralExpCS;
import org.xtext.example.mydsl.myATL.NumberLiteralExpCS;
import org.xtext.example.mydsl.myATL.OutPattern;
import org.xtext.example.mydsl.myATL.PrefixExpCS;
import org.xtext.example.mydsl.myATL.PrimitiveTypeCS;
import org.xtext.example.mydsl.myATL.RuleVariableDeclaration;
import org.xtext.example.mydsl.myATL.SelfExpCS;
import org.xtext.example.mydsl.myATL.SimpleOutPatternElement;
import org.xtext.example.mydsl.myATL.StringLiteralExpCS;
import org.xtext.example.mydsl.myATL.TupleLiteralExpCS;
import org.xtext.example.mydsl.myATL.TupleLiteralPartCS;
import org.xtext.example.mydsl.myATL.TupleTypeCS;
import org.xtext.example.mydsl.myATL.TypeLiteralExpCS;
import org.xtext.example.mydsl.myATL.TypeNameExpCS;
import org.xtext.example.mydsl.myATL.UnaryOperatorCS;
import org.xtext.example.mydsl.myATL.UnlimitedNaturalLiteralExpCS;
import org.xtext.example.mydsl.myATL.tuplePartCS;
import org.xtext.example.mydsl.services.MyATLGrammarAccess;

@SuppressWarnings("all")
public class MyATLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyATLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyATLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyATLPackage.ATL_DEF_CS:
				sequence_ATLDefCS(context, (ATLDefCS) semanticObject); 
				return; 
			case MyATLPackage.ATL_PARAMETER_CS:
				sequence_ATLParameterCS(context, (ATLParameterCS) semanticObject); 
				return; 
			case MyATLPackage.ATL_TYPE:
				sequence_ATLType(context, (ATLType) semanticObject); 
				return; 
			case MyATLPackage.ACTION_BLOCK:
				sequence_ActionBlock(context, (ActionBlock) semanticObject); 
				return; 
			case MyATLPackage.BINDING:
				sequence_Binding(context, (Binding) semanticObject); 
				return; 
			case MyATLPackage.BINDING_STAT:
				sequence_BindingStat(context, (BindingStat) semanticObject); 
				return; 
			case MyATLPackage.BOOLEAN_LITERAL_EXP_CS:
				sequence_BooleanLiteralExpCS(context, (BooleanLiteralExpCS) semanticObject); 
				return; 
			case MyATLPackage.CALLED_RULE:
				sequence_CalledRule(context, (CalledRule) semanticObject); 
				return; 
			case MyATLPackage.COLLECTION_LITERAL_EXP_CS:
				sequence_CollectionLiteralExpCS(context, (CollectionLiteralExpCS) semanticObject); 
				return; 
			case MyATLPackage.COLLECTION_LITERAL_PART_CS:
				sequence_CollectionLiteralPartCS(context, (CollectionLiteralPartCS) semanticObject); 
				return; 
			case MyATLPackage.COLLECTION_TYPE_CS:
				sequence_CollectionTypeCS(context, (CollectionTypeCS) semanticObject); 
				return; 
			case MyATLPackage.FOR_EACH_OUT_PATTERN_ELEMENT:
				sequence_ForEachOutPatternElement(context, (ForEachOutPatternElement) semanticObject); 
				return; 
			case MyATLPackage.HELPER:
				sequence_Helper(context, (Helper) semanticObject); 
				return; 
			case MyATLPackage.IF_EXP_CS:
				sequence_IfExpCS(context, (IfExpCS) semanticObject); 
				return; 
			case MyATLPackage.IN_PATTERN:
				sequence_InPattern(context, (InPattern) semanticObject); 
				return; 
			case MyATLPackage.IN_PATTERN_ELEMENT:
				sequence_InPatternElement(context, (InPatternElement) semanticObject); 
				return; 
			case MyATLPackage.INDEX_EXP_CS:
				sequence_IndexExpCS(context, (IndexExpCS) semanticObject); 
				return; 
			case MyATLPackage.INFIX_EXP_CS:
				sequence_InfixedExpCS(context, (InfixExpCS) semanticObject); 
				return; 
			case MyATLPackage.INFIX_OPERATOR_CS:
				sequence_InfixOperatorCS(context, (InfixOperatorCS) semanticObject); 
				return; 
			case MyATLPackage.INVALID_LITERAL_EXP_CS:
				sequence_InvalidLiteralExpCS(context, (InvalidLiteralExpCS) semanticObject); 
				return; 
			case MyATLPackage.LET_EXP_CS:
				sequence_LetExpCS(context, (LetExpCS) semanticObject); 
				return; 
			case MyATLPackage.LET_VARIABLE_CS:
				sequence_LetVariableCS(context, (LetVariableCS) semanticObject); 
				return; 
			case MyATLPackage.MATCHED_RULE:
				sequence_MatchedRule(context, (MatchedRule) semanticObject); 
				return; 
			case MyATLPackage.MODULE:
				sequence_Module(context, (Module) semanticObject); 
				return; 
			case MyATLPackage.NAME_EXP_CS:
				sequence_NameExpCS(context, (NameExpCS) semanticObject); 
				return; 
			case MyATLPackage.NAVIGATING_ARG_CS:
				sequence_NavigatingArgCS(context, (NavigatingArgCS) semanticObject); 
				return; 
			case MyATLPackage.NAVIGATING_BAR_ARG_CS:
				sequence_NavigatingBarArgCS(context, (NavigatingBarArgCS) semanticObject); 
				return; 
			case MyATLPackage.NAVIGATING_COMMA_ARG_CS:
				sequence_NavigatingCommaArgCS(context, (NavigatingCommaArgCS) semanticObject); 
				return; 
			case MyATLPackage.NAVIGATING_EXP_CS:
				sequence_NavigatingExpCS(context, (NavigatingExpCS) semanticObject); 
				return; 
			case MyATLPackage.NAVIGATING_SEMI_ARG_CS:
				sequence_NavigatingSemiArgCS(context, (NavigatingSemiArgCS) semanticObject); 
				return; 
			case MyATLPackage.NAVIGATION_OPERATOR_CS:
				sequence_NavigationOperatorCS(context, (NavigationOperatorCS) semanticObject); 
				return; 
			case MyATLPackage.NESTED_EXP_CS:
				sequence_NestedExpCS(context, (NestedExpCS) semanticObject); 
				return; 
			case MyATLPackage.NULL_LITERAL_EXP_CS:
				sequence_NullLiteralExpCS(context, (NullLiteralExpCS) semanticObject); 
				return; 
			case MyATLPackage.NUMBER_LITERAL_EXP_CS:
				sequence_NumberLiteralExpCS(context, (NumberLiteralExpCS) semanticObject); 
				return; 
			case MyATLPackage.OUT_PATTERN:
				sequence_OutPattern(context, (OutPattern) semanticObject); 
				return; 
			case MyATLPackage.PREFIX_EXP_CS:
				sequence_PrefixedExpCS(context, (PrefixExpCS) semanticObject); 
				return; 
			case MyATLPackage.PRIMITIVE_TYPE_CS:
				sequence_PrimitiveTypeCS(context, (PrimitiveTypeCS) semanticObject); 
				return; 
			case MyATLPackage.RULE_VARIABLE_DECLARATION:
				sequence_RuleVariableDeclaration(context, (RuleVariableDeclaration) semanticObject); 
				return; 
			case MyATLPackage.SELF_EXP_CS:
				sequence_SelfExpCS(context, (SelfExpCS) semanticObject); 
				return; 
			case MyATLPackage.SIMPLE_OUT_PATTERN_ELEMENT:
				sequence_SimpleOutPatternElement(context, (SimpleOutPatternElement) semanticObject); 
				return; 
			case MyATLPackage.STRING_LITERAL_EXP_CS:
				sequence_StringLiteralExpCS(context, (StringLiteralExpCS) semanticObject); 
				return; 
			case MyATLPackage.TUPLE_LITERAL_EXP_CS:
				sequence_TupleLiteralExpCS(context, (TupleLiteralExpCS) semanticObject); 
				return; 
			case MyATLPackage.TUPLE_LITERAL_PART_CS:
				sequence_TupleLiteralPartCS(context, (TupleLiteralPartCS) semanticObject); 
				return; 
			case MyATLPackage.TUPLE_TYPE_CS:
				sequence_TupleTypeCS(context, (TupleTypeCS) semanticObject); 
				return; 
			case MyATLPackage.TYPE_LITERAL_EXP_CS:
				sequence_TypeLiteralExpCS(context, (TypeLiteralExpCS) semanticObject); 
				return; 
			case MyATLPackage.TYPE_NAME_EXP_CS:
				sequence_TypeNameExpCS(context, (TypeNameExpCS) semanticObject); 
				return; 
			case MyATLPackage.UNARY_OPERATOR_CS:
				sequence_UnaryOperatorCS(context, (UnaryOperatorCS) semanticObject); 
				return; 
			case MyATLPackage.UNLIMITED_NATURAL_LITERAL_EXP_CS:
				sequence_UnlimitedNaturalLiteralExpCS(context, (UnlimitedNaturalLiteralExpCS) semanticObject); 
				return; 
			case MyATLPackage.TUPLE_PART_CS:
				sequence_tuplePartCS(context, (tuplePartCS) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ATLDefCS returns ATLDefCS
	 *
	 * Constraint:
	 *     (varName=UnrestrictedName (parameters+=ATLParameterCS parameters+=ATLParameterCS*)? type=ATLType initExpression=ExpCS)
	 */
	protected void sequence_ATLDefCS(ISerializationContext context, ATLDefCS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ATLParameterCS returns ATLParameterCS
	 *
	 * Constraint:
	 *     (varName=UnrestrictedName type=ATLType)
	 */
	protected void sequence_ATLParameterCS(ISerializationContext context, ATLParameterCS semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyATLPackage.Literals.ATL_PARAMETER_CS__VAR_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyATLPackage.Literals.ATL_PARAMETER_CS__VAR_NAME));
			if (transientValues.isValueTransient(semanticObject, MyATLPackage.Literals.ATL_PARAMETER_CS__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyATLPackage.Literals.ATL_PARAMETER_CS__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getATLParameterCSAccess().getVarNameUnrestrictedNameParserRuleCall_0_0(), semanticObject.getVarName());
		feeder.accept(grammarAccess.getATLParameterCSAccess().getTypeATLTypeParserRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ATLType returns ATLType
	 *
	 * Constraint:
	 *     (modelName=ATLModelName? type=TypeExpCS)
	 */
	protected void sequence_ATLType(ISerializationContext context, ATLType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionBlock returns ActionBlock
	 *
	 * Constraint:
	 *     statements+=Statement+
	 */
	protected void sequence_ActionBlock(ISerializationContext context, ActionBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns BindingStat
	 *     BindingStat returns BindingStat
	 *
	 * Constraint:
	 *     (source=ExpCS propertyName=UnrestrictedName value=ExpCS)
	 */
	protected void sequence_BindingStat(ISerializationContext context, BindingStat semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyATLPackage.Literals.BINDING_STAT__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyATLPackage.Literals.BINDING_STAT__SOURCE));
			if (transientValues.isValueTransient(semanticObject, MyATLPackage.Literals.BINDING_STAT__PROPERTY_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyATLPackage.Literals.BINDING_STAT__PROPERTY_NAME));
			if (transientValues.isValueTransient(semanticObject, MyATLPackage.Literals.BINDING_STAT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyATLPackage.Literals.BINDING_STAT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBindingStatAccess().getSourceExpCSParserRuleCall_0_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getBindingStatAccess().getPropertyNameUnrestrictedNameParserRuleCall_2_0(), semanticObject.getPropertyName());
		feeder.accept(grammarAccess.getBindingStatAccess().getValueExpCSParserRuleCall_4_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Binding returns Binding
	 *
	 * Constraint:
	 *     (propertyName=UnrestrictedName value=ExpCS)
	 */
	protected void sequence_Binding(ISerializationContext context, Binding semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyATLPackage.Literals.BINDING__PROPERTY_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyATLPackage.Literals.BINDING__PROPERTY_NAME));
			if (transientValues.isValueTransient(semanticObject, MyATLPackage.Literals.BINDING__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyATLPackage.Literals.BINDING__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBindingAccess().getPropertyNameUnrestrictedNameParserRuleCall_0_0(), semanticObject.getPropertyName());
		feeder.accept(grammarAccess.getBindingAccess().getValueExpCSParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PrimitiveLiteralExpCS returns BooleanLiteralExpCS
	 *     BooleanLiteralExpCS returns BooleanLiteralExpCS
	 *     NavigatingArgExpCS returns BooleanLiteralExpCS
	 *     PrimaryExpCS returns BooleanLiteralExpCS
	 *     ExpCS returns BooleanLiteralExpCS
	 *     InfixedExpCS returns BooleanLiteralExpCS
	 *     InfixedExpCS.InfixExpCS_1_0 returns BooleanLiteralExpCS
	 *     PrefixedExpCS returns BooleanLiteralExpCS
	 *
	 * Constraint:
	 *     (name='true' | name='false')
	 */
	protected void sequence_BooleanLiteralExpCS(ISerializationContext context, BooleanLiteralExpCS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ModuleElement returns CalledRule
	 *     CalledRule returns CalledRule
	 *
	 * Constraint:
	 *     (name=UnrestrictedName variables+=RuleVariableDeclaration* outPattern=OutPattern actionBlock=ActionBlock?)
	 */
	protected void sequence_CalledRule(ISerializationContext context, CalledRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CollectionLiteralExpCS returns CollectionLiteralExpCS
	 *
	 * Constraint:
	 *     (ownedType=CollectionTypeCS (ownedParts+=CollectionLiteralPartCS ownedParts+=CollectionLiteralPartCS*)? backtrack='true')
	 */
	protected void sequence_CollectionLiteralExpCS(ISerializationContext context, CollectionLiteralExpCS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CollectionLiteralPartCS returns CollectionLiteralPartCS
	 *
	 * Constraint:
	 *     (expressionCS=ExpCS lastExpressionCS=ExpCS? backtrack='true')
	 */
	protected void sequence_CollectionLiteralPartCS(ISerializationContext context, CollectionLiteralPartCS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CollectionTypeCS returns CollectionTypeCS
	 *     TypeLiteralCS returns CollectionTypeCS
	 *     TypeExpCS returns CollectionTypeCS
	 *
	 * Constraint:
	 *     (name=CollectionTypeIdentifier (ownedType=TypeExpCS | ownedType=TypeExpCS)? backtrack='true')
	 */
	protected void sequence_CollectionTypeCS(ISerializationContext context, CollectionTypeCS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OutPatternElement returns ForEachOutPatternElement
	 *     ForEachOutPatternElement returns ForEachOutPatternElement
	 *
	 * Constraint:
	 *     collection=ExpCS
	 */
	protected void sequence_ForEachOutPatternElement(ISerializationContext context, ForEachOutPatternElement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyATLPackage.Literals.FOR_EACH_OUT_PATTERN_ELEMENT__COLLECTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyATLPackage.Literals.FOR_EACH_OUT_PATTERN_ELEMENT__COLLECTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getForEachOutPatternElementAccess().getCollectionExpCSParserRuleCall_1_0(), semanticObject.getCollection());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ModuleElement returns Helper
	 *     Helper returns Helper
	 *
	 * Constraint:
	 *     definition=ATLDefCS
	 */
	protected void sequence_Helper(ISerializationContext context, Helper semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyATLPackage.Literals.HELPER__DEFINITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyATLPackage.Literals.HELPER__DEFINITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHelperAccess().getDefinitionATLDefCSParserRuleCall_2_0(), semanticObject.getDefinition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NavigatingArgExpCS returns IfExpCS
	 *     IfExpCS returns IfExpCS
	 *     PrimaryExpCS returns IfExpCS
	 *     ExpCS returns IfExpCS
	 *     InfixedExpCS returns IfExpCS
	 *     InfixedExpCS.InfixExpCS_1_0 returns IfExpCS
	 *     PrefixedExpCS returns IfExpCS
	 *
	 * Constraint:
	 *     (condition=ExpCS thenExpression=ExpCS elseExpression=ExpCS)
	 */
	protected void sequence_IfExpCS(ISerializationContext context, IfExpCS semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyATLPackage.Literals.IF_EXP_CS__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyATLPackage.Literals.IF_EXP_CS__CONDITION));
			if (transientValues.isValueTransient(semanticObject, MyATLPackage.Literals.IF_EXP_CS__THEN_EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyATLPackage.Literals.IF_EXP_CS__THEN_EXPRESSION));
			if (transientValues.isValueTransient(semanticObject, MyATLPackage.Literals.IF_EXP_CS__ELSE_EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyATLPackage.Literals.IF_EXP_CS__ELSE_EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIfExpCSAccess().getConditionExpCSParserRuleCall_1_0(), semanticObject.getCondition());
		feeder.accept(grammarAccess.getIfExpCSAccess().getThenExpressionExpCSParserRuleCall_3_0(), semanticObject.getThenExpression());
		feeder.accept(grammarAccess.getIfExpCSAccess().getElseExpressionExpCSParserRuleCall_5_0(), semanticObject.getElseExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InPatternElement returns InPatternElement
	 *
	 * Constraint:
	 *     (varName=UnrestrictedName type=ATLType)
	 */
	protected void sequence_InPatternElement(ISerializationContext context, InPatternElement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyATLPackage.Literals.IN_PATTERN_ELEMENT__VAR_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyATLPackage.Literals.IN_PATTERN_ELEMENT__VAR_NAME));
			if (transientValues.isValueTransient(semanticObject, MyATLPackage.Literals.IN_PATTERN_ELEMENT__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyATLPackage.Literals.IN_PATTERN_ELEMENT__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInPatternElementAccess().getVarNameUnrestrictedNameParserRuleCall_0_0(), semanticObject.getVarName());
		feeder.accept(grammarAccess.getInPatternElementAccess().getTypeATLTypeParserRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InPattern returns InPattern
	 *
	 * Constraint:
	 *     (elements+=InPatternElement filter=ExpCS?)
	 */
	protected void sequence_InPattern(ISerializationContext context, InPattern semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NavigatingArgExpCS returns IndexExpCS
	 *     PrimaryExpCS returns IndexExpCS
	 *     ExpCS returns IndexExpCS
	 *     InfixedExpCS returns IndexExpCS
	 *     InfixedExpCS.InfixExpCS_1_0 returns IndexExpCS
	 *     PrefixedExpCS returns IndexExpCS
	 *     IndexExpCS returns IndexExpCS
	 *     NavigatingExpCS_Base returns IndexExpCS
	 *     NavigatingExpCS returns IndexExpCS
	 *     NavigatingExpCS.NavigatingExpCS_1_0 returns IndexExpCS
	 *
	 * Constraint:
	 *     (namedExp=IndexExpCS_IndexExpCS_1_0 firstIndexes+=ExpCS firstIndexes+=ExpCS* (secondIndexes+=ExpCS secondIndexes+=ExpCS*)?)
	 */
	protected void sequence_IndexExpCS(ISerializationContext context, IndexExpCS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BinaryOperatorCS returns InfixOperatorCS
	 *     InfixOperatorCS returns InfixOperatorCS
	 *
	 * Constraint:
	 *     name=InfixOperator
	 */
	protected void sequence_InfixOperatorCS(ISerializationContext context, InfixOperatorCS semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyATLPackage.Literals.BINARY_OPERATOR_CS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyATLPackage.Literals.BINARY_OPERATOR_CS__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInfixOperatorCSAccess().getNameInfixOperatorParserRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NavigatingArgExpCS returns InfixExpCS
	 *     ExpCS returns InfixExpCS
	 *     InfixedExpCS returns InfixExpCS
	 *
	 * Constraint:
	 *     (ownedExpression+=InfixedExpCS_InfixExpCS_1_0 (ownedOperator+=BinaryOperatorCS ownedExpression+=PrefixedExpCS)+)
	 */
	protected void sequence_InfixedExpCS(ISerializationContext context, InfixExpCS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PrimitiveLiteralExpCS returns InvalidLiteralExpCS
	 *     InvalidLiteralExpCS returns InvalidLiteralExpCS
	 *     NavigatingArgExpCS returns InvalidLiteralExpCS
	 *     PrimaryExpCS returns InvalidLiteralExpCS
	 *     ExpCS returns InvalidLiteralExpCS
	 *     InfixedExpCS returns InvalidLiteralExpCS
	 *     InfixedExpCS.InfixExpCS_1_0 returns InvalidLiteralExpCS
	 *     PrefixedExpCS returns InvalidLiteralExpCS
	 *
	 * Constraint:
	 *     {InvalidLiteralExpCS}
	 */
	protected void sequence_InvalidLiteralExpCS(ISerializationContext context, InvalidLiteralExpCS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NavigatingArgExpCS returns LetExpCS
	 *     LetExpCS returns LetExpCS
	 *     PrimaryExpCS returns LetExpCS
	 *     ExpCS returns LetExpCS
	 *     InfixedExpCS returns LetExpCS
	 *     InfixedExpCS.InfixExpCS_1_0 returns LetExpCS
	 *     PrefixedExpCS returns LetExpCS
	 *
	 * Constraint:
	 *     (variable+=LetVariableCS variable+=LetVariableCS* in=ExpCS)
	 */
	protected void sequence_LetExpCS(ISerializationContext context, LetExpCS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LetVariableCS returns LetVariableCS
	 *
	 * Constraint:
	 *     (name=UnrestrictedName ownedType=TypeExpCS? initExpression=ExpCS)
	 */
	protected void sequence_LetVariableCS(ISerializationContext context, LetVariableCS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ModuleElement returns MatchedRule
	 *     MatchedRule returns MatchedRule
	 *
	 * Constraint:
	 *     (name=UnrestrictedName inPattern=InPattern variables+=RuleVariableDeclaration* outPattern=OutPattern actionBlock=ActionBlock?)
	 */
	protected void sequence_MatchedRule(ISerializationContext context, MatchedRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Module returns Module
	 *
	 * Constraint:
	 *     (
	 *         name=UnrestrictedName 
	 *         outModels+=NameExpCS 
	 *         outModels+=NameExpCS* 
	 *         inModels+=NameExpCS 
	 *         inModels+=NameExpCS* 
	 *         elements+=ModuleElement*
	 *     )
	 */
	protected void sequence_Module(ISerializationContext context, Module semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NavigatingArgExpCS returns NameExpCS
	 *     PrimaryExpCS returns NameExpCS
	 *     NameExpCS returns NameExpCS
	 *     ExpCS returns NameExpCS
	 *     InfixedExpCS returns NameExpCS
	 *     InfixedExpCS.InfixExpCS_1_0 returns NameExpCS
	 *     PrefixedExpCS returns NameExpCS
	 *     IndexExpCS returns NameExpCS
	 *     IndexExpCS.IndexExpCS_1_0 returns NameExpCS
	 *     NavigatingExpCS_Base returns NameExpCS
	 *     NavigatingExpCS returns NameExpCS
	 *     NavigatingExpCS.NavigatingExpCS_1_0 returns NameExpCS
	 *
	 * Constraint:
	 *     ((namespace+=UnrestrictedName namespace+=UnreservedName* element=UnreservedName) | element=UnrestrictedName)
	 */
	protected void sequence_NameExpCS(ISerializationContext context, NameExpCS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NavigatingArgCS returns NavigatingArgCS
	 *
	 * Constraint:
	 *     (name=NavigatingArgExpCS ownedType=TypeExpCS? init=ExpCS?)
	 */
	protected void sequence_NavigatingArgCS(ISerializationContext context, NavigatingArgCS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NavigatingBarArgCS returns NavigatingBarArgCS
	 *
	 * Constraint:
	 *     (prefix='|' name=NavigatingArgExpCS ownedType=TypeExpCS? init=ExpCS?)
	 */
	protected void sequence_NavigatingBarArgCS(ISerializationContext context, NavigatingBarArgCS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NavigatingCommaArgCS returns NavigatingCommaArgCS
	 *
	 * Constraint:
	 *     (prefix=',' name=NavigatingArgExpCS ownedType=TypeExpCS? init=ExpCS?)
	 */
	protected void sequence_NavigatingCommaArgCS(ISerializationContext context, NavigatingCommaArgCS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NavigatingArgExpCS returns NavigatingExpCS
	 *     PrimaryExpCS returns NavigatingExpCS
	 *     ExpCS returns NavigatingExpCS
	 *     InfixedExpCS returns NavigatingExpCS
	 *     InfixedExpCS.InfixExpCS_1_0 returns NavigatingExpCS
	 *     PrefixedExpCS returns NavigatingExpCS
	 *     NavigatingExpCS returns NavigatingExpCS
	 *
	 * Constraint:
	 *     (
	 *         namedExp=NavigatingExpCS_NavigatingExpCS_1_0 
	 *         (
	 *             argument+=NavigatingArgCS 
	 *             argument+=NavigatingCommaArgCS* 
	 *             (argument+=NavigatingSemiArgCS argument+=NavigatingCommaArgCS*)? 
	 *             (argument+=NavigatingBarArgCS argument+=NavigatingCommaArgCS*)?
	 *         )?
	 *     )
	 */
	protected void sequence_NavigatingExpCS(ISerializationContext context, NavigatingExpCS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NavigatingSemiArgCS returns NavigatingSemiArgCS
	 *
	 * Constraint:
	 *     (prefix=';' name=NavigatingArgExpCS ownedType=TypeExpCS? init=ExpCS?)
	 */
	protected void sequence_NavigatingSemiArgCS(ISerializationContext context, NavigatingSemiArgCS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BinaryOperatorCS returns NavigationOperatorCS
	 *     NavigationOperatorCS returns NavigationOperatorCS
	 *
	 * Constraint:
	 *     name=NavigationOperator
	 */
	protected void sequence_NavigationOperatorCS(ISerializationContext context, NavigationOperatorCS semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyATLPackage.Literals.BINARY_OPERATOR_CS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyATLPackage.Literals.BINARY_OPERATOR_CS__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNavigationOperatorCSAccess().getNameNavigationOperatorParserRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NavigatingArgExpCS returns NestedExpCS
	 *     NestedExpCS returns NestedExpCS
	 *     PrimaryExpCS returns NestedExpCS
	 *     ExpCS returns NestedExpCS
	 *     InfixedExpCS returns NestedExpCS
	 *     InfixedExpCS.InfixExpCS_1_0 returns NestedExpCS
	 *     PrefixedExpCS returns NestedExpCS
	 *
	 * Constraint:
	 *     source=ExpCS
	 */
	protected void sequence_NestedExpCS(ISerializationContext context, NestedExpCS semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyATLPackage.Literals.NESTED_EXP_CS__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyATLPackage.Literals.NESTED_EXP_CS__SOURCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNestedExpCSAccess().getSourceExpCSParserRuleCall_1_0(), semanticObject.getSource());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PrimitiveLiteralExpCS returns NullLiteralExpCS
	 *     NullLiteralExpCS returns NullLiteralExpCS
	 *     NavigatingArgExpCS returns NullLiteralExpCS
	 *     PrimaryExpCS returns NullLiteralExpCS
	 *     ExpCS returns NullLiteralExpCS
	 *     InfixedExpCS returns NullLiteralExpCS
	 *     InfixedExpCS.InfixExpCS_1_0 returns NullLiteralExpCS
	 *     PrefixedExpCS returns NullLiteralExpCS
	 *
	 * Constraint:
	 *     {NullLiteralExpCS}
	 */
	protected void sequence_NullLiteralExpCS(ISerializationContext context, NullLiteralExpCS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PrimitiveLiteralExpCS returns NumberLiteralExpCS
	 *     NumberLiteralExpCS returns NumberLiteralExpCS
	 *     NavigatingArgExpCS returns NumberLiteralExpCS
	 *     PrimaryExpCS returns NumberLiteralExpCS
	 *     ExpCS returns NumberLiteralExpCS
	 *     InfixedExpCS returns NumberLiteralExpCS
	 *     InfixedExpCS.InfixExpCS_1_0 returns NumberLiteralExpCS
	 *     PrefixedExpCS returns NumberLiteralExpCS
	 *
	 * Constraint:
	 *     name=BIG_INT
	 */
	protected void sequence_NumberLiteralExpCS(ISerializationContext context, NumberLiteralExpCS semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyATLPackage.Literals.NUMBER_LITERAL_EXP_CS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyATLPackage.Literals.NUMBER_LITERAL_EXP_CS__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumberLiteralExpCSAccess().getNameBIG_INTTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OutPattern returns OutPattern
	 *
	 * Constraint:
	 *     (elements+=OutPatternElement elements+=OutPatternElement*)
	 */
	protected void sequence_OutPattern(ISerializationContext context, OutPattern semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NavigatingArgExpCS returns PrefixExpCS
	 *     ExpCS returns PrefixExpCS
	 *     InfixedExpCS returns PrefixExpCS
	 *     InfixedExpCS.InfixExpCS_1_0 returns PrefixExpCS
	 *     PrefixedExpCS returns PrefixExpCS
	 *
	 * Constraint:
	 *     (ownedOperator+=UnaryOperatorCS+ ownedExpression=PrimaryExpCS)
	 */
	protected void sequence_PrefixedExpCS(ISerializationContext context, PrefixExpCS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PrimitiveTypeCS returns PrimitiveTypeCS
	 *     TypeLiteralCS returns PrimitiveTypeCS
	 *     TypeExpCS returns PrimitiveTypeCS
	 *
	 * Constraint:
	 *     name=PrimitiveTypeIdentifier
	 */
	protected void sequence_PrimitiveTypeCS(ISerializationContext context, PrimitiveTypeCS semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyATLPackage.Literals.TYPE_LITERAL_CS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyATLPackage.Literals.TYPE_LITERAL_CS__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrimitiveTypeCSAccess().getNamePrimitiveTypeIdentifierParserRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RuleVariableDeclaration returns RuleVariableDeclaration
	 *
	 * Constraint:
	 *     (varName=UnrestrictedName type=ATLType initExpression=ExpCS)
	 */
	protected void sequence_RuleVariableDeclaration(ISerializationContext context, RuleVariableDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyATLPackage.Literals.RULE_VARIABLE_DECLARATION__VAR_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyATLPackage.Literals.RULE_VARIABLE_DECLARATION__VAR_NAME));
			if (transientValues.isValueTransient(semanticObject, MyATLPackage.Literals.RULE_VARIABLE_DECLARATION__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyATLPackage.Literals.RULE_VARIABLE_DECLARATION__TYPE));
			if (transientValues.isValueTransient(semanticObject, MyATLPackage.Literals.RULE_VARIABLE_DECLARATION__INIT_EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyATLPackage.Literals.RULE_VARIABLE_DECLARATION__INIT_EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRuleVariableDeclarationAccess().getVarNameUnrestrictedNameParserRuleCall_0_0(), semanticObject.getVarName());
		feeder.accept(grammarAccess.getRuleVariableDeclarationAccess().getTypeATLTypeParserRuleCall_2_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getRuleVariableDeclarationAccess().getInitExpressionExpCSParserRuleCall_4_0(), semanticObject.getInitExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NavigatingArgExpCS returns SelfExpCS
	 *     SelfExpCS returns SelfExpCS
	 *     PrimaryExpCS returns SelfExpCS
	 *     ExpCS returns SelfExpCS
	 *     InfixedExpCS returns SelfExpCS
	 *     InfixedExpCS.InfixExpCS_1_0 returns SelfExpCS
	 *     PrefixedExpCS returns SelfExpCS
	 *
	 * Constraint:
	 *     {SelfExpCS}
	 */
	protected void sequence_SelfExpCS(ISerializationContext context, SelfExpCS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OutPatternElement returns SimpleOutPatternElement
	 *     SimpleOutPatternElement returns SimpleOutPatternElement
	 *
	 * Constraint:
	 *     (varName=UnrestrictedName type=ATLType (bindings+=Binding bindings+=Binding*)?)
	 */
	protected void sequence_SimpleOutPatternElement(ISerializationContext context, SimpleOutPatternElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PrimitiveLiteralExpCS returns StringLiteralExpCS
	 *     StringLiteralExpCS returns StringLiteralExpCS
	 *     NavigatingArgExpCS returns StringLiteralExpCS
	 *     PrimaryExpCS returns StringLiteralExpCS
	 *     ExpCS returns StringLiteralExpCS
	 *     InfixedExpCS returns StringLiteralExpCS
	 *     InfixedExpCS.InfixExpCS_1_0 returns StringLiteralExpCS
	 *     PrefixedExpCS returns StringLiteralExpCS
	 *
	 * Constraint:
	 *     name+=StringLiteral
	 */
	protected void sequence_StringLiteralExpCS(ISerializationContext context, StringLiteralExpCS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TupleLiteralExpCS returns TupleLiteralExpCS
	 *     NavigatingArgExpCS returns TupleLiteralExpCS
	 *     PrimaryExpCS returns TupleLiteralExpCS
	 *     ExpCS returns TupleLiteralExpCS
	 *     InfixedExpCS returns TupleLiteralExpCS
	 *     InfixedExpCS.InfixExpCS_1_0 returns TupleLiteralExpCS
	 *     PrefixedExpCS returns TupleLiteralExpCS
	 *
	 * Constraint:
	 *     (ownedParts+=TupleLiteralPartCS ownedParts+=TupleLiteralPartCS*)
	 */
	protected void sequence_TupleLiteralExpCS(ISerializationContext context, TupleLiteralExpCS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TupleLiteralPartCS returns TupleLiteralPartCS
	 *
	 * Constraint:
	 *     (name=UnrestrictedName ownedType=TypeExpCS? initExpression=ExpCS)
	 */
	protected void sequence_TupleLiteralPartCS(ISerializationContext context, TupleLiteralPartCS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TupleTypeCS returns TupleTypeCS
	 *     TypeLiteralCS returns TupleTypeCS
	 *     TypeExpCS returns TupleTypeCS
	 *
	 * Constraint:
	 *     (name='Tuple' ((ownedParts+=tuplePartCS ownedParts+=tuplePartCS*) | (ownedParts+=tuplePartCS ownedParts+=tuplePartCS*))? backtrack='true')
	 */
	protected void sequence_TupleTypeCS(ISerializationContext context, TupleTypeCS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeLiteralExpCS returns TypeLiteralExpCS
	 *
	 * Constraint:
	 *     (ownedType=TypeLiteralCS backtrack='true')
	 */
	protected void sequence_TypeLiteralExpCS(ISerializationContext context, TypeLiteralExpCS semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyATLPackage.Literals.TYPE_LITERAL_EXP_CS__OWNED_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyATLPackage.Literals.TYPE_LITERAL_EXP_CS__OWNED_TYPE));
			if (transientValues.isValueTransient(semanticObject, MyATLPackage.Literals.TYPE_LITERAL_EXP_CS__BACKTRACK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyATLPackage.Literals.TYPE_LITERAL_EXP_CS__BACKTRACK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeLiteralExpCSAccess().getOwnedTypeTypeLiteralCSParserRuleCall_0_0(), semanticObject.getOwnedType());
		feeder.accept(grammarAccess.getTypeLiteralExpCSAccess().getBacktrackTrueKeyword_1_0(), semanticObject.getBacktrack());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TypeNameExpCS returns TypeNameExpCS
	 *     TypeExpCS returns TypeNameExpCS
	 *
	 * Constraint:
	 *     ((namespace+=UnrestrictedName namespace+=UnreservedName* element=UnreservedName) | element=UnrestrictedName)
	 */
	protected void sequence_TypeNameExpCS(ISerializationContext context, TypeNameExpCS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UnaryOperatorCS returns UnaryOperatorCS
	 *
	 * Constraint:
	 *     name=PrefixOperator
	 */
	protected void sequence_UnaryOperatorCS(ISerializationContext context, UnaryOperatorCS semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyATLPackage.Literals.UNARY_OPERATOR_CS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyATLPackage.Literals.UNARY_OPERATOR_CS__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUnaryOperatorCSAccess().getNamePrefixOperatorParserRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PrimitiveLiteralExpCS returns UnlimitedNaturalLiteralExpCS
	 *     UnlimitedNaturalLiteralExpCS returns UnlimitedNaturalLiteralExpCS
	 *     NavigatingArgExpCS returns UnlimitedNaturalLiteralExpCS
	 *     PrimaryExpCS returns UnlimitedNaturalLiteralExpCS
	 *     ExpCS returns UnlimitedNaturalLiteralExpCS
	 *     InfixedExpCS returns UnlimitedNaturalLiteralExpCS
	 *     InfixedExpCS.InfixExpCS_1_0 returns UnlimitedNaturalLiteralExpCS
	 *     PrefixedExpCS returns UnlimitedNaturalLiteralExpCS
	 *
	 * Constraint:
	 *     {UnlimitedNaturalLiteralExpCS}
	 */
	protected void sequence_UnlimitedNaturalLiteralExpCS(ISerializationContext context, UnlimitedNaturalLiteralExpCS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     tuplePartCS returns tuplePartCS
	 *
	 * Constraint:
	 *     (name=UnrestrictedName ownedType=TypeExpCS)
	 */
	protected void sequence_tuplePartCS(ISerializationContext context, tuplePartCS semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyATLPackage.Literals.TUPLE_PART_CS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyATLPackage.Literals.TUPLE_PART_CS__NAME));
			if (transientValues.isValueTransient(semanticObject, MyATLPackage.Literals.TUPLE_PART_CS__OWNED_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyATLPackage.Literals.TUPLE_PART_CS__OWNED_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTuplePartCSAccess().getNameUnrestrictedNameParserRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getTuplePartCSAccess().getOwnedTypeTypeExpCSParserRuleCall_2_0(), semanticObject.getOwnedType());
		feeder.finish();
	}
	
	
}
