/**
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.myATL.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.xtext.example.mydsl.myATL.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.xtext.example.mydsl.myATL.MyATLPackage
 * @generated
 */
public class MyATLAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MyATLPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyATLAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = MyATLPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MyATLSwitch<Adapter> modelSwitch =
    new MyATLSwitch<Adapter>()
    {
      @Override
      public Adapter caseModule(Module object)
      {
        return createModuleAdapter();
      }
      @Override
      public Adapter caseModuleElement(ModuleElement object)
      {
        return createModuleElementAdapter();
      }
      @Override
      public Adapter caseMatchedRule(MatchedRule object)
      {
        return createMatchedRuleAdapter();
      }
      @Override
      public Adapter caseCalledRule(CalledRule object)
      {
        return createCalledRuleAdapter();
      }
      @Override
      public Adapter caseHelper(Helper object)
      {
        return createHelperAdapter();
      }
      @Override
      public Adapter caseATLDefCS(ATLDefCS object)
      {
        return createATLDefCSAdapter();
      }
      @Override
      public Adapter caseATLParameterCS(ATLParameterCS object)
      {
        return createATLParameterCSAdapter();
      }
      @Override
      public Adapter caseRuleVariableDeclaration(RuleVariableDeclaration object)
      {
        return createRuleVariableDeclarationAdapter();
      }
      @Override
      public Adapter caseInPattern(InPattern object)
      {
        return createInPatternAdapter();
      }
      @Override
      public Adapter caseInPatternElement(InPatternElement object)
      {
        return createInPatternElementAdapter();
      }
      @Override
      public Adapter caseOutPattern(OutPattern object)
      {
        return createOutPatternAdapter();
      }
      @Override
      public Adapter caseOutPatternElement(OutPatternElement object)
      {
        return createOutPatternElementAdapter();
      }
      @Override
      public Adapter caseSimpleOutPatternElement(SimpleOutPatternElement object)
      {
        return createSimpleOutPatternElementAdapter();
      }
      @Override
      public Adapter caseForEachOutPatternElement(ForEachOutPatternElement object)
      {
        return createForEachOutPatternElementAdapter();
      }
      @Override
      public Adapter caseBinding(Binding object)
      {
        return createBindingAdapter();
      }
      @Override
      public Adapter caseActionBlock(ActionBlock object)
      {
        return createActionBlockAdapter();
      }
      @Override
      public Adapter caseStatement(Statement object)
      {
        return createStatementAdapter();
      }
      @Override
      public Adapter caseBindingStat(BindingStat object)
      {
        return createBindingStatAdapter();
      }
      @Override
      public Adapter caseATLType(ATLType object)
      {
        return createATLTypeAdapter();
      }
      @Override
      public Adapter caseCollectionTypeCS(CollectionTypeCS object)
      {
        return createCollectionTypeCSAdapter();
      }
      @Override
      public Adapter caseTupleTypeCS(TupleTypeCS object)
      {
        return createTupleTypeCSAdapter();
      }
      @Override
      public Adapter casetuplePartCS(tuplePartCS object)
      {
        return createtuplePartCSAdapter();
      }
      @Override
      public Adapter caseCollectionLiteralExpCS(CollectionLiteralExpCS object)
      {
        return createCollectionLiteralExpCSAdapter();
      }
      @Override
      public Adapter caseCollectionLiteralPartCS(CollectionLiteralPartCS object)
      {
        return createCollectionLiteralPartCSAdapter();
      }
      @Override
      public Adapter casePrimitiveLiteralExpCS(PrimitiveLiteralExpCS object)
      {
        return createPrimitiveLiteralExpCSAdapter();
      }
      @Override
      public Adapter caseTupleLiteralExpCS(TupleLiteralExpCS object)
      {
        return createTupleLiteralExpCSAdapter();
      }
      @Override
      public Adapter caseTupleLiteralPartCS(TupleLiteralPartCS object)
      {
        return createTupleLiteralPartCSAdapter();
      }
      @Override
      public Adapter caseNumberLiteralExpCS(NumberLiteralExpCS object)
      {
        return createNumberLiteralExpCSAdapter();
      }
      @Override
      public Adapter caseStringLiteralExpCS(StringLiteralExpCS object)
      {
        return createStringLiteralExpCSAdapter();
      }
      @Override
      public Adapter caseBooleanLiteralExpCS(BooleanLiteralExpCS object)
      {
        return createBooleanLiteralExpCSAdapter();
      }
      @Override
      public Adapter caseUnlimitedNaturalLiteralExpCS(UnlimitedNaturalLiteralExpCS object)
      {
        return createUnlimitedNaturalLiteralExpCSAdapter();
      }
      @Override
      public Adapter caseInvalidLiteralExpCS(InvalidLiteralExpCS object)
      {
        return createInvalidLiteralExpCSAdapter();
      }
      @Override
      public Adapter caseNullLiteralExpCS(NullLiteralExpCS object)
      {
        return createNullLiteralExpCSAdapter();
      }
      @Override
      public Adapter casePrimitiveTypeCS(PrimitiveTypeCS object)
      {
        return createPrimitiveTypeCSAdapter();
      }
      @Override
      public Adapter caseTypeLiteralCS(TypeLiteralCS object)
      {
        return createTypeLiteralCSAdapter();
      }
      @Override
      public Adapter caseTypeLiteralExpCS(TypeLiteralExpCS object)
      {
        return createTypeLiteralExpCSAdapter();
      }
      @Override
      public Adapter caseTypeNameExpCS(TypeNameExpCS object)
      {
        return createTypeNameExpCSAdapter();
      }
      @Override
      public Adapter caseTypeExpCS(TypeExpCS object)
      {
        return createTypeExpCSAdapter();
      }
      @Override
      public Adapter caseNavigatingArgCS(NavigatingArgCS object)
      {
        return createNavigatingArgCSAdapter();
      }
      @Override
      public Adapter caseNavigatingBarArgCS(NavigatingBarArgCS object)
      {
        return createNavigatingBarArgCSAdapter();
      }
      @Override
      public Adapter caseNavigatingCommaArgCS(NavigatingCommaArgCS object)
      {
        return createNavigatingCommaArgCSAdapter();
      }
      @Override
      public Adapter caseNavigatingSemiArgCS(NavigatingSemiArgCS object)
      {
        return createNavigatingSemiArgCSAdapter();
      }
      @Override
      public Adapter caseExpCS(ExpCS object)
      {
        return createExpCSAdapter();
      }
      @Override
      public Adapter caseIfExpCS(IfExpCS object)
      {
        return createIfExpCSAdapter();
      }
      @Override
      public Adapter caseLetExpCS(LetExpCS object)
      {
        return createLetExpCSAdapter();
      }
      @Override
      public Adapter caseLetVariableCS(LetVariableCS object)
      {
        return createLetVariableCSAdapter();
      }
      @Override
      public Adapter caseNestedExpCS(NestedExpCS object)
      {
        return createNestedExpCSAdapter();
      }
      @Override
      public Adapter caseSelfExpCS(SelfExpCS object)
      {
        return createSelfExpCSAdapter();
      }
      @Override
      public Adapter casePrimaryExpCS(PrimaryExpCS object)
      {
        return createPrimaryExpCSAdapter();
      }
      @Override
      public Adapter caseNameExpCS(NameExpCS object)
      {
        return createNameExpCSAdapter();
      }
      @Override
      public Adapter caseInfixedExpCS(InfixedExpCS object)
      {
        return createInfixedExpCSAdapter();
      }
      @Override
      public Adapter caseBinaryOperatorCS(BinaryOperatorCS object)
      {
        return createBinaryOperatorCSAdapter();
      }
      @Override
      public Adapter caseInfixOperatorCS(InfixOperatorCS object)
      {
        return createInfixOperatorCSAdapter();
      }
      @Override
      public Adapter caseNavigationOperatorCS(NavigationOperatorCS object)
      {
        return createNavigationOperatorCSAdapter();
      }
      @Override
      public Adapter casePrefixedExpCS(PrefixedExpCS object)
      {
        return createPrefixedExpCSAdapter();
      }
      @Override
      public Adapter caseUnaryOperatorCS(UnaryOperatorCS object)
      {
        return createUnaryOperatorCSAdapter();
      }
      @Override
      public Adapter caseIndexExpCS(IndexExpCS object)
      {
        return createIndexExpCSAdapter();
      }
      @Override
      public Adapter caseNavigatingExpCS_Base(NavigatingExpCS_Base object)
      {
        return createNavigatingExpCS_BaseAdapter();
      }
      @Override
      public Adapter caseNavigatingExpCS(NavigatingExpCS object)
      {
        return createNavigatingExpCSAdapter();
      }
      @Override
      public Adapter caseInfixExpCS(InfixExpCS object)
      {
        return createInfixExpCSAdapter();
      }
      @Override
      public Adapter casePrefixExpCS(PrefixExpCS object)
      {
        return createPrefixExpCSAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.Module <em>Module</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.Module
   * @generated
   */
  public Adapter createModuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.ModuleElement <em>Module Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.ModuleElement
   * @generated
   */
  public Adapter createModuleElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.MatchedRule <em>Matched Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.MatchedRule
   * @generated
   */
  public Adapter createMatchedRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.CalledRule <em>Called Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.CalledRule
   * @generated
   */
  public Adapter createCalledRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.Helper <em>Helper</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.Helper
   * @generated
   */
  public Adapter createHelperAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.ATLDefCS <em>ATL Def CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.ATLDefCS
   * @generated
   */
  public Adapter createATLDefCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.ATLParameterCS <em>ATL Parameter CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.ATLParameterCS
   * @generated
   */
  public Adapter createATLParameterCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.RuleVariableDeclaration <em>Rule Variable Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.RuleVariableDeclaration
   * @generated
   */
  public Adapter createRuleVariableDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.InPattern <em>In Pattern</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.InPattern
   * @generated
   */
  public Adapter createInPatternAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.InPatternElement <em>In Pattern Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.InPatternElement
   * @generated
   */
  public Adapter createInPatternElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.OutPattern <em>Out Pattern</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.OutPattern
   * @generated
   */
  public Adapter createOutPatternAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.OutPatternElement <em>Out Pattern Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.OutPatternElement
   * @generated
   */
  public Adapter createOutPatternElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.SimpleOutPatternElement <em>Simple Out Pattern Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.SimpleOutPatternElement
   * @generated
   */
  public Adapter createSimpleOutPatternElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.ForEachOutPatternElement <em>For Each Out Pattern Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.ForEachOutPatternElement
   * @generated
   */
  public Adapter createForEachOutPatternElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.Binding <em>Binding</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.Binding
   * @generated
   */
  public Adapter createBindingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.ActionBlock <em>Action Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.ActionBlock
   * @generated
   */
  public Adapter createActionBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.Statement <em>Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.Statement
   * @generated
   */
  public Adapter createStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.BindingStat <em>Binding Stat</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.BindingStat
   * @generated
   */
  public Adapter createBindingStatAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.ATLType <em>ATL Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.ATLType
   * @generated
   */
  public Adapter createATLTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.CollectionTypeCS <em>Collection Type CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.CollectionTypeCS
   * @generated
   */
  public Adapter createCollectionTypeCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.TupleTypeCS <em>Tuple Type CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.TupleTypeCS
   * @generated
   */
  public Adapter createTupleTypeCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.tuplePartCS <em>tuple Part CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.tuplePartCS
   * @generated
   */
  public Adapter createtuplePartCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.CollectionLiteralExpCS <em>Collection Literal Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.CollectionLiteralExpCS
   * @generated
   */
  public Adapter createCollectionLiteralExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.CollectionLiteralPartCS <em>Collection Literal Part CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.CollectionLiteralPartCS
   * @generated
   */
  public Adapter createCollectionLiteralPartCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.PrimitiveLiteralExpCS <em>Primitive Literal Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.PrimitiveLiteralExpCS
   * @generated
   */
  public Adapter createPrimitiveLiteralExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.TupleLiteralExpCS <em>Tuple Literal Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.TupleLiteralExpCS
   * @generated
   */
  public Adapter createTupleLiteralExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.TupleLiteralPartCS <em>Tuple Literal Part CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.TupleLiteralPartCS
   * @generated
   */
  public Adapter createTupleLiteralPartCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.NumberLiteralExpCS <em>Number Literal Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.NumberLiteralExpCS
   * @generated
   */
  public Adapter createNumberLiteralExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.StringLiteralExpCS <em>String Literal Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.StringLiteralExpCS
   * @generated
   */
  public Adapter createStringLiteralExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.BooleanLiteralExpCS <em>Boolean Literal Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.BooleanLiteralExpCS
   * @generated
   */
  public Adapter createBooleanLiteralExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.UnlimitedNaturalLiteralExpCS <em>Unlimited Natural Literal Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.UnlimitedNaturalLiteralExpCS
   * @generated
   */
  public Adapter createUnlimitedNaturalLiteralExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.InvalidLiteralExpCS <em>Invalid Literal Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.InvalidLiteralExpCS
   * @generated
   */
  public Adapter createInvalidLiteralExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.NullLiteralExpCS <em>Null Literal Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.NullLiteralExpCS
   * @generated
   */
  public Adapter createNullLiteralExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.PrimitiveTypeCS <em>Primitive Type CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.PrimitiveTypeCS
   * @generated
   */
  public Adapter createPrimitiveTypeCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.TypeLiteralCS <em>Type Literal CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.TypeLiteralCS
   * @generated
   */
  public Adapter createTypeLiteralCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.TypeLiteralExpCS <em>Type Literal Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.TypeLiteralExpCS
   * @generated
   */
  public Adapter createTypeLiteralExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.TypeNameExpCS <em>Type Name Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.TypeNameExpCS
   * @generated
   */
  public Adapter createTypeNameExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.TypeExpCS <em>Type Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.TypeExpCS
   * @generated
   */
  public Adapter createTypeExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.NavigatingArgCS <em>Navigating Arg CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.NavigatingArgCS
   * @generated
   */
  public Adapter createNavigatingArgCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.NavigatingBarArgCS <em>Navigating Bar Arg CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.NavigatingBarArgCS
   * @generated
   */
  public Adapter createNavigatingBarArgCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.NavigatingCommaArgCS <em>Navigating Comma Arg CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.NavigatingCommaArgCS
   * @generated
   */
  public Adapter createNavigatingCommaArgCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.NavigatingSemiArgCS <em>Navigating Semi Arg CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.NavigatingSemiArgCS
   * @generated
   */
  public Adapter createNavigatingSemiArgCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.ExpCS <em>Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.ExpCS
   * @generated
   */
  public Adapter createExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.IfExpCS <em>If Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.IfExpCS
   * @generated
   */
  public Adapter createIfExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.LetExpCS <em>Let Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.LetExpCS
   * @generated
   */
  public Adapter createLetExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.LetVariableCS <em>Let Variable CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.LetVariableCS
   * @generated
   */
  public Adapter createLetVariableCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.NestedExpCS <em>Nested Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.NestedExpCS
   * @generated
   */
  public Adapter createNestedExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.SelfExpCS <em>Self Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.SelfExpCS
   * @generated
   */
  public Adapter createSelfExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.PrimaryExpCS <em>Primary Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.PrimaryExpCS
   * @generated
   */
  public Adapter createPrimaryExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.NameExpCS <em>Name Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.NameExpCS
   * @generated
   */
  public Adapter createNameExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.InfixedExpCS <em>Infixed Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.InfixedExpCS
   * @generated
   */
  public Adapter createInfixedExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.BinaryOperatorCS <em>Binary Operator CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.BinaryOperatorCS
   * @generated
   */
  public Adapter createBinaryOperatorCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.InfixOperatorCS <em>Infix Operator CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.InfixOperatorCS
   * @generated
   */
  public Adapter createInfixOperatorCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.NavigationOperatorCS <em>Navigation Operator CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.NavigationOperatorCS
   * @generated
   */
  public Adapter createNavigationOperatorCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.PrefixedExpCS <em>Prefixed Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.PrefixedExpCS
   * @generated
   */
  public Adapter createPrefixedExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.UnaryOperatorCS <em>Unary Operator CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.UnaryOperatorCS
   * @generated
   */
  public Adapter createUnaryOperatorCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.IndexExpCS <em>Index Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.IndexExpCS
   * @generated
   */
  public Adapter createIndexExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.NavigatingExpCS_Base <em>Navigating Exp CS Base</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.NavigatingExpCS_Base
   * @generated
   */
  public Adapter createNavigatingExpCS_BaseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.NavigatingExpCS <em>Navigating Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.NavigatingExpCS
   * @generated
   */
  public Adapter createNavigatingExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.InfixExpCS <em>Infix Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.InfixExpCS
   * @generated
   */
  public Adapter createInfixExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myATL.PrefixExpCS <em>Prefix Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myATL.PrefixExpCS
   * @generated
   */
  public Adapter createPrefixExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //MyATLAdapterFactory
