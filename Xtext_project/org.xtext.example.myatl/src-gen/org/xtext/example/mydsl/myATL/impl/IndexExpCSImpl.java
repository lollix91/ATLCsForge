/**
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.myATL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.myATL.ExpCS;
import org.xtext.example.mydsl.myATL.IndexExpCS;
import org.xtext.example.mydsl.myATL.MyATLPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Index Exp CS</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myATL.impl.IndexExpCSImpl#getFirstIndexes <em>First Indexes</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myATL.impl.IndexExpCSImpl#getSecondIndexes <em>Second Indexes</em>}</li>
 * </ul>
 *
 * @generated
 */
public class IndexExpCSImpl extends NavigatingExpCS_BaseImpl implements IndexExpCS
{
  /**
   * The cached value of the '{@link #getFirstIndexes() <em>First Indexes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFirstIndexes()
   * @generated
   * @ordered
   */
  protected EList<ExpCS> firstIndexes;

  /**
   * The cached value of the '{@link #getSecondIndexes() <em>Second Indexes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSecondIndexes()
   * @generated
   * @ordered
   */
  protected EList<ExpCS> secondIndexes;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IndexExpCSImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyATLPackage.Literals.INDEX_EXP_CS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ExpCS> getFirstIndexes()
  {
    if (firstIndexes == null)
    {
      firstIndexes = new EObjectContainmentEList<ExpCS>(ExpCS.class, this, MyATLPackage.INDEX_EXP_CS__FIRST_INDEXES);
    }
    return firstIndexes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ExpCS> getSecondIndexes()
  {
    if (secondIndexes == null)
    {
      secondIndexes = new EObjectContainmentEList<ExpCS>(ExpCS.class, this, MyATLPackage.INDEX_EXP_CS__SECOND_INDEXES);
    }
    return secondIndexes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyATLPackage.INDEX_EXP_CS__FIRST_INDEXES:
        return ((InternalEList<?>)getFirstIndexes()).basicRemove(otherEnd, msgs);
      case MyATLPackage.INDEX_EXP_CS__SECOND_INDEXES:
        return ((InternalEList<?>)getSecondIndexes()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyATLPackage.INDEX_EXP_CS__FIRST_INDEXES:
        return getFirstIndexes();
      case MyATLPackage.INDEX_EXP_CS__SECOND_INDEXES:
        return getSecondIndexes();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyATLPackage.INDEX_EXP_CS__FIRST_INDEXES:
        getFirstIndexes().clear();
        getFirstIndexes().addAll((Collection<? extends ExpCS>)newValue);
        return;
      case MyATLPackage.INDEX_EXP_CS__SECOND_INDEXES:
        getSecondIndexes().clear();
        getSecondIndexes().addAll((Collection<? extends ExpCS>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyATLPackage.INDEX_EXP_CS__FIRST_INDEXES:
        getFirstIndexes().clear();
        return;
      case MyATLPackage.INDEX_EXP_CS__SECOND_INDEXES:
        getSecondIndexes().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyATLPackage.INDEX_EXP_CS__FIRST_INDEXES:
        return firstIndexes != null && !firstIndexes.isEmpty();
      case MyATLPackage.INDEX_EXP_CS__SECOND_INDEXES:
        return secondIndexes != null && !secondIndexes.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //IndexExpCSImpl
