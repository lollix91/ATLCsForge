/**
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.myATL.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.xtext.example.mydsl.myATL.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.xtext.example.mydsl.myATL.MyATLPackage
 * @generated
 */
public class MyATLSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MyATLPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyATLSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = MyATLPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case MyATLPackage.MODULE:
      {
        Module module = (Module)theEObject;
        T result = caseModule(module);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.MODULE_ELEMENT:
      {
        ModuleElement moduleElement = (ModuleElement)theEObject;
        T result = caseModuleElement(moduleElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.MATCHED_RULE:
      {
        MatchedRule matchedRule = (MatchedRule)theEObject;
        T result = caseMatchedRule(matchedRule);
        if (result == null) result = caseModuleElement(matchedRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.CALLED_RULE:
      {
        CalledRule calledRule = (CalledRule)theEObject;
        T result = caseCalledRule(calledRule);
        if (result == null) result = caseModuleElement(calledRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.HELPER:
      {
        Helper helper = (Helper)theEObject;
        T result = caseHelper(helper);
        if (result == null) result = caseModuleElement(helper);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.ATL_DEF_CS:
      {
        ATLDefCS atlDefCS = (ATLDefCS)theEObject;
        T result = caseATLDefCS(atlDefCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.ATL_PARAMETER_CS:
      {
        ATLParameterCS atlParameterCS = (ATLParameterCS)theEObject;
        T result = caseATLParameterCS(atlParameterCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.RULE_VARIABLE_DECLARATION:
      {
        RuleVariableDeclaration ruleVariableDeclaration = (RuleVariableDeclaration)theEObject;
        T result = caseRuleVariableDeclaration(ruleVariableDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.IN_PATTERN:
      {
        InPattern inPattern = (InPattern)theEObject;
        T result = caseInPattern(inPattern);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.IN_PATTERN_ELEMENT:
      {
        InPatternElement inPatternElement = (InPatternElement)theEObject;
        T result = caseInPatternElement(inPatternElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.OUT_PATTERN:
      {
        OutPattern outPattern = (OutPattern)theEObject;
        T result = caseOutPattern(outPattern);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.OUT_PATTERN_ELEMENT:
      {
        OutPatternElement outPatternElement = (OutPatternElement)theEObject;
        T result = caseOutPatternElement(outPatternElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.SIMPLE_OUT_PATTERN_ELEMENT:
      {
        SimpleOutPatternElement simpleOutPatternElement = (SimpleOutPatternElement)theEObject;
        T result = caseSimpleOutPatternElement(simpleOutPatternElement);
        if (result == null) result = caseOutPatternElement(simpleOutPatternElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.FOR_EACH_OUT_PATTERN_ELEMENT:
      {
        ForEachOutPatternElement forEachOutPatternElement = (ForEachOutPatternElement)theEObject;
        T result = caseForEachOutPatternElement(forEachOutPatternElement);
        if (result == null) result = caseOutPatternElement(forEachOutPatternElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.BINDING:
      {
        Binding binding = (Binding)theEObject;
        T result = caseBinding(binding);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.ACTION_BLOCK:
      {
        ActionBlock actionBlock = (ActionBlock)theEObject;
        T result = caseActionBlock(actionBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.STATEMENT:
      {
        Statement statement = (Statement)theEObject;
        T result = caseStatement(statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.BINDING_STAT:
      {
        BindingStat bindingStat = (BindingStat)theEObject;
        T result = caseBindingStat(bindingStat);
        if (result == null) result = caseStatement(bindingStat);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.ATL_TYPE:
      {
        ATLType atlType = (ATLType)theEObject;
        T result = caseATLType(atlType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.COLLECTION_TYPE_CS:
      {
        CollectionTypeCS collectionTypeCS = (CollectionTypeCS)theEObject;
        T result = caseCollectionTypeCS(collectionTypeCS);
        if (result == null) result = caseTypeLiteralCS(collectionTypeCS);
        if (result == null) result = caseTypeExpCS(collectionTypeCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.TUPLE_TYPE_CS:
      {
        TupleTypeCS tupleTypeCS = (TupleTypeCS)theEObject;
        T result = caseTupleTypeCS(tupleTypeCS);
        if (result == null) result = caseTypeLiteralCS(tupleTypeCS);
        if (result == null) result = caseTypeExpCS(tupleTypeCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.TUPLE_PART_CS:
      {
        tuplePartCS tuplePartCS = (tuplePartCS)theEObject;
        T result = casetuplePartCS(tuplePartCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.COLLECTION_LITERAL_EXP_CS:
      {
        CollectionLiteralExpCS collectionLiteralExpCS = (CollectionLiteralExpCS)theEObject;
        T result = caseCollectionLiteralExpCS(collectionLiteralExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.COLLECTION_LITERAL_PART_CS:
      {
        CollectionLiteralPartCS collectionLiteralPartCS = (CollectionLiteralPartCS)theEObject;
        T result = caseCollectionLiteralPartCS(collectionLiteralPartCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.PRIMITIVE_LITERAL_EXP_CS:
      {
        PrimitiveLiteralExpCS primitiveLiteralExpCS = (PrimitiveLiteralExpCS)theEObject;
        T result = casePrimitiveLiteralExpCS(primitiveLiteralExpCS);
        if (result == null) result = casePrimaryExpCS(primitiveLiteralExpCS);
        if (result == null) result = casePrefixedExpCS(primitiveLiteralExpCS);
        if (result == null) result = caseInfixedExpCS(primitiveLiteralExpCS);
        if (result == null) result = caseExpCS(primitiveLiteralExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.TUPLE_LITERAL_EXP_CS:
      {
        TupleLiteralExpCS tupleLiteralExpCS = (TupleLiteralExpCS)theEObject;
        T result = caseTupleLiteralExpCS(tupleLiteralExpCS);
        if (result == null) result = casePrimaryExpCS(tupleLiteralExpCS);
        if (result == null) result = casePrefixedExpCS(tupleLiteralExpCS);
        if (result == null) result = caseInfixedExpCS(tupleLiteralExpCS);
        if (result == null) result = caseExpCS(tupleLiteralExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.TUPLE_LITERAL_PART_CS:
      {
        TupleLiteralPartCS tupleLiteralPartCS = (TupleLiteralPartCS)theEObject;
        T result = caseTupleLiteralPartCS(tupleLiteralPartCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.NUMBER_LITERAL_EXP_CS:
      {
        NumberLiteralExpCS numberLiteralExpCS = (NumberLiteralExpCS)theEObject;
        T result = caseNumberLiteralExpCS(numberLiteralExpCS);
        if (result == null) result = casePrimitiveLiteralExpCS(numberLiteralExpCS);
        if (result == null) result = casePrimaryExpCS(numberLiteralExpCS);
        if (result == null) result = casePrefixedExpCS(numberLiteralExpCS);
        if (result == null) result = caseInfixedExpCS(numberLiteralExpCS);
        if (result == null) result = caseExpCS(numberLiteralExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.STRING_LITERAL_EXP_CS:
      {
        StringLiteralExpCS stringLiteralExpCS = (StringLiteralExpCS)theEObject;
        T result = caseStringLiteralExpCS(stringLiteralExpCS);
        if (result == null) result = casePrimitiveLiteralExpCS(stringLiteralExpCS);
        if (result == null) result = casePrimaryExpCS(stringLiteralExpCS);
        if (result == null) result = casePrefixedExpCS(stringLiteralExpCS);
        if (result == null) result = caseInfixedExpCS(stringLiteralExpCS);
        if (result == null) result = caseExpCS(stringLiteralExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.BOOLEAN_LITERAL_EXP_CS:
      {
        BooleanLiteralExpCS booleanLiteralExpCS = (BooleanLiteralExpCS)theEObject;
        T result = caseBooleanLiteralExpCS(booleanLiteralExpCS);
        if (result == null) result = casePrimitiveLiteralExpCS(booleanLiteralExpCS);
        if (result == null) result = casePrimaryExpCS(booleanLiteralExpCS);
        if (result == null) result = casePrefixedExpCS(booleanLiteralExpCS);
        if (result == null) result = caseInfixedExpCS(booleanLiteralExpCS);
        if (result == null) result = caseExpCS(booleanLiteralExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.UNLIMITED_NATURAL_LITERAL_EXP_CS:
      {
        UnlimitedNaturalLiteralExpCS unlimitedNaturalLiteralExpCS = (UnlimitedNaturalLiteralExpCS)theEObject;
        T result = caseUnlimitedNaturalLiteralExpCS(unlimitedNaturalLiteralExpCS);
        if (result == null) result = casePrimitiveLiteralExpCS(unlimitedNaturalLiteralExpCS);
        if (result == null) result = casePrimaryExpCS(unlimitedNaturalLiteralExpCS);
        if (result == null) result = casePrefixedExpCS(unlimitedNaturalLiteralExpCS);
        if (result == null) result = caseInfixedExpCS(unlimitedNaturalLiteralExpCS);
        if (result == null) result = caseExpCS(unlimitedNaturalLiteralExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.INVALID_LITERAL_EXP_CS:
      {
        InvalidLiteralExpCS invalidLiteralExpCS = (InvalidLiteralExpCS)theEObject;
        T result = caseInvalidLiteralExpCS(invalidLiteralExpCS);
        if (result == null) result = casePrimitiveLiteralExpCS(invalidLiteralExpCS);
        if (result == null) result = casePrimaryExpCS(invalidLiteralExpCS);
        if (result == null) result = casePrefixedExpCS(invalidLiteralExpCS);
        if (result == null) result = caseInfixedExpCS(invalidLiteralExpCS);
        if (result == null) result = caseExpCS(invalidLiteralExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.NULL_LITERAL_EXP_CS:
      {
        NullLiteralExpCS nullLiteralExpCS = (NullLiteralExpCS)theEObject;
        T result = caseNullLiteralExpCS(nullLiteralExpCS);
        if (result == null) result = casePrimitiveLiteralExpCS(nullLiteralExpCS);
        if (result == null) result = casePrimaryExpCS(nullLiteralExpCS);
        if (result == null) result = casePrefixedExpCS(nullLiteralExpCS);
        if (result == null) result = caseInfixedExpCS(nullLiteralExpCS);
        if (result == null) result = caseExpCS(nullLiteralExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.PRIMITIVE_TYPE_CS:
      {
        PrimitiveTypeCS primitiveTypeCS = (PrimitiveTypeCS)theEObject;
        T result = casePrimitiveTypeCS(primitiveTypeCS);
        if (result == null) result = caseTypeLiteralCS(primitiveTypeCS);
        if (result == null) result = caseTypeExpCS(primitiveTypeCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.TYPE_LITERAL_CS:
      {
        TypeLiteralCS typeLiteralCS = (TypeLiteralCS)theEObject;
        T result = caseTypeLiteralCS(typeLiteralCS);
        if (result == null) result = caseTypeExpCS(typeLiteralCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.TYPE_LITERAL_EXP_CS:
      {
        TypeLiteralExpCS typeLiteralExpCS = (TypeLiteralExpCS)theEObject;
        T result = caseTypeLiteralExpCS(typeLiteralExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.TYPE_NAME_EXP_CS:
      {
        TypeNameExpCS typeNameExpCS = (TypeNameExpCS)theEObject;
        T result = caseTypeNameExpCS(typeNameExpCS);
        if (result == null) result = caseTypeExpCS(typeNameExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.TYPE_EXP_CS:
      {
        TypeExpCS typeExpCS = (TypeExpCS)theEObject;
        T result = caseTypeExpCS(typeExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.NAVIGATING_ARG_CS:
      {
        NavigatingArgCS navigatingArgCS = (NavigatingArgCS)theEObject;
        T result = caseNavigatingArgCS(navigatingArgCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.NAVIGATING_BAR_ARG_CS:
      {
        NavigatingBarArgCS navigatingBarArgCS = (NavigatingBarArgCS)theEObject;
        T result = caseNavigatingBarArgCS(navigatingBarArgCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.NAVIGATING_COMMA_ARG_CS:
      {
        NavigatingCommaArgCS navigatingCommaArgCS = (NavigatingCommaArgCS)theEObject;
        T result = caseNavigatingCommaArgCS(navigatingCommaArgCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.NAVIGATING_SEMI_ARG_CS:
      {
        NavigatingSemiArgCS navigatingSemiArgCS = (NavigatingSemiArgCS)theEObject;
        T result = caseNavigatingSemiArgCS(navigatingSemiArgCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.EXP_CS:
      {
        ExpCS expCS = (ExpCS)theEObject;
        T result = caseExpCS(expCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.IF_EXP_CS:
      {
        IfExpCS ifExpCS = (IfExpCS)theEObject;
        T result = caseIfExpCS(ifExpCS);
        if (result == null) result = casePrimaryExpCS(ifExpCS);
        if (result == null) result = casePrefixedExpCS(ifExpCS);
        if (result == null) result = caseInfixedExpCS(ifExpCS);
        if (result == null) result = caseExpCS(ifExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.LET_EXP_CS:
      {
        LetExpCS letExpCS = (LetExpCS)theEObject;
        T result = caseLetExpCS(letExpCS);
        if (result == null) result = casePrimaryExpCS(letExpCS);
        if (result == null) result = casePrefixedExpCS(letExpCS);
        if (result == null) result = caseInfixedExpCS(letExpCS);
        if (result == null) result = caseExpCS(letExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.LET_VARIABLE_CS:
      {
        LetVariableCS letVariableCS = (LetVariableCS)theEObject;
        T result = caseLetVariableCS(letVariableCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.NESTED_EXP_CS:
      {
        NestedExpCS nestedExpCS = (NestedExpCS)theEObject;
        T result = caseNestedExpCS(nestedExpCS);
        if (result == null) result = casePrimaryExpCS(nestedExpCS);
        if (result == null) result = casePrefixedExpCS(nestedExpCS);
        if (result == null) result = caseInfixedExpCS(nestedExpCS);
        if (result == null) result = caseExpCS(nestedExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.SELF_EXP_CS:
      {
        SelfExpCS selfExpCS = (SelfExpCS)theEObject;
        T result = caseSelfExpCS(selfExpCS);
        if (result == null) result = casePrimaryExpCS(selfExpCS);
        if (result == null) result = casePrefixedExpCS(selfExpCS);
        if (result == null) result = caseInfixedExpCS(selfExpCS);
        if (result == null) result = caseExpCS(selfExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.PRIMARY_EXP_CS:
      {
        PrimaryExpCS primaryExpCS = (PrimaryExpCS)theEObject;
        T result = casePrimaryExpCS(primaryExpCS);
        if (result == null) result = casePrefixedExpCS(primaryExpCS);
        if (result == null) result = caseInfixedExpCS(primaryExpCS);
        if (result == null) result = caseExpCS(primaryExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.NAME_EXP_CS:
      {
        NameExpCS nameExpCS = (NameExpCS)theEObject;
        T result = caseNameExpCS(nameExpCS);
        if (result == null) result = caseIndexExpCS(nameExpCS);
        if (result == null) result = caseNavigatingExpCS_Base(nameExpCS);
        if (result == null) result = caseNavigatingExpCS(nameExpCS);
        if (result == null) result = casePrimaryExpCS(nameExpCS);
        if (result == null) result = casePrefixedExpCS(nameExpCS);
        if (result == null) result = caseInfixedExpCS(nameExpCS);
        if (result == null) result = caseExpCS(nameExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.INFIXED_EXP_CS:
      {
        InfixedExpCS infixedExpCS = (InfixedExpCS)theEObject;
        T result = caseInfixedExpCS(infixedExpCS);
        if (result == null) result = caseExpCS(infixedExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.BINARY_OPERATOR_CS:
      {
        BinaryOperatorCS binaryOperatorCS = (BinaryOperatorCS)theEObject;
        T result = caseBinaryOperatorCS(binaryOperatorCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.INFIX_OPERATOR_CS:
      {
        InfixOperatorCS infixOperatorCS = (InfixOperatorCS)theEObject;
        T result = caseInfixOperatorCS(infixOperatorCS);
        if (result == null) result = caseBinaryOperatorCS(infixOperatorCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.NAVIGATION_OPERATOR_CS:
      {
        NavigationOperatorCS navigationOperatorCS = (NavigationOperatorCS)theEObject;
        T result = caseNavigationOperatorCS(navigationOperatorCS);
        if (result == null) result = caseBinaryOperatorCS(navigationOperatorCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.PREFIXED_EXP_CS:
      {
        PrefixedExpCS prefixedExpCS = (PrefixedExpCS)theEObject;
        T result = casePrefixedExpCS(prefixedExpCS);
        if (result == null) result = caseInfixedExpCS(prefixedExpCS);
        if (result == null) result = caseExpCS(prefixedExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.UNARY_OPERATOR_CS:
      {
        UnaryOperatorCS unaryOperatorCS = (UnaryOperatorCS)theEObject;
        T result = caseUnaryOperatorCS(unaryOperatorCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.INDEX_EXP_CS:
      {
        IndexExpCS indexExpCS = (IndexExpCS)theEObject;
        T result = caseIndexExpCS(indexExpCS);
        if (result == null) result = caseNavigatingExpCS_Base(indexExpCS);
        if (result == null) result = caseNavigatingExpCS(indexExpCS);
        if (result == null) result = casePrimaryExpCS(indexExpCS);
        if (result == null) result = casePrefixedExpCS(indexExpCS);
        if (result == null) result = caseInfixedExpCS(indexExpCS);
        if (result == null) result = caseExpCS(indexExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.NAVIGATING_EXP_CS_BASE:
      {
        NavigatingExpCS_Base navigatingExpCS_Base = (NavigatingExpCS_Base)theEObject;
        T result = caseNavigatingExpCS_Base(navigatingExpCS_Base);
        if (result == null) result = caseNavigatingExpCS(navigatingExpCS_Base);
        if (result == null) result = casePrimaryExpCS(navigatingExpCS_Base);
        if (result == null) result = casePrefixedExpCS(navigatingExpCS_Base);
        if (result == null) result = caseInfixedExpCS(navigatingExpCS_Base);
        if (result == null) result = caseExpCS(navigatingExpCS_Base);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.NAVIGATING_EXP_CS:
      {
        NavigatingExpCS navigatingExpCS = (NavigatingExpCS)theEObject;
        T result = caseNavigatingExpCS(navigatingExpCS);
        if (result == null) result = casePrimaryExpCS(navigatingExpCS);
        if (result == null) result = casePrefixedExpCS(navigatingExpCS);
        if (result == null) result = caseInfixedExpCS(navigatingExpCS);
        if (result == null) result = caseExpCS(navigatingExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.INFIX_EXP_CS:
      {
        InfixExpCS infixExpCS = (InfixExpCS)theEObject;
        T result = caseInfixExpCS(infixExpCS);
        if (result == null) result = caseInfixedExpCS(infixExpCS);
        if (result == null) result = caseExpCS(infixExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyATLPackage.PREFIX_EXP_CS:
      {
        PrefixExpCS prefixExpCS = (PrefixExpCS)theEObject;
        T result = casePrefixExpCS(prefixExpCS);
        if (result == null) result = casePrefixedExpCS(prefixExpCS);
        if (result == null) result = caseInfixedExpCS(prefixExpCS);
        if (result == null) result = caseExpCS(prefixExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Module</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Module</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModule(Module object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Module Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Module Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModuleElement(ModuleElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Matched Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Matched Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMatchedRule(MatchedRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Called Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Called Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCalledRule(CalledRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Helper</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Helper</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseHelper(Helper object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ATL Def CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ATL Def CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseATLDefCS(ATLDefCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ATL Parameter CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ATL Parameter CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseATLParameterCS(ATLParameterCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rule Variable Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rule Variable Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRuleVariableDeclaration(RuleVariableDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>In Pattern</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>In Pattern</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInPattern(InPattern object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>In Pattern Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>In Pattern Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInPatternElement(InPatternElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Out Pattern</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Out Pattern</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutPattern(OutPattern object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Out Pattern Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Out Pattern Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutPatternElement(OutPatternElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Simple Out Pattern Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Simple Out Pattern Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSimpleOutPatternElement(SimpleOutPatternElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>For Each Out Pattern Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>For Each Out Pattern Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseForEachOutPatternElement(ForEachOutPatternElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Binding</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Binding</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBinding(Binding object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Action Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Action Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseActionBlock(ActionBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatement(Statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Binding Stat</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Binding Stat</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBindingStat(BindingStat object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ATL Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ATL Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseATLType(ATLType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Collection Type CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Collection Type CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCollectionTypeCS(CollectionTypeCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tuple Type CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tuple Type CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTupleTypeCS(TupleTypeCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>tuple Part CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>tuple Part CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetuplePartCS(tuplePartCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Collection Literal Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Collection Literal Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCollectionLiteralExpCS(CollectionLiteralExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Collection Literal Part CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Collection Literal Part CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCollectionLiteralPartCS(CollectionLiteralPartCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primitive Literal Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primitive Literal Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimitiveLiteralExpCS(PrimitiveLiteralExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tuple Literal Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tuple Literal Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTupleLiteralExpCS(TupleLiteralExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tuple Literal Part CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tuple Literal Part CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTupleLiteralPartCS(TupleLiteralPartCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Number Literal Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Number Literal Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNumberLiteralExpCS(NumberLiteralExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Literal Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Literal Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringLiteralExpCS(StringLiteralExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Literal Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Literal Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanLiteralExpCS(BooleanLiteralExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unlimited Natural Literal Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unlimited Natural Literal Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnlimitedNaturalLiteralExpCS(UnlimitedNaturalLiteralExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Invalid Literal Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Invalid Literal Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInvalidLiteralExpCS(InvalidLiteralExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Null Literal Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Null Literal Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNullLiteralExpCS(NullLiteralExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primitive Type CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primitive Type CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimitiveTypeCS(PrimitiveTypeCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Literal CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Literal CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeLiteralCS(TypeLiteralCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Literal Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Literal Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeLiteralExpCS(TypeLiteralExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Name Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Name Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeNameExpCS(TypeNameExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeExpCS(TypeExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Navigating Arg CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Navigating Arg CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNavigatingArgCS(NavigatingArgCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Navigating Bar Arg CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Navigating Bar Arg CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNavigatingBarArgCS(NavigatingBarArgCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Navigating Comma Arg CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Navigating Comma Arg CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNavigatingCommaArgCS(NavigatingCommaArgCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Navigating Semi Arg CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Navigating Semi Arg CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNavigatingSemiArgCS(NavigatingSemiArgCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpCS(ExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>If Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>If Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIfExpCS(IfExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Let Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Let Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLetExpCS(LetExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Let Variable CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Let Variable CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLetVariableCS(LetVariableCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Nested Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Nested Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNestedExpCS(NestedExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Self Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Self Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSelfExpCS(SelfExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primary Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primary Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimaryExpCS(PrimaryExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Name Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Name Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNameExpCS(NameExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Infixed Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Infixed Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInfixedExpCS(InfixedExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Binary Operator CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Binary Operator CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBinaryOperatorCS(BinaryOperatorCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Infix Operator CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Infix Operator CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInfixOperatorCS(InfixOperatorCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Navigation Operator CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Navigation Operator CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNavigationOperatorCS(NavigationOperatorCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Prefixed Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Prefixed Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrefixedExpCS(PrefixedExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unary Operator CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unary Operator CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnaryOperatorCS(UnaryOperatorCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Index Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Index Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIndexExpCS(IndexExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Navigating Exp CS Base</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Navigating Exp CS Base</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNavigatingExpCS_Base(NavigatingExpCS_Base object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Navigating Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Navigating Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNavigatingExpCS(NavigatingExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Infix Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Infix Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInfixExpCS(InfixExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Prefix Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Prefix Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrefixExpCS(PrefixExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //MyATLSwitch
