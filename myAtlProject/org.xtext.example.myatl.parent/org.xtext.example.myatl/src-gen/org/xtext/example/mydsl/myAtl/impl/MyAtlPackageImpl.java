/**
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.myAtl.impl;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

import org.xtext.example.mydsl.myAtl.ATLDefCS;
import org.xtext.example.mydsl.myAtl.ATLParameterCS;
import org.xtext.example.mydsl.myAtl.ATLType;
import org.xtext.example.mydsl.myAtl.ActionBlock;
import org.xtext.example.mydsl.myAtl.BinaryOperatorCS;
import org.xtext.example.mydsl.myAtl.Binding;
import org.xtext.example.mydsl.myAtl.BindingStat;
import org.xtext.example.mydsl.myAtl.BooleanLiteralExpCS;
import org.xtext.example.mydsl.myAtl.CalledRule;
import org.xtext.example.mydsl.myAtl.CollectionTypeCS;
import org.xtext.example.mydsl.myAtl.ExpCS;
import org.xtext.example.mydsl.myAtl.ForEachOutPatternElement;
import org.xtext.example.mydsl.myAtl.Helper;
import org.xtext.example.mydsl.myAtl.IfExpCS;
import org.xtext.example.mydsl.myAtl.InPattern;
import org.xtext.example.mydsl.myAtl.InPatternElement;
import org.xtext.example.mydsl.myAtl.IndexExpCS;
import org.xtext.example.mydsl.myAtl.InfixExpCS;
import org.xtext.example.mydsl.myAtl.InfixOperatorCS;
import org.xtext.example.mydsl.myAtl.InfixedExpCS;
import org.xtext.example.mydsl.myAtl.InvalidLiteralExpCS;
import org.xtext.example.mydsl.myAtl.LetExpCS;
import org.xtext.example.mydsl.myAtl.LetVariableCS;
import org.xtext.example.mydsl.myAtl.MatchedRule;
import org.xtext.example.mydsl.myAtl.Module;
import org.xtext.example.mydsl.myAtl.ModuleElement;
import org.xtext.example.mydsl.myAtl.MyAtlFactory;
import org.xtext.example.mydsl.myAtl.MyAtlPackage;
import org.xtext.example.mydsl.myAtl.NameExpCS;
import org.xtext.example.mydsl.myAtl.NavigatingArgCS;
import org.xtext.example.mydsl.myAtl.NavigatingArgExpCS;
import org.xtext.example.mydsl.myAtl.NavigatingBarArgCS;
import org.xtext.example.mydsl.myAtl.NavigatingCommaArgCS;
import org.xtext.example.mydsl.myAtl.NavigatingExpCS;
import org.xtext.example.mydsl.myAtl.NavigatingExpCS_Base;
import org.xtext.example.mydsl.myAtl.NavigatingSemiArgCS;
import org.xtext.example.mydsl.myAtl.NavigationOperatorCS;
import org.xtext.example.mydsl.myAtl.NestedExpCS;
import org.xtext.example.mydsl.myAtl.NullLiteralExpCS;
import org.xtext.example.mydsl.myAtl.NumberLiteralExpCS;
import org.xtext.example.mydsl.myAtl.OutPattern;
import org.xtext.example.mydsl.myAtl.OutPatternElement;
import org.xtext.example.mydsl.myAtl.PrefixExpCS;
import org.xtext.example.mydsl.myAtl.PrefixedExpCS;
import org.xtext.example.mydsl.myAtl.PrimaryExpCS;
import org.xtext.example.mydsl.myAtl.PrimitiveLiteralExpCS;
import org.xtext.example.mydsl.myAtl.PrimitiveTypeCS;
import org.xtext.example.mydsl.myAtl.QueryRule;
import org.xtext.example.mydsl.myAtl.RuleVariableDeclaration;
import org.xtext.example.mydsl.myAtl.SelfExpCS;
import org.xtext.example.mydsl.myAtl.SimpleOutPatternElement;
import org.xtext.example.mydsl.myAtl.Statement;
import org.xtext.example.mydsl.myAtl.StringExpCs;
import org.xtext.example.mydsl.myAtl.StringLiteralExpCS;
import org.xtext.example.mydsl.myAtl.TupleLiteralExpCS;
import org.xtext.example.mydsl.myAtl.TupleLiteralPartCS;
import org.xtext.example.mydsl.myAtl.TupleTypeCS;
import org.xtext.example.mydsl.myAtl.TypeExpCS;
import org.xtext.example.mydsl.myAtl.TypeLiteralCS;
import org.xtext.example.mydsl.myAtl.TypeLiteralExpCS;
import org.xtext.example.mydsl.myAtl.TypeNameExpCS;
import org.xtext.example.mydsl.myAtl.UnaryOperatorCS;
import org.xtext.example.mydsl.myAtl.UnlimitedNaturalLiteralExpCS;
import org.xtext.example.mydsl.myAtl.tuplePartCS;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MyAtlPackageImpl extends EPackageImpl implements MyAtlPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass moduleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass moduleElementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass matchedRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass calledRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass queryRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass helperEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass atlDefCSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass atlParameterCSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass ruleVariableDeclarationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass inPatternEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass inPatternElementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass outPatternEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass outPatternElementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass simpleOutPatternElementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass forEachOutPatternElementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass bindingEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass actionBlockEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass statementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass bindingStatEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass atlTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass collectionTypeCSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass tupleTypeCSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass tuplePartCSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass primitiveLiteralExpCSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass tupleLiteralExpCSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass tupleLiteralPartCSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass numberLiteralExpCSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stringLiteralExpCSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass booleanLiteralExpCSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass unlimitedNaturalLiteralExpCSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass invalidLiteralExpCSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass nullLiteralExpCSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass primitiveTypeCSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass typeLiteralCSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass typeLiteralExpCSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass typeNameExpCSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass typeExpCSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass navigatingArgCSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass navigatingBarArgCSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass navigatingCommaArgCSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass navigatingSemiArgCSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass navigatingArgExpCSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass ifExpCSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass letExpCSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass letVariableCSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass nestedExpCSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass selfExpCSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass primaryExpCSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stringExpCsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass nameExpCSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expCSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass infixedExpCSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass binaryOperatorCSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass infixOperatorCSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass navigationOperatorCSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass prefixedExpCSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass unaryOperatorCSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass indexExpCSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass navigatingExpCS_BaseEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass navigatingExpCSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass infixExpCSEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass prefixExpCSEClass = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see org.xtext.example.mydsl.myAtl.MyAtlPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private MyAtlPackageImpl()
  {
    super(eNS_URI, MyAtlFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   * 
   * <p>This method is used to initialize {@link MyAtlPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static MyAtlPackage init()
  {
    if (isInited) return (MyAtlPackage)EPackage.Registry.INSTANCE.getEPackage(MyAtlPackage.eNS_URI);

    // Obtain or create and register package
    MyAtlPackageImpl theMyAtlPackage = (MyAtlPackageImpl)(EPackage.Registry.INSTANCE.get(eNS_URI) instanceof MyAtlPackageImpl ? EPackage.Registry.INSTANCE.get(eNS_URI) : new MyAtlPackageImpl());

    isInited = true;

    // Create package meta-data objects
    theMyAtlPackage.createPackageContents();

    // Initialize created meta-data
    theMyAtlPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theMyAtlPackage.freeze();

  
    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(MyAtlPackage.eNS_URI, theMyAtlPackage);
    return theMyAtlPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getModule()
  {
    return moduleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getModule_Name()
  {
    return (EAttribute)moduleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getModule_OutModels()
  {
    return (EReference)moduleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getModule_InModels()
  {
    return (EReference)moduleEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getModule_VarName()
  {
    return (EReference)moduleEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getModule_Elements()
  {
    return (EReference)moduleEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getModuleElement()
  {
    return moduleElementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getModuleElement_Name()
  {
    return (EAttribute)moduleElementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getMatchedRule()
  {
    return matchedRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMatchedRule_InPattern()
  {
    return (EReference)matchedRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMatchedRule_Variables()
  {
    return (EReference)matchedRuleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMatchedRule_OutPattern()
  {
    return (EReference)matchedRuleEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMatchedRule_ActionBlock()
  {
    return (EReference)matchedRuleEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCalledRule()
  {
    return calledRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCalledRule_Variables()
  {
    return (EReference)calledRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCalledRule_OutPattern()
  {
    return (EReference)calledRuleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCalledRule_ActionBlock()
  {
    return (EReference)calledRuleEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getQueryRule()
  {
    return queryRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getQueryRule_Parameters()
  {
    return (EReference)queryRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getQueryRule_InitExpression()
  {
    return (EReference)queryRuleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getHelper()
  {
    return helperEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getHelper_Definition()
  {
    return (EReference)helperEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getATLDefCS()
  {
    return atlDefCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getATLDefCS_VarName()
  {
    return (EAttribute)atlDefCSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getATLDefCS_Parameters()
  {
    return (EReference)atlDefCSEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getATLDefCS_Type()
  {
    return (EReference)atlDefCSEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getATLDefCS_InitExpression()
  {
    return (EReference)atlDefCSEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getATLParameterCS()
  {
    return atlParameterCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getATLParameterCS_VarName()
  {
    return (EAttribute)atlParameterCSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getATLParameterCS_Type()
  {
    return (EReference)atlParameterCSEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getRuleVariableDeclaration()
  {
    return ruleVariableDeclarationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getRuleVariableDeclaration_VarName()
  {
    return (EAttribute)ruleVariableDeclarationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRuleVariableDeclaration_Type()
  {
    return (EReference)ruleVariableDeclarationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRuleVariableDeclaration_InitExpression()
  {
    return (EReference)ruleVariableDeclarationEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getInPattern()
  {
    return inPatternEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getInPattern_Elements()
  {
    return (EReference)inPatternEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getInPattern_Filter()
  {
    return (EReference)inPatternEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getInPatternElement()
  {
    return inPatternElementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getInPatternElement_VarName()
  {
    return (EAttribute)inPatternElementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getInPatternElement_Type()
  {
    return (EReference)inPatternElementEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getOutPattern()
  {
    return outPatternEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getOutPattern_Elements()
  {
    return (EReference)outPatternEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getOutPatternElement()
  {
    return outPatternElementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getSimpleOutPatternElement()
  {
    return simpleOutPatternElementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getSimpleOutPatternElement_VarName()
  {
    return (EAttribute)simpleOutPatternElementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSimpleOutPatternElement_Type()
  {
    return (EReference)simpleOutPatternElementEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSimpleOutPatternElement_Bindings()
  {
    return (EReference)simpleOutPatternElementEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getForEachOutPatternElement()
  {
    return forEachOutPatternElementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getForEachOutPatternElement_Collection()
  {
    return (EReference)forEachOutPatternElementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getBinding()
  {
    return bindingEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getBinding_PropertyName()
  {
    return (EAttribute)bindingEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getBinding_Value()
  {
    return (EReference)bindingEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getActionBlock()
  {
    return actionBlockEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getActionBlock_Statements()
  {
    return (EReference)actionBlockEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getStatement()
  {
    return statementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getBindingStat()
  {
    return bindingStatEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getBindingStat_Source()
  {
    return (EReference)bindingStatEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getBindingStat_PropertyName()
  {
    return (EAttribute)bindingStatEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getBindingStat_Value()
  {
    return (EReference)bindingStatEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getATLType()
  {
    return atlTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getATLType_ModelName()
  {
    return (EAttribute)atlTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getATLType_Type()
  {
    return (EReference)atlTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCollectionTypeCS()
  {
    return collectionTypeCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCollectionTypeCS_OwnedType()
  {
    return (EReference)collectionTypeCSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getTupleTypeCS()
  {
    return tupleTypeCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getTupleTypeCS_OwnedParts()
  {
    return (EReference)tupleTypeCSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getTupleTypeCS_Backtrack()
  {
    return (EAttribute)tupleTypeCSEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass gettuplePartCS()
  {
    return tuplePartCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute gettuplePartCS_Name()
  {
    return (EAttribute)tuplePartCSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference gettuplePartCS_OwnedType()
  {
    return (EReference)tuplePartCSEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getPrimitiveLiteralExpCS()
  {
    return primitiveLiteralExpCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getTupleLiteralExpCS()
  {
    return tupleLiteralExpCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getTupleLiteralExpCS_OwnedParts()
  {
    return (EReference)tupleLiteralExpCSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getTupleLiteralPartCS()
  {
    return tupleLiteralPartCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getTupleLiteralPartCS_Name()
  {
    return (EAttribute)tupleLiteralPartCSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getTupleLiteralPartCS_OwnedType()
  {
    return (EReference)tupleLiteralPartCSEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getTupleLiteralPartCS_InitExpression()
  {
    return (EReference)tupleLiteralPartCSEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getNumberLiteralExpCS()
  {
    return numberLiteralExpCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getNumberLiteralExpCS_Name()
  {
    return (EAttribute)numberLiteralExpCSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getStringLiteralExpCS()
  {
    return stringLiteralExpCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getStringLiteralExpCS_Name()
  {
    return (EAttribute)stringLiteralExpCSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getBooleanLiteralExpCS()
  {
    return booleanLiteralExpCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getBooleanLiteralExpCS_Name()
  {
    return (EAttribute)booleanLiteralExpCSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getUnlimitedNaturalLiteralExpCS()
  {
    return unlimitedNaturalLiteralExpCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getInvalidLiteralExpCS()
  {
    return invalidLiteralExpCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getNullLiteralExpCS()
  {
    return nullLiteralExpCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getPrimitiveTypeCS()
  {
    return primitiveTypeCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getTypeLiteralCS()
  {
    return typeLiteralCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getTypeLiteralCS_Name()
  {
    return (EAttribute)typeLiteralCSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getTypeLiteralExpCS()
  {
    return typeLiteralExpCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getTypeLiteralExpCS_OwnedType()
  {
    return (EReference)typeLiteralExpCSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getTypeNameExpCS()
  {
    return typeNameExpCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getTypeNameExpCS_Namespace()
  {
    return (EAttribute)typeNameExpCSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getTypeNameExpCS_Element()
  {
    return (EAttribute)typeNameExpCSEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getTypeExpCS()
  {
    return typeExpCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getNavigatingArgCS()
  {
    return navigatingArgCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getNavigatingArgCS_Name()
  {
    return (EReference)navigatingArgCSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getNavigatingArgCS_OwnedType()
  {
    return (EReference)navigatingArgCSEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getNavigatingArgCS_Init()
  {
    return (EReference)navigatingArgCSEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getNavigatingBarArgCS()
  {
    return navigatingBarArgCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getNavigatingBarArgCS_Prefix()
  {
    return (EAttribute)navigatingBarArgCSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getNavigatingBarArgCS_Name()
  {
    return (EReference)navigatingBarArgCSEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getNavigatingBarArgCS_OwnedType()
  {
    return (EReference)navigatingBarArgCSEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getNavigatingBarArgCS_Init()
  {
    return (EReference)navigatingBarArgCSEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getNavigatingCommaArgCS()
  {
    return navigatingCommaArgCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getNavigatingCommaArgCS_Prefix()
  {
    return (EAttribute)navigatingCommaArgCSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getNavigatingCommaArgCS_Name()
  {
    return (EReference)navigatingCommaArgCSEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getNavigatingCommaArgCS_OwnedType()
  {
    return (EReference)navigatingCommaArgCSEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getNavigatingCommaArgCS_Init()
  {
    return (EReference)navigatingCommaArgCSEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getNavigatingSemiArgCS()
  {
    return navigatingSemiArgCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getNavigatingSemiArgCS_Prefix()
  {
    return (EAttribute)navigatingSemiArgCSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getNavigatingSemiArgCS_Name()
  {
    return (EReference)navigatingSemiArgCSEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getNavigatingSemiArgCS_OwnedType()
  {
    return (EReference)navigatingSemiArgCSEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getNavigatingSemiArgCS_Init()
  {
    return (EReference)navigatingSemiArgCSEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getNavigatingArgExpCS()
  {
    return navigatingArgExpCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getIfExpCS()
  {
    return ifExpCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getIfExpCS_Condition()
  {
    return (EReference)ifExpCSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getIfExpCS_ThenExpression()
  {
    return (EReference)ifExpCSEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getIfExpCS_ElseExpression()
  {
    return (EReference)ifExpCSEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getLetExpCS()
  {
    return letExpCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getLetExpCS_Variable()
  {
    return (EReference)letExpCSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getLetExpCS_In()
  {
    return (EReference)letExpCSEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getLetVariableCS()
  {
    return letVariableCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getLetVariableCS_Name()
  {
    return (EAttribute)letVariableCSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getLetVariableCS_OwnedType()
  {
    return (EReference)letVariableCSEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getLetVariableCS_InitExpression()
  {
    return (EReference)letVariableCSEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getNestedExpCS()
  {
    return nestedExpCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getNestedExpCS_Source()
  {
    return (EReference)nestedExpCSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getSelfExpCS()
  {
    return selfExpCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getPrimaryExpCS()
  {
    return primaryExpCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getStringExpCs()
  {
    return stringExpCsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getStringExpCs_Name()
  {
    return (EAttribute)stringExpCsEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getNameExpCS()
  {
    return nameExpCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getNameExpCS_Namespace()
  {
    return (EAttribute)nameExpCSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getNameExpCS_Element()
  {
    return (EAttribute)nameExpCSEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getExpCS()
  {
    return expCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getInfixedExpCS()
  {
    return infixedExpCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getBinaryOperatorCS()
  {
    return binaryOperatorCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getBinaryOperatorCS_Name()
  {
    return (EAttribute)binaryOperatorCSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getInfixOperatorCS()
  {
    return infixOperatorCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getNavigationOperatorCS()
  {
    return navigationOperatorCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getPrefixedExpCS()
  {
    return prefixedExpCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getUnaryOperatorCS()
  {
    return unaryOperatorCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getUnaryOperatorCS_Name()
  {
    return (EAttribute)unaryOperatorCSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getIndexExpCS()
  {
    return indexExpCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getIndexExpCS_FirstIndexes()
  {
    return (EReference)indexExpCSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getIndexExpCS_SecondIndexes()
  {
    return (EReference)indexExpCSEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getNavigatingExpCS_Base()
  {
    return navigatingExpCS_BaseEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getNavigatingExpCS()
  {
    return navigatingExpCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getNavigatingExpCS_NamedExp()
  {
    return (EReference)navigatingExpCSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getNavigatingExpCS_Argument()
  {
    return (EReference)navigatingExpCSEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getInfixExpCS()
  {
    return infixExpCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getInfixExpCS_OwnedExpression()
  {
    return (EReference)infixExpCSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getInfixExpCS_OwnedOperator()
  {
    return (EReference)infixExpCSEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getPrefixExpCS()
  {
    return prefixExpCSEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getPrefixExpCS_OwnedOperator()
  {
    return (EReference)prefixExpCSEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getPrefixExpCS_OwnedExpression()
  {
    return (EReference)prefixExpCSEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyAtlFactory getMyAtlFactory()
  {
    return (MyAtlFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    moduleEClass = createEClass(MODULE);
    createEAttribute(moduleEClass, MODULE__NAME);
    createEReference(moduleEClass, MODULE__OUT_MODELS);
    createEReference(moduleEClass, MODULE__IN_MODELS);
    createEReference(moduleEClass, MODULE__VAR_NAME);
    createEReference(moduleEClass, MODULE__ELEMENTS);

    moduleElementEClass = createEClass(MODULE_ELEMENT);
    createEAttribute(moduleElementEClass, MODULE_ELEMENT__NAME);

    matchedRuleEClass = createEClass(MATCHED_RULE);
    createEReference(matchedRuleEClass, MATCHED_RULE__IN_PATTERN);
    createEReference(matchedRuleEClass, MATCHED_RULE__VARIABLES);
    createEReference(matchedRuleEClass, MATCHED_RULE__OUT_PATTERN);
    createEReference(matchedRuleEClass, MATCHED_RULE__ACTION_BLOCK);

    calledRuleEClass = createEClass(CALLED_RULE);
    createEReference(calledRuleEClass, CALLED_RULE__VARIABLES);
    createEReference(calledRuleEClass, CALLED_RULE__OUT_PATTERN);
    createEReference(calledRuleEClass, CALLED_RULE__ACTION_BLOCK);

    queryRuleEClass = createEClass(QUERY_RULE);
    createEReference(queryRuleEClass, QUERY_RULE__PARAMETERS);
    createEReference(queryRuleEClass, QUERY_RULE__INIT_EXPRESSION);

    helperEClass = createEClass(HELPER);
    createEReference(helperEClass, HELPER__DEFINITION);

    atlDefCSEClass = createEClass(ATL_DEF_CS);
    createEAttribute(atlDefCSEClass, ATL_DEF_CS__VAR_NAME);
    createEReference(atlDefCSEClass, ATL_DEF_CS__PARAMETERS);
    createEReference(atlDefCSEClass, ATL_DEF_CS__TYPE);
    createEReference(atlDefCSEClass, ATL_DEF_CS__INIT_EXPRESSION);

    atlParameterCSEClass = createEClass(ATL_PARAMETER_CS);
    createEAttribute(atlParameterCSEClass, ATL_PARAMETER_CS__VAR_NAME);
    createEReference(atlParameterCSEClass, ATL_PARAMETER_CS__TYPE);

    ruleVariableDeclarationEClass = createEClass(RULE_VARIABLE_DECLARATION);
    createEAttribute(ruleVariableDeclarationEClass, RULE_VARIABLE_DECLARATION__VAR_NAME);
    createEReference(ruleVariableDeclarationEClass, RULE_VARIABLE_DECLARATION__TYPE);
    createEReference(ruleVariableDeclarationEClass, RULE_VARIABLE_DECLARATION__INIT_EXPRESSION);

    inPatternEClass = createEClass(IN_PATTERN);
    createEReference(inPatternEClass, IN_PATTERN__ELEMENTS);
    createEReference(inPatternEClass, IN_PATTERN__FILTER);

    inPatternElementEClass = createEClass(IN_PATTERN_ELEMENT);
    createEAttribute(inPatternElementEClass, IN_PATTERN_ELEMENT__VAR_NAME);
    createEReference(inPatternElementEClass, IN_PATTERN_ELEMENT__TYPE);

    outPatternEClass = createEClass(OUT_PATTERN);
    createEReference(outPatternEClass, OUT_PATTERN__ELEMENTS);

    outPatternElementEClass = createEClass(OUT_PATTERN_ELEMENT);

    simpleOutPatternElementEClass = createEClass(SIMPLE_OUT_PATTERN_ELEMENT);
    createEAttribute(simpleOutPatternElementEClass, SIMPLE_OUT_PATTERN_ELEMENT__VAR_NAME);
    createEReference(simpleOutPatternElementEClass, SIMPLE_OUT_PATTERN_ELEMENT__TYPE);
    createEReference(simpleOutPatternElementEClass, SIMPLE_OUT_PATTERN_ELEMENT__BINDINGS);

    forEachOutPatternElementEClass = createEClass(FOR_EACH_OUT_PATTERN_ELEMENT);
    createEReference(forEachOutPatternElementEClass, FOR_EACH_OUT_PATTERN_ELEMENT__COLLECTION);

    bindingEClass = createEClass(BINDING);
    createEAttribute(bindingEClass, BINDING__PROPERTY_NAME);
    createEReference(bindingEClass, BINDING__VALUE);

    actionBlockEClass = createEClass(ACTION_BLOCK);
    createEReference(actionBlockEClass, ACTION_BLOCK__STATEMENTS);

    statementEClass = createEClass(STATEMENT);

    bindingStatEClass = createEClass(BINDING_STAT);
    createEReference(bindingStatEClass, BINDING_STAT__SOURCE);
    createEAttribute(bindingStatEClass, BINDING_STAT__PROPERTY_NAME);
    createEReference(bindingStatEClass, BINDING_STAT__VALUE);

    atlTypeEClass = createEClass(ATL_TYPE);
    createEAttribute(atlTypeEClass, ATL_TYPE__MODEL_NAME);
    createEReference(atlTypeEClass, ATL_TYPE__TYPE);

    collectionTypeCSEClass = createEClass(COLLECTION_TYPE_CS);
    createEReference(collectionTypeCSEClass, COLLECTION_TYPE_CS__OWNED_TYPE);

    tupleTypeCSEClass = createEClass(TUPLE_TYPE_CS);
    createEReference(tupleTypeCSEClass, TUPLE_TYPE_CS__OWNED_PARTS);
    createEAttribute(tupleTypeCSEClass, TUPLE_TYPE_CS__BACKTRACK);

    tuplePartCSEClass = createEClass(TUPLE_PART_CS);
    createEAttribute(tuplePartCSEClass, TUPLE_PART_CS__NAME);
    createEReference(tuplePartCSEClass, TUPLE_PART_CS__OWNED_TYPE);

    primitiveLiteralExpCSEClass = createEClass(PRIMITIVE_LITERAL_EXP_CS);

    tupleLiteralExpCSEClass = createEClass(TUPLE_LITERAL_EXP_CS);
    createEReference(tupleLiteralExpCSEClass, TUPLE_LITERAL_EXP_CS__OWNED_PARTS);

    tupleLiteralPartCSEClass = createEClass(TUPLE_LITERAL_PART_CS);
    createEAttribute(tupleLiteralPartCSEClass, TUPLE_LITERAL_PART_CS__NAME);
    createEReference(tupleLiteralPartCSEClass, TUPLE_LITERAL_PART_CS__OWNED_TYPE);
    createEReference(tupleLiteralPartCSEClass, TUPLE_LITERAL_PART_CS__INIT_EXPRESSION);

    numberLiteralExpCSEClass = createEClass(NUMBER_LITERAL_EXP_CS);
    createEAttribute(numberLiteralExpCSEClass, NUMBER_LITERAL_EXP_CS__NAME);

    stringLiteralExpCSEClass = createEClass(STRING_LITERAL_EXP_CS);
    createEAttribute(stringLiteralExpCSEClass, STRING_LITERAL_EXP_CS__NAME);

    booleanLiteralExpCSEClass = createEClass(BOOLEAN_LITERAL_EXP_CS);
    createEAttribute(booleanLiteralExpCSEClass, BOOLEAN_LITERAL_EXP_CS__NAME);

    unlimitedNaturalLiteralExpCSEClass = createEClass(UNLIMITED_NATURAL_LITERAL_EXP_CS);

    invalidLiteralExpCSEClass = createEClass(INVALID_LITERAL_EXP_CS);

    nullLiteralExpCSEClass = createEClass(NULL_LITERAL_EXP_CS);

    primitiveTypeCSEClass = createEClass(PRIMITIVE_TYPE_CS);

    typeLiteralCSEClass = createEClass(TYPE_LITERAL_CS);
    createEAttribute(typeLiteralCSEClass, TYPE_LITERAL_CS__NAME);

    typeLiteralExpCSEClass = createEClass(TYPE_LITERAL_EXP_CS);
    createEReference(typeLiteralExpCSEClass, TYPE_LITERAL_EXP_CS__OWNED_TYPE);

    typeNameExpCSEClass = createEClass(TYPE_NAME_EXP_CS);
    createEAttribute(typeNameExpCSEClass, TYPE_NAME_EXP_CS__NAMESPACE);
    createEAttribute(typeNameExpCSEClass, TYPE_NAME_EXP_CS__ELEMENT);

    typeExpCSEClass = createEClass(TYPE_EXP_CS);

    navigatingArgCSEClass = createEClass(NAVIGATING_ARG_CS);
    createEReference(navigatingArgCSEClass, NAVIGATING_ARG_CS__NAME);
    createEReference(navigatingArgCSEClass, NAVIGATING_ARG_CS__OWNED_TYPE);
    createEReference(navigatingArgCSEClass, NAVIGATING_ARG_CS__INIT);

    navigatingBarArgCSEClass = createEClass(NAVIGATING_BAR_ARG_CS);
    createEAttribute(navigatingBarArgCSEClass, NAVIGATING_BAR_ARG_CS__PREFIX);
    createEReference(navigatingBarArgCSEClass, NAVIGATING_BAR_ARG_CS__NAME);
    createEReference(navigatingBarArgCSEClass, NAVIGATING_BAR_ARG_CS__OWNED_TYPE);
    createEReference(navigatingBarArgCSEClass, NAVIGATING_BAR_ARG_CS__INIT);

    navigatingCommaArgCSEClass = createEClass(NAVIGATING_COMMA_ARG_CS);
    createEAttribute(navigatingCommaArgCSEClass, NAVIGATING_COMMA_ARG_CS__PREFIX);
    createEReference(navigatingCommaArgCSEClass, NAVIGATING_COMMA_ARG_CS__NAME);
    createEReference(navigatingCommaArgCSEClass, NAVIGATING_COMMA_ARG_CS__OWNED_TYPE);
    createEReference(navigatingCommaArgCSEClass, NAVIGATING_COMMA_ARG_CS__INIT);

    navigatingSemiArgCSEClass = createEClass(NAVIGATING_SEMI_ARG_CS);
    createEAttribute(navigatingSemiArgCSEClass, NAVIGATING_SEMI_ARG_CS__PREFIX);
    createEReference(navigatingSemiArgCSEClass, NAVIGATING_SEMI_ARG_CS__NAME);
    createEReference(navigatingSemiArgCSEClass, NAVIGATING_SEMI_ARG_CS__OWNED_TYPE);
    createEReference(navigatingSemiArgCSEClass, NAVIGATING_SEMI_ARG_CS__INIT);

    navigatingArgExpCSEClass = createEClass(NAVIGATING_ARG_EXP_CS);

    ifExpCSEClass = createEClass(IF_EXP_CS);
    createEReference(ifExpCSEClass, IF_EXP_CS__CONDITION);
    createEReference(ifExpCSEClass, IF_EXP_CS__THEN_EXPRESSION);
    createEReference(ifExpCSEClass, IF_EXP_CS__ELSE_EXPRESSION);

    letExpCSEClass = createEClass(LET_EXP_CS);
    createEReference(letExpCSEClass, LET_EXP_CS__VARIABLE);
    createEReference(letExpCSEClass, LET_EXP_CS__IN);

    letVariableCSEClass = createEClass(LET_VARIABLE_CS);
    createEAttribute(letVariableCSEClass, LET_VARIABLE_CS__NAME);
    createEReference(letVariableCSEClass, LET_VARIABLE_CS__OWNED_TYPE);
    createEReference(letVariableCSEClass, LET_VARIABLE_CS__INIT_EXPRESSION);

    nestedExpCSEClass = createEClass(NESTED_EXP_CS);
    createEReference(nestedExpCSEClass, NESTED_EXP_CS__SOURCE);

    selfExpCSEClass = createEClass(SELF_EXP_CS);

    primaryExpCSEClass = createEClass(PRIMARY_EXP_CS);

    stringExpCsEClass = createEClass(STRING_EXP_CS);
    createEAttribute(stringExpCsEClass, STRING_EXP_CS__NAME);

    nameExpCSEClass = createEClass(NAME_EXP_CS);
    createEAttribute(nameExpCSEClass, NAME_EXP_CS__NAMESPACE);
    createEAttribute(nameExpCSEClass, NAME_EXP_CS__ELEMENT);

    expCSEClass = createEClass(EXP_CS);

    infixedExpCSEClass = createEClass(INFIXED_EXP_CS);

    binaryOperatorCSEClass = createEClass(BINARY_OPERATOR_CS);
    createEAttribute(binaryOperatorCSEClass, BINARY_OPERATOR_CS__NAME);

    infixOperatorCSEClass = createEClass(INFIX_OPERATOR_CS);

    navigationOperatorCSEClass = createEClass(NAVIGATION_OPERATOR_CS);

    prefixedExpCSEClass = createEClass(PREFIXED_EXP_CS);

    unaryOperatorCSEClass = createEClass(UNARY_OPERATOR_CS);
    createEAttribute(unaryOperatorCSEClass, UNARY_OPERATOR_CS__NAME);

    indexExpCSEClass = createEClass(INDEX_EXP_CS);
    createEReference(indexExpCSEClass, INDEX_EXP_CS__FIRST_INDEXES);
    createEReference(indexExpCSEClass, INDEX_EXP_CS__SECOND_INDEXES);

    navigatingExpCS_BaseEClass = createEClass(NAVIGATING_EXP_CS_BASE);

    navigatingExpCSEClass = createEClass(NAVIGATING_EXP_CS);
    createEReference(navigatingExpCSEClass, NAVIGATING_EXP_CS__NAMED_EXP);
    createEReference(navigatingExpCSEClass, NAVIGATING_EXP_CS__ARGUMENT);

    infixExpCSEClass = createEClass(INFIX_EXP_CS);
    createEReference(infixExpCSEClass, INFIX_EXP_CS__OWNED_EXPRESSION);
    createEReference(infixExpCSEClass, INFIX_EXP_CS__OWNED_OPERATOR);

    prefixExpCSEClass = createEClass(PREFIX_EXP_CS);
    createEReference(prefixExpCSEClass, PREFIX_EXP_CS__OWNED_OPERATOR);
    createEReference(prefixExpCSEClass, PREFIX_EXP_CS__OWNED_EXPRESSION);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    matchedRuleEClass.getESuperTypes().add(this.getModuleElement());
    calledRuleEClass.getESuperTypes().add(this.getModuleElement());
    queryRuleEClass.getESuperTypes().add(this.getModuleElement());
    helperEClass.getESuperTypes().add(this.getModuleElement());
    simpleOutPatternElementEClass.getESuperTypes().add(this.getOutPatternElement());
    forEachOutPatternElementEClass.getESuperTypes().add(this.getOutPatternElement());
    bindingStatEClass.getESuperTypes().add(this.getStatement());
    collectionTypeCSEClass.getESuperTypes().add(this.getTypeLiteralCS());
    tupleTypeCSEClass.getESuperTypes().add(this.getTypeLiteralCS());
    primitiveLiteralExpCSEClass.getESuperTypes().add(this.getPrimaryExpCS());
    tupleLiteralExpCSEClass.getESuperTypes().add(this.getPrimaryExpCS());
    numberLiteralExpCSEClass.getESuperTypes().add(this.getPrimitiveLiteralExpCS());
    stringLiteralExpCSEClass.getESuperTypes().add(this.getPrimitiveLiteralExpCS());
    booleanLiteralExpCSEClass.getESuperTypes().add(this.getPrimitiveLiteralExpCS());
    unlimitedNaturalLiteralExpCSEClass.getESuperTypes().add(this.getPrimitiveLiteralExpCS());
    invalidLiteralExpCSEClass.getESuperTypes().add(this.getPrimitiveLiteralExpCS());
    nullLiteralExpCSEClass.getESuperTypes().add(this.getPrimitiveLiteralExpCS());
    primitiveTypeCSEClass.getESuperTypes().add(this.getTypeLiteralCS());
    typeLiteralCSEClass.getESuperTypes().add(this.getTypeExpCS());
    typeNameExpCSEClass.getESuperTypes().add(this.getTypeExpCS());
    ifExpCSEClass.getESuperTypes().add(this.getPrimaryExpCS());
    letExpCSEClass.getESuperTypes().add(this.getPrimaryExpCS());
    nestedExpCSEClass.getESuperTypes().add(this.getPrimaryExpCS());
    selfExpCSEClass.getESuperTypes().add(this.getPrimaryExpCS());
    primaryExpCSEClass.getESuperTypes().add(this.getPrefixedExpCS());
    stringExpCsEClass.getESuperTypes().add(this.getPrimaryExpCS());
    nameExpCSEClass.getESuperTypes().add(this.getIndexExpCS());
    expCSEClass.getESuperTypes().add(this.getNavigatingArgExpCS());
    infixedExpCSEClass.getESuperTypes().add(this.getExpCS());
    infixOperatorCSEClass.getESuperTypes().add(this.getBinaryOperatorCS());
    navigationOperatorCSEClass.getESuperTypes().add(this.getBinaryOperatorCS());
    prefixedExpCSEClass.getESuperTypes().add(this.getInfixedExpCS());
    indexExpCSEClass.getESuperTypes().add(this.getNavigatingExpCS_Base());
    navigatingExpCS_BaseEClass.getESuperTypes().add(this.getNavigatingExpCS());
    navigatingExpCSEClass.getESuperTypes().add(this.getPrimaryExpCS());
    infixExpCSEClass.getESuperTypes().add(this.getInfixedExpCS());
    prefixExpCSEClass.getESuperTypes().add(this.getPrefixedExpCS());

    // Initialize classes and features; add operations and parameters
    initEClass(moduleEClass, Module.class, "Module", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getModule_Name(), ecorePackage.getEString(), "name", null, 0, 1, Module.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getModule_OutModels(), this.getNameExpCS(), null, "outModels", null, 0, -1, Module.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getModule_InModels(), this.getNameExpCS(), null, "inModels", null, 0, -1, Module.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getModule_VarName(), this.getNameExpCS(), null, "varName", null, 0, 1, Module.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getModule_Elements(), this.getModuleElement(), null, "elements", null, 0, -1, Module.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(moduleElementEClass, ModuleElement.class, "ModuleElement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getModuleElement_Name(), ecorePackage.getEString(), "name", null, 0, 1, ModuleElement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(matchedRuleEClass, MatchedRule.class, "MatchedRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getMatchedRule_InPattern(), this.getInPattern(), null, "inPattern", null, 0, 1, MatchedRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMatchedRule_Variables(), this.getRuleVariableDeclaration(), null, "variables", null, 0, -1, MatchedRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMatchedRule_OutPattern(), this.getOutPattern(), null, "outPattern", null, 0, 1, MatchedRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMatchedRule_ActionBlock(), this.getActionBlock(), null, "actionBlock", null, 0, 1, MatchedRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(calledRuleEClass, CalledRule.class, "CalledRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCalledRule_Variables(), this.getRuleVariableDeclaration(), null, "variables", null, 0, -1, CalledRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCalledRule_OutPattern(), this.getOutPattern(), null, "outPattern", null, 0, 1, CalledRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCalledRule_ActionBlock(), this.getActionBlock(), null, "actionBlock", null, 0, 1, CalledRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(queryRuleEClass, QueryRule.class, "QueryRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getQueryRule_Parameters(), this.getATLParameterCS(), null, "parameters", null, 0, -1, QueryRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getQueryRule_InitExpression(), this.getExpCS(), null, "initExpression", null, 0, 1, QueryRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(helperEClass, Helper.class, "Helper", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getHelper_Definition(), this.getATLDefCS(), null, "definition", null, 0, 1, Helper.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(atlDefCSEClass, ATLDefCS.class, "ATLDefCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getATLDefCS_VarName(), ecorePackage.getEString(), "varName", null, 0, 1, ATLDefCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getATLDefCS_Parameters(), this.getATLParameterCS(), null, "parameters", null, 0, -1, ATLDefCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getATLDefCS_Type(), this.getATLType(), null, "type", null, 0, 1, ATLDefCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getATLDefCS_InitExpression(), this.getExpCS(), null, "initExpression", null, 0, 1, ATLDefCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(atlParameterCSEClass, ATLParameterCS.class, "ATLParameterCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getATLParameterCS_VarName(), ecorePackage.getEString(), "varName", null, 0, 1, ATLParameterCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getATLParameterCS_Type(), this.getATLType(), null, "type", null, 0, 1, ATLParameterCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(ruleVariableDeclarationEClass, RuleVariableDeclaration.class, "RuleVariableDeclaration", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getRuleVariableDeclaration_VarName(), ecorePackage.getEString(), "varName", null, 0, 1, RuleVariableDeclaration.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getRuleVariableDeclaration_Type(), this.getATLType(), null, "type", null, 0, 1, RuleVariableDeclaration.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getRuleVariableDeclaration_InitExpression(), this.getExpCS(), null, "initExpression", null, 0, 1, RuleVariableDeclaration.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(inPatternEClass, InPattern.class, "InPattern", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getInPattern_Elements(), this.getInPatternElement(), null, "elements", null, 0, -1, InPattern.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getInPattern_Filter(), this.getExpCS(), null, "filter", null, 0, 1, InPattern.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(inPatternElementEClass, InPatternElement.class, "InPatternElement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getInPatternElement_VarName(), ecorePackage.getEString(), "varName", null, 0, 1, InPatternElement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getInPatternElement_Type(), this.getATLType(), null, "type", null, 0, 1, InPatternElement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(outPatternEClass, OutPattern.class, "OutPattern", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getOutPattern_Elements(), this.getOutPatternElement(), null, "elements", null, 0, -1, OutPattern.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(outPatternElementEClass, OutPatternElement.class, "OutPatternElement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(simpleOutPatternElementEClass, SimpleOutPatternElement.class, "SimpleOutPatternElement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSimpleOutPatternElement_VarName(), ecorePackage.getEString(), "varName", null, 0, 1, SimpleOutPatternElement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSimpleOutPatternElement_Type(), this.getATLType(), null, "type", null, 0, 1, SimpleOutPatternElement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSimpleOutPatternElement_Bindings(), this.getBinding(), null, "bindings", null, 0, -1, SimpleOutPatternElement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(forEachOutPatternElementEClass, ForEachOutPatternElement.class, "ForEachOutPatternElement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getForEachOutPatternElement_Collection(), this.getExpCS(), null, "collection", null, 0, 1, ForEachOutPatternElement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(bindingEClass, Binding.class, "Binding", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getBinding_PropertyName(), ecorePackage.getEString(), "propertyName", null, 0, 1, Binding.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getBinding_Value(), this.getExpCS(), null, "value", null, 0, 1, Binding.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(actionBlockEClass, ActionBlock.class, "ActionBlock", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getActionBlock_Statements(), this.getStatement(), null, "statements", null, 0, -1, ActionBlock.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(statementEClass, Statement.class, "Statement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(bindingStatEClass, BindingStat.class, "BindingStat", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getBindingStat_Source(), this.getExpCS(), null, "source", null, 0, 1, BindingStat.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBindingStat_PropertyName(), ecorePackage.getEString(), "propertyName", null, 0, 1, BindingStat.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getBindingStat_Value(), this.getExpCS(), null, "value", null, 0, 1, BindingStat.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(atlTypeEClass, ATLType.class, "ATLType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getATLType_ModelName(), ecorePackage.getEString(), "modelName", null, 0, 1, ATLType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getATLType_Type(), this.getTypeExpCS(), null, "type", null, 0, 1, ATLType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(collectionTypeCSEClass, CollectionTypeCS.class, "CollectionTypeCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCollectionTypeCS_OwnedType(), this.getTypeExpCS(), null, "ownedType", null, 0, 1, CollectionTypeCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(tupleTypeCSEClass, TupleTypeCS.class, "TupleTypeCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getTupleTypeCS_OwnedParts(), this.gettuplePartCS(), null, "ownedParts", null, 0, -1, TupleTypeCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getTupleTypeCS_Backtrack(), ecorePackage.getEString(), "backtrack", null, 0, 1, TupleTypeCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(tuplePartCSEClass, tuplePartCS.class, "tuplePartCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(gettuplePartCS_Name(), ecorePackage.getEString(), "name", null, 0, 1, tuplePartCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(gettuplePartCS_OwnedType(), this.getTypeExpCS(), null, "ownedType", null, 0, 1, tuplePartCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(primitiveLiteralExpCSEClass, PrimitiveLiteralExpCS.class, "PrimitiveLiteralExpCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(tupleLiteralExpCSEClass, TupleLiteralExpCS.class, "TupleLiteralExpCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getTupleLiteralExpCS_OwnedParts(), this.getTupleLiteralPartCS(), null, "ownedParts", null, 0, -1, TupleLiteralExpCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(tupleLiteralPartCSEClass, TupleLiteralPartCS.class, "TupleLiteralPartCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getTupleLiteralPartCS_Name(), ecorePackage.getEString(), "name", null, 0, 1, TupleLiteralPartCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getTupleLiteralPartCS_OwnedType(), this.getTypeExpCS(), null, "ownedType", null, 0, 1, TupleLiteralPartCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getTupleLiteralPartCS_InitExpression(), this.getExpCS(), null, "initExpression", null, 0, 1, TupleLiteralPartCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(numberLiteralExpCSEClass, NumberLiteralExpCS.class, "NumberLiteralExpCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getNumberLiteralExpCS_Name(), ecorePackage.getEString(), "name", null, 0, 1, NumberLiteralExpCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(stringLiteralExpCSEClass, StringLiteralExpCS.class, "StringLiteralExpCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getStringLiteralExpCS_Name(), ecorePackage.getEString(), "name", null, 0, -1, StringLiteralExpCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(booleanLiteralExpCSEClass, BooleanLiteralExpCS.class, "BooleanLiteralExpCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getBooleanLiteralExpCS_Name(), ecorePackage.getEString(), "name", null, 0, 1, BooleanLiteralExpCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(unlimitedNaturalLiteralExpCSEClass, UnlimitedNaturalLiteralExpCS.class, "UnlimitedNaturalLiteralExpCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(invalidLiteralExpCSEClass, InvalidLiteralExpCS.class, "InvalidLiteralExpCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(nullLiteralExpCSEClass, NullLiteralExpCS.class, "NullLiteralExpCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(primitiveTypeCSEClass, PrimitiveTypeCS.class, "PrimitiveTypeCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(typeLiteralCSEClass, TypeLiteralCS.class, "TypeLiteralCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getTypeLiteralCS_Name(), ecorePackage.getEString(), "name", null, 0, 1, TypeLiteralCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(typeLiteralExpCSEClass, TypeLiteralExpCS.class, "TypeLiteralExpCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getTypeLiteralExpCS_OwnedType(), this.getTypeLiteralCS(), null, "ownedType", null, 0, 1, TypeLiteralExpCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(typeNameExpCSEClass, TypeNameExpCS.class, "TypeNameExpCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getTypeNameExpCS_Namespace(), ecorePackage.getEString(), "namespace", null, 0, -1, TypeNameExpCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getTypeNameExpCS_Element(), ecorePackage.getEString(), "element", null, 0, 1, TypeNameExpCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(typeExpCSEClass, TypeExpCS.class, "TypeExpCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(navigatingArgCSEClass, NavigatingArgCS.class, "NavigatingArgCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getNavigatingArgCS_Name(), this.getNavigatingArgExpCS(), null, "name", null, 0, 1, NavigatingArgCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getNavigatingArgCS_OwnedType(), this.getTypeExpCS(), null, "ownedType", null, 0, 1, NavigatingArgCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getNavigatingArgCS_Init(), this.getExpCS(), null, "init", null, 0, 1, NavigatingArgCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(navigatingBarArgCSEClass, NavigatingBarArgCS.class, "NavigatingBarArgCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getNavigatingBarArgCS_Prefix(), ecorePackage.getEString(), "prefix", null, 0, 1, NavigatingBarArgCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getNavigatingBarArgCS_Name(), this.getNavigatingArgExpCS(), null, "name", null, 0, 1, NavigatingBarArgCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getNavigatingBarArgCS_OwnedType(), this.getTypeExpCS(), null, "ownedType", null, 0, 1, NavigatingBarArgCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getNavigatingBarArgCS_Init(), this.getExpCS(), null, "init", null, 0, 1, NavigatingBarArgCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(navigatingCommaArgCSEClass, NavigatingCommaArgCS.class, "NavigatingCommaArgCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getNavigatingCommaArgCS_Prefix(), ecorePackage.getEString(), "prefix", null, 0, 1, NavigatingCommaArgCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getNavigatingCommaArgCS_Name(), this.getNavigatingArgExpCS(), null, "name", null, 0, 1, NavigatingCommaArgCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getNavigatingCommaArgCS_OwnedType(), this.getTypeExpCS(), null, "ownedType", null, 0, 1, NavigatingCommaArgCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getNavigatingCommaArgCS_Init(), this.getExpCS(), null, "init", null, 0, 1, NavigatingCommaArgCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(navigatingSemiArgCSEClass, NavigatingSemiArgCS.class, "NavigatingSemiArgCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getNavigatingSemiArgCS_Prefix(), ecorePackage.getEString(), "prefix", null, 0, 1, NavigatingSemiArgCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getNavigatingSemiArgCS_Name(), this.getNavigatingArgExpCS(), null, "name", null, 0, 1, NavigatingSemiArgCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getNavigatingSemiArgCS_OwnedType(), this.getTypeExpCS(), null, "ownedType", null, 0, 1, NavigatingSemiArgCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getNavigatingSemiArgCS_Init(), this.getExpCS(), null, "init", null, 0, 1, NavigatingSemiArgCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(navigatingArgExpCSEClass, NavigatingArgExpCS.class, "NavigatingArgExpCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(ifExpCSEClass, IfExpCS.class, "IfExpCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getIfExpCS_Condition(), this.getExpCS(), null, "condition", null, 0, 1, IfExpCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getIfExpCS_ThenExpression(), this.getExpCS(), null, "thenExpression", null, 0, 1, IfExpCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getIfExpCS_ElseExpression(), this.getExpCS(), null, "elseExpression", null, 0, 1, IfExpCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(letExpCSEClass, LetExpCS.class, "LetExpCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getLetExpCS_Variable(), this.getLetVariableCS(), null, "variable", null, 0, -1, LetExpCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getLetExpCS_In(), this.getExpCS(), null, "in", null, 0, 1, LetExpCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(letVariableCSEClass, LetVariableCS.class, "LetVariableCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getLetVariableCS_Name(), ecorePackage.getEString(), "name", null, 0, 1, LetVariableCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getLetVariableCS_OwnedType(), this.getTypeExpCS(), null, "ownedType", null, 0, 1, LetVariableCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getLetVariableCS_InitExpression(), this.getExpCS(), null, "initExpression", null, 0, 1, LetVariableCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(nestedExpCSEClass, NestedExpCS.class, "NestedExpCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getNestedExpCS_Source(), this.getExpCS(), null, "source", null, 0, 1, NestedExpCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(selfExpCSEClass, SelfExpCS.class, "SelfExpCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(primaryExpCSEClass, PrimaryExpCS.class, "PrimaryExpCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(stringExpCsEClass, StringExpCs.class, "StringExpCs", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getStringExpCs_Name(), ecorePackage.getEString(), "name", null, 0, 1, StringExpCs.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(nameExpCSEClass, NameExpCS.class, "NameExpCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getNameExpCS_Namespace(), ecorePackage.getEString(), "namespace", null, 0, -1, NameExpCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getNameExpCS_Element(), ecorePackage.getEString(), "element", null, 0, 1, NameExpCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(expCSEClass, ExpCS.class, "ExpCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(infixedExpCSEClass, InfixedExpCS.class, "InfixedExpCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(binaryOperatorCSEClass, BinaryOperatorCS.class, "BinaryOperatorCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getBinaryOperatorCS_Name(), ecorePackage.getEString(), "name", null, 0, 1, BinaryOperatorCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(infixOperatorCSEClass, InfixOperatorCS.class, "InfixOperatorCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(navigationOperatorCSEClass, NavigationOperatorCS.class, "NavigationOperatorCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(prefixedExpCSEClass, PrefixedExpCS.class, "PrefixedExpCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(unaryOperatorCSEClass, UnaryOperatorCS.class, "UnaryOperatorCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getUnaryOperatorCS_Name(), ecorePackage.getEString(), "name", null, 0, 1, UnaryOperatorCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(indexExpCSEClass, IndexExpCS.class, "IndexExpCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getIndexExpCS_FirstIndexes(), this.getExpCS(), null, "firstIndexes", null, 0, -1, IndexExpCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getIndexExpCS_SecondIndexes(), this.getExpCS(), null, "secondIndexes", null, 0, -1, IndexExpCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(navigatingExpCS_BaseEClass, NavigatingExpCS_Base.class, "NavigatingExpCS_Base", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(navigatingExpCSEClass, NavigatingExpCS.class, "NavigatingExpCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getNavigatingExpCS_NamedExp(), this.getNavigatingExpCS_Base(), null, "namedExp", null, 0, 1, NavigatingExpCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getNavigatingExpCS_Argument(), ecorePackage.getEObject(), null, "argument", null, 0, -1, NavigatingExpCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(infixExpCSEClass, InfixExpCS.class, "InfixExpCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getInfixExpCS_OwnedExpression(), this.getPrefixedExpCS(), null, "ownedExpression", null, 0, -1, InfixExpCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getInfixExpCS_OwnedOperator(), this.getBinaryOperatorCS(), null, "ownedOperator", null, 0, -1, InfixExpCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(prefixExpCSEClass, PrefixExpCS.class, "PrefixExpCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getPrefixExpCS_OwnedOperator(), this.getUnaryOperatorCS(), null, "ownedOperator", null, 0, -1, PrefixExpCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPrefixExpCS_OwnedExpression(), this.getPrimaryExpCS(), null, "ownedExpression", null, 0, 1, PrefixExpCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Create resource
    createResource(eNS_URI);
  }

} //MyAtlPackageImpl
