/**
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.myAtl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.myAtl.ActionBlock;
import org.xtext.example.mydsl.myAtl.InPattern;
import org.xtext.example.mydsl.myAtl.MatchedRule;
import org.xtext.example.mydsl.myAtl.MyAtlPackage;
import org.xtext.example.mydsl.myAtl.OutPattern;
import org.xtext.example.mydsl.myAtl.RuleVariableDeclaration;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Matched Rule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myAtl.impl.MatchedRuleImpl#getInPattern <em>In Pattern</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myAtl.impl.MatchedRuleImpl#getVariables <em>Variables</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myAtl.impl.MatchedRuleImpl#getOutPattern <em>Out Pattern</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myAtl.impl.MatchedRuleImpl#getActionBlock <em>Action Block</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MatchedRuleImpl extends ModuleElementImpl implements MatchedRule
{
  /**
   * The cached value of the '{@link #getInPattern() <em>In Pattern</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInPattern()
   * @generated
   * @ordered
   */
  protected InPattern inPattern;

  /**
   * The cached value of the '{@link #getVariables() <em>Variables</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariables()
   * @generated
   * @ordered
   */
  protected EList<RuleVariableDeclaration> variables;

  /**
   * The cached value of the '{@link #getOutPattern() <em>Out Pattern</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOutPattern()
   * @generated
   * @ordered
   */
  protected OutPattern outPattern;

  /**
   * The cached value of the '{@link #getActionBlock() <em>Action Block</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActionBlock()
   * @generated
   * @ordered
   */
  protected ActionBlock actionBlock;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MatchedRuleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyAtlPackage.Literals.MATCHED_RULE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InPattern getInPattern()
  {
    return inPattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInPattern(InPattern newInPattern, NotificationChain msgs)
  {
    InPattern oldInPattern = inPattern;
    inPattern = newInPattern;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyAtlPackage.MATCHED_RULE__IN_PATTERN, oldInPattern, newInPattern);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setInPattern(InPattern newInPattern)
  {
    if (newInPattern != inPattern)
    {
      NotificationChain msgs = null;
      if (inPattern != null)
        msgs = ((InternalEObject)inPattern).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyAtlPackage.MATCHED_RULE__IN_PATTERN, null, msgs);
      if (newInPattern != null)
        msgs = ((InternalEObject)newInPattern).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyAtlPackage.MATCHED_RULE__IN_PATTERN, null, msgs);
      msgs = basicSetInPattern(newInPattern, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyAtlPackage.MATCHED_RULE__IN_PATTERN, newInPattern, newInPattern));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<RuleVariableDeclaration> getVariables()
  {
    if (variables == null)
    {
      variables = new EObjectContainmentEList<RuleVariableDeclaration>(RuleVariableDeclaration.class, this, MyAtlPackage.MATCHED_RULE__VARIABLES);
    }
    return variables;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OutPattern getOutPattern()
  {
    return outPattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOutPattern(OutPattern newOutPattern, NotificationChain msgs)
  {
    OutPattern oldOutPattern = outPattern;
    outPattern = newOutPattern;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyAtlPackage.MATCHED_RULE__OUT_PATTERN, oldOutPattern, newOutPattern);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOutPattern(OutPattern newOutPattern)
  {
    if (newOutPattern != outPattern)
    {
      NotificationChain msgs = null;
      if (outPattern != null)
        msgs = ((InternalEObject)outPattern).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyAtlPackage.MATCHED_RULE__OUT_PATTERN, null, msgs);
      if (newOutPattern != null)
        msgs = ((InternalEObject)newOutPattern).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyAtlPackage.MATCHED_RULE__OUT_PATTERN, null, msgs);
      msgs = basicSetOutPattern(newOutPattern, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyAtlPackage.MATCHED_RULE__OUT_PATTERN, newOutPattern, newOutPattern));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ActionBlock getActionBlock()
  {
    return actionBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetActionBlock(ActionBlock newActionBlock, NotificationChain msgs)
  {
    ActionBlock oldActionBlock = actionBlock;
    actionBlock = newActionBlock;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyAtlPackage.MATCHED_RULE__ACTION_BLOCK, oldActionBlock, newActionBlock);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setActionBlock(ActionBlock newActionBlock)
  {
    if (newActionBlock != actionBlock)
    {
      NotificationChain msgs = null;
      if (actionBlock != null)
        msgs = ((InternalEObject)actionBlock).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyAtlPackage.MATCHED_RULE__ACTION_BLOCK, null, msgs);
      if (newActionBlock != null)
        msgs = ((InternalEObject)newActionBlock).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyAtlPackage.MATCHED_RULE__ACTION_BLOCK, null, msgs);
      msgs = basicSetActionBlock(newActionBlock, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyAtlPackage.MATCHED_RULE__ACTION_BLOCK, newActionBlock, newActionBlock));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyAtlPackage.MATCHED_RULE__IN_PATTERN:
        return basicSetInPattern(null, msgs);
      case MyAtlPackage.MATCHED_RULE__VARIABLES:
        return ((InternalEList<?>)getVariables()).basicRemove(otherEnd, msgs);
      case MyAtlPackage.MATCHED_RULE__OUT_PATTERN:
        return basicSetOutPattern(null, msgs);
      case MyAtlPackage.MATCHED_RULE__ACTION_BLOCK:
        return basicSetActionBlock(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyAtlPackage.MATCHED_RULE__IN_PATTERN:
        return getInPattern();
      case MyAtlPackage.MATCHED_RULE__VARIABLES:
        return getVariables();
      case MyAtlPackage.MATCHED_RULE__OUT_PATTERN:
        return getOutPattern();
      case MyAtlPackage.MATCHED_RULE__ACTION_BLOCK:
        return getActionBlock();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyAtlPackage.MATCHED_RULE__IN_PATTERN:
        setInPattern((InPattern)newValue);
        return;
      case MyAtlPackage.MATCHED_RULE__VARIABLES:
        getVariables().clear();
        getVariables().addAll((Collection<? extends RuleVariableDeclaration>)newValue);
        return;
      case MyAtlPackage.MATCHED_RULE__OUT_PATTERN:
        setOutPattern((OutPattern)newValue);
        return;
      case MyAtlPackage.MATCHED_RULE__ACTION_BLOCK:
        setActionBlock((ActionBlock)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyAtlPackage.MATCHED_RULE__IN_PATTERN:
        setInPattern((InPattern)null);
        return;
      case MyAtlPackage.MATCHED_RULE__VARIABLES:
        getVariables().clear();
        return;
      case MyAtlPackage.MATCHED_RULE__OUT_PATTERN:
        setOutPattern((OutPattern)null);
        return;
      case MyAtlPackage.MATCHED_RULE__ACTION_BLOCK:
        setActionBlock((ActionBlock)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyAtlPackage.MATCHED_RULE__IN_PATTERN:
        return inPattern != null;
      case MyAtlPackage.MATCHED_RULE__VARIABLES:
        return variables != null && !variables.isEmpty();
      case MyAtlPackage.MATCHED_RULE__OUT_PATTERN:
        return outPattern != null;
      case MyAtlPackage.MATCHED_RULE__ACTION_BLOCK:
        return actionBlock != null;
    }
    return super.eIsSet(featureID);
  }

} //MatchedRuleImpl
