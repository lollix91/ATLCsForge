/**
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.myAtl.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.mydsl.myAtl.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MyAtlFactoryImpl extends EFactoryImpl implements MyAtlFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MyAtlFactory init()
  {
    try
    {
      MyAtlFactory theMyAtlFactory = (MyAtlFactory)EPackage.Registry.INSTANCE.getEFactory(MyAtlPackage.eNS_URI);
      if (theMyAtlFactory != null)
      {
        return theMyAtlFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MyAtlFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyAtlFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MyAtlPackage.MODULE: return createModule();
      case MyAtlPackage.MODULE_ELEMENT: return createModuleElement();
      case MyAtlPackage.MATCHED_RULE: return createMatchedRule();
      case MyAtlPackage.CALLED_RULE: return createCalledRule();
      case MyAtlPackage.HELPER: return createHelper();
      case MyAtlPackage.ATL_DEF_CS: return createATLDefCS();
      case MyAtlPackage.ATL_PARAMETER_CS: return createATLParameterCS();
      case MyAtlPackage.RULE_VARIABLE_DECLARATION: return createRuleVariableDeclaration();
      case MyAtlPackage.IN_PATTERN: return createInPattern();
      case MyAtlPackage.IN_PATTERN_ELEMENT: return createInPatternElement();
      case MyAtlPackage.OUT_PATTERN: return createOutPattern();
      case MyAtlPackage.OUT_PATTERN_ELEMENT: return createOutPatternElement();
      case MyAtlPackage.SIMPLE_OUT_PATTERN_ELEMENT: return createSimpleOutPatternElement();
      case MyAtlPackage.FOR_EACH_OUT_PATTERN_ELEMENT: return createForEachOutPatternElement();
      case MyAtlPackage.BINDING: return createBinding();
      case MyAtlPackage.ACTION_BLOCK: return createActionBlock();
      case MyAtlPackage.STATEMENT: return createStatement();
      case MyAtlPackage.BINDING_STAT: return createBindingStat();
      case MyAtlPackage.ATL_TYPE: return createATLType();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Module createModule()
  {
    ModuleImpl module = new ModuleImpl();
    return module;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModuleElement createModuleElement()
  {
    ModuleElementImpl moduleElement = new ModuleElementImpl();
    return moduleElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MatchedRule createMatchedRule()
  {
    MatchedRuleImpl matchedRule = new MatchedRuleImpl();
    return matchedRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CalledRule createCalledRule()
  {
    CalledRuleImpl calledRule = new CalledRuleImpl();
    return calledRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Helper createHelper()
  {
    HelperImpl helper = new HelperImpl();
    return helper;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ATLDefCS createATLDefCS()
  {
    ATLDefCSImpl atlDefCS = new ATLDefCSImpl();
    return atlDefCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ATLParameterCS createATLParameterCS()
  {
    ATLParameterCSImpl atlParameterCS = new ATLParameterCSImpl();
    return atlParameterCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RuleVariableDeclaration createRuleVariableDeclaration()
  {
    RuleVariableDeclarationImpl ruleVariableDeclaration = new RuleVariableDeclarationImpl();
    return ruleVariableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InPattern createInPattern()
  {
    InPatternImpl inPattern = new InPatternImpl();
    return inPattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InPatternElement createInPatternElement()
  {
    InPatternElementImpl inPatternElement = new InPatternElementImpl();
    return inPatternElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OutPattern createOutPattern()
  {
    OutPatternImpl outPattern = new OutPatternImpl();
    return outPattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OutPatternElement createOutPatternElement()
  {
    OutPatternElementImpl outPatternElement = new OutPatternElementImpl();
    return outPatternElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimpleOutPatternElement createSimpleOutPatternElement()
  {
    SimpleOutPatternElementImpl simpleOutPatternElement = new SimpleOutPatternElementImpl();
    return simpleOutPatternElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ForEachOutPatternElement createForEachOutPatternElement()
  {
    ForEachOutPatternElementImpl forEachOutPatternElement = new ForEachOutPatternElementImpl();
    return forEachOutPatternElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Binding createBinding()
  {
    BindingImpl binding = new BindingImpl();
    return binding;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ActionBlock createActionBlock()
  {
    ActionBlockImpl actionBlock = new ActionBlockImpl();
    return actionBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BindingStat createBindingStat()
  {
    BindingStatImpl bindingStat = new BindingStatImpl();
    return bindingStat;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ATLType createATLType()
  {
    ATLTypeImpl atlType = new ATLTypeImpl();
    return atlType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyAtlPackage getMyAtlPackage()
  {
    return (MyAtlPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MyAtlPackage getPackage()
  {
    return MyAtlPackage.eINSTANCE;
  }

} //MyAtlFactoryImpl
