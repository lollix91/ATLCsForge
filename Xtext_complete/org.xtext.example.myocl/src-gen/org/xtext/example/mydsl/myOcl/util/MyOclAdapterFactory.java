/**
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.myOcl.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.xtext.example.mydsl.myOcl.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.xtext.example.mydsl.myOcl.MyOclPackage
 * @generated
 */
public class MyOclAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MyOclPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyOclAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = MyOclPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MyOclSwitch<Adapter> modelSwitch =
    new MyOclSwitch<Adapter>()
    {
      @Override
      public Adapter caseCompleteOCLDocumentCS(CompleteOCLDocumentCS object)
      {
        return createCompleteOCLDocumentCSAdapter();
      }
      @Override
      public Adapter caseClassifierContextDeclCS(ClassifierContextDeclCS object)
      {
        return createClassifierContextDeclCSAdapter();
      }
      @Override
      public Adapter caseConstraintCS(ConstraintCS object)
      {
        return createConstraintCSAdapter();
      }
      @Override
      public Adapter caseContextDeclCS(ContextDeclCS object)
      {
        return createContextDeclCSAdapter();
      }
      @Override
      public Adapter caseDefCS(DefCS object)
      {
        return createDefCSAdapter();
      }
      @Override
      public Adapter caseDefOperationCS(DefOperationCS object)
      {
        return createDefOperationCSAdapter();
      }
      @Override
      public Adapter caseDefParameterCS(DefParameterCS object)
      {
        return createDefParameterCSAdapter();
      }
      @Override
      public Adapter caseDefPropertyCS(DefPropertyCS object)
      {
        return createDefPropertyCSAdapter();
      }
      @Override
      public Adapter caseImportCS(ImportCS object)
      {
        return createImportCSAdapter();
      }
      @Override
      public Adapter caseURIPathNameCS(URIPathNameCS object)
      {
        return createURIPathNameCSAdapter();
      }
      @Override
      public Adapter caseOperationContextDeclCS(OperationContextDeclCS object)
      {
        return createOperationContextDeclCSAdapter();
      }
      @Override
      public Adapter casePackageDeclarationCS(PackageDeclarationCS object)
      {
        return createPackageDeclarationCSAdapter();
      }
      @Override
      public Adapter caseParameterCS(ParameterCS object)
      {
        return createParameterCSAdapter();
      }
      @Override
      public Adapter casePropertyContextDeclCS(PropertyContextDeclCS object)
      {
        return createPropertyContextDeclCSAdapter();
      }
      @Override
      public Adapter caseSpecificationCS(SpecificationCS object)
      {
        return createSpecificationCSAdapter();
      }
      @Override
      public Adapter casepathNameCS(pathNameCS object)
      {
        return createpathNameCSAdapter();
      }
      @Override
      public Adapter caseTemplateSignatureCS(TemplateSignatureCS object)
      {
        return createTemplateSignatureCSAdapter();
      }
      @Override
      public Adapter caseTypeParameterCS(TypeParameterCS object)
      {
        return createTypeParameterCSAdapter();
      }
      @Override
      public Adapter caseTypedRefCS(TypedRefCS object)
      {
        return createTypedRefCSAdapter();
      }
      @Override
      public Adapter caseNavigatingArgExpCS(NavigatingArgExpCS object)
      {
        return createNavigatingArgExpCSAdapter();
      }
      @Override
      public Adapter casePrimitiveTypeCS(PrimitiveTypeCS object)
      {
        return createPrimitiveTypeCSAdapter();
      }
      @Override
      public Adapter caseCollectionTypeCS(CollectionTypeCS object)
      {
        return createCollectionTypeCSAdapter();
      }
      @Override
      public Adapter caseTupleTypeCS(TupleTypeCS object)
      {
        return createTupleTypeCSAdapter();
      }
      @Override
      public Adapter casetuplePartCS(tuplePartCS object)
      {
        return createtuplePartCSAdapter();
      }
      @Override
      public Adapter caseCollectionLiteralExpCS(CollectionLiteralExpCS object)
      {
        return createCollectionLiteralExpCSAdapter();
      }
      @Override
      public Adapter caseCollectionLiteralPartCS(CollectionLiteralPartCS object)
      {
        return createCollectionLiteralPartCSAdapter();
      }
      @Override
      public Adapter casePrimitiveLiteralExpCS(PrimitiveLiteralExpCS object)
      {
        return createPrimitiveLiteralExpCSAdapter();
      }
      @Override
      public Adapter caseTupleLiteralExpCS(TupleLiteralExpCS object)
      {
        return createTupleLiteralExpCSAdapter();
      }
      @Override
      public Adapter caseTupleLiteralPartCS(TupleLiteralPartCS object)
      {
        return createTupleLiteralPartCSAdapter();
      }
      @Override
      public Adapter caseNumberLiteralExpCS(NumberLiteralExpCS object)
      {
        return createNumberLiteralExpCSAdapter();
      }
      @Override
      public Adapter caseStringLiteralExpCS(StringLiteralExpCS object)
      {
        return createStringLiteralExpCSAdapter();
      }
      @Override
      public Adapter caseBooleanLiteralExpCS(BooleanLiteralExpCS object)
      {
        return createBooleanLiteralExpCSAdapter();
      }
      @Override
      public Adapter caseUnlimitedNaturalLiteralExpCS(UnlimitedNaturalLiteralExpCS object)
      {
        return createUnlimitedNaturalLiteralExpCSAdapter();
      }
      @Override
      public Adapter caseInvalidLiteralExpCS(InvalidLiteralExpCS object)
      {
        return createInvalidLiteralExpCSAdapter();
      }
      @Override
      public Adapter caseNullLiteralExpCS(NullLiteralExpCS object)
      {
        return createNullLiteralExpCSAdapter();
      }
      @Override
      public Adapter caseTypeLiteralCS(TypeLiteralCS object)
      {
        return createTypeLiteralCSAdapter();
      }
      @Override
      public Adapter caseTypeLiteralExpCS(TypeLiteralExpCS object)
      {
        return createTypeLiteralExpCSAdapter();
      }
      @Override
      public Adapter caseTypeNameExpCS(TypeNameExpCS object)
      {
        return createTypeNameExpCSAdapter();
      }
      @Override
      public Adapter caseTypeExpCS(TypeExpCS object)
      {
        return createTypeExpCSAdapter();
      }
      @Override
      public Adapter caseNavigatingArgCS(NavigatingArgCS object)
      {
        return createNavigatingArgCSAdapter();
      }
      @Override
      public Adapter caseNavigatingBarArgCS(NavigatingBarArgCS object)
      {
        return createNavigatingBarArgCSAdapter();
      }
      @Override
      public Adapter caseNavigatingCommaArgCS(NavigatingCommaArgCS object)
      {
        return createNavigatingCommaArgCSAdapter();
      }
      @Override
      public Adapter caseNavigatingSemiArgCS(NavigatingSemiArgCS object)
      {
        return createNavigatingSemiArgCSAdapter();
      }
      @Override
      public Adapter caseIfExpCS(IfExpCS object)
      {
        return createIfExpCSAdapter();
      }
      @Override
      public Adapter caseLetExpCS(LetExpCS object)
      {
        return createLetExpCSAdapter();
      }
      @Override
      public Adapter caseLetVariableCS(LetVariableCS object)
      {
        return createLetVariableCSAdapter();
      }
      @Override
      public Adapter caseNestedExpCS(NestedExpCS object)
      {
        return createNestedExpCSAdapter();
      }
      @Override
      public Adapter caseSelfExpCS(SelfExpCS object)
      {
        return createSelfExpCSAdapter();
      }
      @Override
      public Adapter casePrimaryExpCS(PrimaryExpCS object)
      {
        return createPrimaryExpCSAdapter();
      }
      @Override
      public Adapter caseNameExpCS(NameExpCS object)
      {
        return createNameExpCSAdapter();
      }
      @Override
      public Adapter caseExpCS(ExpCS object)
      {
        return createExpCSAdapter();
      }
      @Override
      public Adapter caseInfixedExpCS(InfixedExpCS object)
      {
        return createInfixedExpCSAdapter();
      }
      @Override
      public Adapter caseBinaryOperatorCS(BinaryOperatorCS object)
      {
        return createBinaryOperatorCSAdapter();
      }
      @Override
      public Adapter caseInfixOperatorCS(InfixOperatorCS object)
      {
        return createInfixOperatorCSAdapter();
      }
      @Override
      public Adapter caseNavigationOperatorCS(NavigationOperatorCS object)
      {
        return createNavigationOperatorCSAdapter();
      }
      @Override
      public Adapter casePrefixedExpCS(PrefixedExpCS object)
      {
        return createPrefixedExpCSAdapter();
      }
      @Override
      public Adapter caseUnaryOperatorCS(UnaryOperatorCS object)
      {
        return createUnaryOperatorCSAdapter();
      }
      @Override
      public Adapter caseIndexExpCS(IndexExpCS object)
      {
        return createIndexExpCSAdapter();
      }
      @Override
      public Adapter caseNavigatingExpCS_Base(NavigatingExpCS_Base object)
      {
        return createNavigatingExpCS_BaseAdapter();
      }
      @Override
      public Adapter caseNavigatingExpCS(NavigatingExpCS object)
      {
        return createNavigatingExpCSAdapter();
      }
      @Override
      public Adapter caseOCLMessageArgCS(OCLMessageArgCS object)
      {
        return createOCLMessageArgCSAdapter();
      }
      @Override
      public Adapter caseInfixExpCS(InfixExpCS object)
      {
        return createInfixExpCSAdapter();
      }
      @Override
      public Adapter casePrefixExpCS(PrefixExpCS object)
      {
        return createPrefixExpCSAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.CompleteOCLDocumentCS <em>Complete OCL Document CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.CompleteOCLDocumentCS
   * @generated
   */
  public Adapter createCompleteOCLDocumentCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.ClassifierContextDeclCS <em>Classifier Context Decl CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.ClassifierContextDeclCS
   * @generated
   */
  public Adapter createClassifierContextDeclCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.ConstraintCS <em>Constraint CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.ConstraintCS
   * @generated
   */
  public Adapter createConstraintCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.ContextDeclCS <em>Context Decl CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.ContextDeclCS
   * @generated
   */
  public Adapter createContextDeclCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.DefCS <em>Def CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.DefCS
   * @generated
   */
  public Adapter createDefCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.DefOperationCS <em>Def Operation CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.DefOperationCS
   * @generated
   */
  public Adapter createDefOperationCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.DefParameterCS <em>Def Parameter CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.DefParameterCS
   * @generated
   */
  public Adapter createDefParameterCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.DefPropertyCS <em>Def Property CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.DefPropertyCS
   * @generated
   */
  public Adapter createDefPropertyCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.ImportCS <em>Import CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.ImportCS
   * @generated
   */
  public Adapter createImportCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.URIPathNameCS <em>URI Path Name CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.URIPathNameCS
   * @generated
   */
  public Adapter createURIPathNameCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.OperationContextDeclCS <em>Operation Context Decl CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.OperationContextDeclCS
   * @generated
   */
  public Adapter createOperationContextDeclCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.PackageDeclarationCS <em>Package Declaration CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.PackageDeclarationCS
   * @generated
   */
  public Adapter createPackageDeclarationCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.ParameterCS <em>Parameter CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.ParameterCS
   * @generated
   */
  public Adapter createParameterCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.PropertyContextDeclCS <em>Property Context Decl CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.PropertyContextDeclCS
   * @generated
   */
  public Adapter createPropertyContextDeclCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.SpecificationCS <em>Specification CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.SpecificationCS
   * @generated
   */
  public Adapter createSpecificationCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.pathNameCS <em>path Name CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.pathNameCS
   * @generated
   */
  public Adapter createpathNameCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.TemplateSignatureCS <em>Template Signature CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.TemplateSignatureCS
   * @generated
   */
  public Adapter createTemplateSignatureCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.TypeParameterCS <em>Type Parameter CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.TypeParameterCS
   * @generated
   */
  public Adapter createTypeParameterCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.TypedRefCS <em>Typed Ref CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.TypedRefCS
   * @generated
   */
  public Adapter createTypedRefCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.NavigatingArgExpCS <em>Navigating Arg Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.NavigatingArgExpCS
   * @generated
   */
  public Adapter createNavigatingArgExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.PrimitiveTypeCS <em>Primitive Type CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.PrimitiveTypeCS
   * @generated
   */
  public Adapter createPrimitiveTypeCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.CollectionTypeCS <em>Collection Type CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.CollectionTypeCS
   * @generated
   */
  public Adapter createCollectionTypeCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.TupleTypeCS <em>Tuple Type CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.TupleTypeCS
   * @generated
   */
  public Adapter createTupleTypeCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.tuplePartCS <em>tuple Part CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.tuplePartCS
   * @generated
   */
  public Adapter createtuplePartCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.CollectionLiteralExpCS <em>Collection Literal Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.CollectionLiteralExpCS
   * @generated
   */
  public Adapter createCollectionLiteralExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.CollectionLiteralPartCS <em>Collection Literal Part CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.CollectionLiteralPartCS
   * @generated
   */
  public Adapter createCollectionLiteralPartCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.PrimitiveLiteralExpCS <em>Primitive Literal Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.PrimitiveLiteralExpCS
   * @generated
   */
  public Adapter createPrimitiveLiteralExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.TupleLiteralExpCS <em>Tuple Literal Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.TupleLiteralExpCS
   * @generated
   */
  public Adapter createTupleLiteralExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.TupleLiteralPartCS <em>Tuple Literal Part CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.TupleLiteralPartCS
   * @generated
   */
  public Adapter createTupleLiteralPartCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.NumberLiteralExpCS <em>Number Literal Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.NumberLiteralExpCS
   * @generated
   */
  public Adapter createNumberLiteralExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.StringLiteralExpCS <em>String Literal Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.StringLiteralExpCS
   * @generated
   */
  public Adapter createStringLiteralExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.BooleanLiteralExpCS <em>Boolean Literal Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.BooleanLiteralExpCS
   * @generated
   */
  public Adapter createBooleanLiteralExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.UnlimitedNaturalLiteralExpCS <em>Unlimited Natural Literal Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.UnlimitedNaturalLiteralExpCS
   * @generated
   */
  public Adapter createUnlimitedNaturalLiteralExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.InvalidLiteralExpCS <em>Invalid Literal Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.InvalidLiteralExpCS
   * @generated
   */
  public Adapter createInvalidLiteralExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.NullLiteralExpCS <em>Null Literal Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.NullLiteralExpCS
   * @generated
   */
  public Adapter createNullLiteralExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.TypeLiteralCS <em>Type Literal CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.TypeLiteralCS
   * @generated
   */
  public Adapter createTypeLiteralCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.TypeLiteralExpCS <em>Type Literal Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.TypeLiteralExpCS
   * @generated
   */
  public Adapter createTypeLiteralExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.TypeNameExpCS <em>Type Name Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.TypeNameExpCS
   * @generated
   */
  public Adapter createTypeNameExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.TypeExpCS <em>Type Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.TypeExpCS
   * @generated
   */
  public Adapter createTypeExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.NavigatingArgCS <em>Navigating Arg CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.NavigatingArgCS
   * @generated
   */
  public Adapter createNavigatingArgCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.NavigatingBarArgCS <em>Navigating Bar Arg CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.NavigatingBarArgCS
   * @generated
   */
  public Adapter createNavigatingBarArgCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.NavigatingCommaArgCS <em>Navigating Comma Arg CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.NavigatingCommaArgCS
   * @generated
   */
  public Adapter createNavigatingCommaArgCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.NavigatingSemiArgCS <em>Navigating Semi Arg CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.NavigatingSemiArgCS
   * @generated
   */
  public Adapter createNavigatingSemiArgCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.IfExpCS <em>If Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.IfExpCS
   * @generated
   */
  public Adapter createIfExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.LetExpCS <em>Let Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.LetExpCS
   * @generated
   */
  public Adapter createLetExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.LetVariableCS <em>Let Variable CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.LetVariableCS
   * @generated
   */
  public Adapter createLetVariableCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.NestedExpCS <em>Nested Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.NestedExpCS
   * @generated
   */
  public Adapter createNestedExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.SelfExpCS <em>Self Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.SelfExpCS
   * @generated
   */
  public Adapter createSelfExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.PrimaryExpCS <em>Primary Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.PrimaryExpCS
   * @generated
   */
  public Adapter createPrimaryExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.NameExpCS <em>Name Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.NameExpCS
   * @generated
   */
  public Adapter createNameExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.ExpCS <em>Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.ExpCS
   * @generated
   */
  public Adapter createExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.InfixedExpCS <em>Infixed Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.InfixedExpCS
   * @generated
   */
  public Adapter createInfixedExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.BinaryOperatorCS <em>Binary Operator CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.BinaryOperatorCS
   * @generated
   */
  public Adapter createBinaryOperatorCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.InfixOperatorCS <em>Infix Operator CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.InfixOperatorCS
   * @generated
   */
  public Adapter createInfixOperatorCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.NavigationOperatorCS <em>Navigation Operator CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.NavigationOperatorCS
   * @generated
   */
  public Adapter createNavigationOperatorCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.PrefixedExpCS <em>Prefixed Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.PrefixedExpCS
   * @generated
   */
  public Adapter createPrefixedExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.UnaryOperatorCS <em>Unary Operator CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.UnaryOperatorCS
   * @generated
   */
  public Adapter createUnaryOperatorCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.IndexExpCS <em>Index Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.IndexExpCS
   * @generated
   */
  public Adapter createIndexExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.NavigatingExpCS_Base <em>Navigating Exp CS Base</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.NavigatingExpCS_Base
   * @generated
   */
  public Adapter createNavigatingExpCS_BaseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.NavigatingExpCS <em>Navigating Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.NavigatingExpCS
   * @generated
   */
  public Adapter createNavigatingExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.OCLMessageArgCS <em>OCL Message Arg CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.OCLMessageArgCS
   * @generated
   */
  public Adapter createOCLMessageArgCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.InfixExpCS <em>Infix Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.InfixExpCS
   * @generated
   */
  public Adapter createInfixExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.myOcl.PrefixExpCS <em>Prefix Exp CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.myOcl.PrefixExpCS
   * @generated
   */
  public Adapter createPrefixExpCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //MyOclAdapterFactory
