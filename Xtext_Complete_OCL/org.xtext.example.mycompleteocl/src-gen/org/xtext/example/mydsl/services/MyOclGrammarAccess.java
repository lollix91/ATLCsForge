/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyOclGrammarAccess extends AbstractGrammarElementFinder {
	
	public class CompleteOCLDocumentCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.CompleteOCLDocumentCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedImportsImportCSParserRuleCall_0_0 = (RuleCall)cOwnedImportsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cOwnedPackagesAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cOwnedPackagesPackageDeclarationCSParserRuleCall_1_0_0 = (RuleCall)cOwnedPackagesAssignment_1_0.eContents().get(0);
		private final Assignment cOwnedContextsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cOwnedContextsContextDeclCSParserRuleCall_1_1_0 = (RuleCall)cOwnedContextsAssignment_1_1.eContents().get(0);
		
		//CompleteOCLDocumentCS:
		//	ownedImports+=ImportCS* (ownedPackages+=PackageDeclarationCS | ownedContexts+=ContextDeclCS)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedImports+=ImportCS* (ownedPackages+=PackageDeclarationCS | ownedContexts+=ContextDeclCS)*
		public Group getGroup() { return cGroup; }
		
		//ownedImports+=ImportCS*
		public Assignment getOwnedImportsAssignment_0() { return cOwnedImportsAssignment_0; }
		
		//ImportCS
		public RuleCall getOwnedImportsImportCSParserRuleCall_0_0() { return cOwnedImportsImportCSParserRuleCall_0_0; }
		
		//(ownedPackages+=PackageDeclarationCS | ownedContexts+=ContextDeclCS)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//ownedPackages+=PackageDeclarationCS
		public Assignment getOwnedPackagesAssignment_1_0() { return cOwnedPackagesAssignment_1_0; }
		
		//PackageDeclarationCS
		public RuleCall getOwnedPackagesPackageDeclarationCSParserRuleCall_1_0_0() { return cOwnedPackagesPackageDeclarationCSParserRuleCall_1_0_0; }
		
		//ownedContexts+=ContextDeclCS
		public Assignment getOwnedContextsAssignment_1_1() { return cOwnedContextsAssignment_1_1; }
		
		//ContextDeclCS
		public RuleCall getOwnedContextsContextDeclCSParserRuleCall_1_1_0() { return cOwnedContextsContextDeclCSParserRuleCall_1_1_0; }
	}
	public class ClassifierContextDeclCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.ClassifierContextDeclCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOwnedSignatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedSignatureTemplateSignatureCSParserRuleCall_1_0 = (RuleCall)cOwnedSignatureAssignment_1.eContents().get(0);
		private final Assignment cSelfNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSelfNameUnrestrictedNameParserRuleCall_2_0 = (RuleCall)cSelfNameAssignment_2.eContents().get(0);
		private final Assignment cOwnedPathNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedPathNamePathNameCSParserRuleCall_3_0 = (RuleCall)cOwnedPathNameAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cInvKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cOwnedInvariantsAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cOwnedInvariantsConstraintCSParserRuleCall_4_0_1_0 = (RuleCall)cOwnedInvariantsAssignment_4_0_1.eContents().get(0);
		private final Assignment cOwnedDefinitionsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cOwnedDefinitionsDefCSParserRuleCall_4_1_0 = (RuleCall)cOwnedDefinitionsAssignment_4_1.eContents().get(0);
		
		//ClassifierContextDeclCS:
		//	'context' ownedSignature=TemplateSignatureCS? selfName=UnrestrictedName?
		//	ownedPathName=pathNameCS ('inv' ownedInvariants+=ConstraintCS | ownedDefinitions+=DefCS)+;
		@Override public ParserRule getRule() { return rule; }
		
		//'context' ownedSignature=TemplateSignatureCS? selfName=UnrestrictedName? ownedPathName=pathNameCS ('inv'
		//ownedInvariants+=ConstraintCS | ownedDefinitions+=DefCS)+
		public Group getGroup() { return cGroup; }
		
		//'context'
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }
		
		//ownedSignature=TemplateSignatureCS?
		public Assignment getOwnedSignatureAssignment_1() { return cOwnedSignatureAssignment_1; }
		
		//TemplateSignatureCS
		public RuleCall getOwnedSignatureTemplateSignatureCSParserRuleCall_1_0() { return cOwnedSignatureTemplateSignatureCSParserRuleCall_1_0; }
		
		//selfName=UnrestrictedName?
		public Assignment getSelfNameAssignment_2() { return cSelfNameAssignment_2; }
		
		//UnrestrictedName
		public RuleCall getSelfNameUnrestrictedNameParserRuleCall_2_0() { return cSelfNameUnrestrictedNameParserRuleCall_2_0; }
		
		//ownedPathName=pathNameCS
		public Assignment getOwnedPathNameAssignment_3() { return cOwnedPathNameAssignment_3; }
		
		//pathNameCS
		public RuleCall getOwnedPathNamePathNameCSParserRuleCall_3_0() { return cOwnedPathNamePathNameCSParserRuleCall_3_0; }
		
		//('inv' ownedInvariants+=ConstraintCS | ownedDefinitions+=DefCS)+
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//'inv' ownedInvariants+=ConstraintCS
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//'inv'
		public Keyword getInvKeyword_4_0_0() { return cInvKeyword_4_0_0; }
		
		//ownedInvariants+=ConstraintCS
		public Assignment getOwnedInvariantsAssignment_4_0_1() { return cOwnedInvariantsAssignment_4_0_1; }
		
		//ConstraintCS
		public RuleCall getOwnedInvariantsConstraintCSParserRuleCall_4_0_1_0() { return cOwnedInvariantsConstraintCSParserRuleCall_4_0_1_0; }
		
		//ownedDefinitions+=DefCS
		public Assignment getOwnedDefinitionsAssignment_4_1() { return cOwnedDefinitionsAssignment_4_1; }
		
		//DefCS
		public RuleCall getOwnedDefinitionsDefCSParserRuleCall_4_1_0() { return cOwnedDefinitionsDefCSParserRuleCall_4_1_0; }
	}
	public class CompleteOCLNavigationOperatorNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.CompleteOCLNavigationOperatorName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCircumflexAccentKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCircumflexAccentCircumflexAccentKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//CompleteOCLNavigationOperatorName:
		//	'^' | '^^';
		@Override public ParserRule getRule() { return rule; }
		
		//'^' | '^^'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_0() { return cCircumflexAccentKeyword_0; }
		
		//'^^'
		public Keyword getCircumflexAccentCircumflexAccentKeyword_1() { return cCircumflexAccentCircumflexAccentKeyword_1; }
	}
	public class ConstraintCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.ConstraintCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameUnrestrictedNameParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cOwnedMessageSpecificationAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cOwnedMessageSpecificationSpecificationCSParserRuleCall_0_1_1_0 = (RuleCall)cOwnedMessageSpecificationAssignment_0_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedSpecificationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedSpecificationSpecificationCSParserRuleCall_2_0 = (RuleCall)cOwnedSpecificationAssignment_2.eContents().get(0);
		
		///*
		// * A Constraint such as 
		// * 
		// * oclText[IsNull('should be null') : self = null]
		// * 
		// * comprises at least the OCL specification of the constraint. The constraint may
		// * additionally have a name which may be followed by a parenthesized expression defining an OCL
		// * expression to be evaluated to provide an error message.
		// */ ConstraintCS:
		//	(name=UnrestrictedName ('(' ownedMessageSpecification=SpecificationCS ')')?)? ':' ownedSpecification=SpecificationCS;
		@Override public ParserRule getRule() { return rule; }
		
		//(name=UnrestrictedName ('(' ownedMessageSpecification=SpecificationCS ')')?)? ':' ownedSpecification=SpecificationCS
		public Group getGroup() { return cGroup; }
		
		//(name=UnrestrictedName ('(' ownedMessageSpecification=SpecificationCS ')')?)?
		public Group getGroup_0() { return cGroup_0; }
		
		//name=UnrestrictedName
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//UnrestrictedName
		public RuleCall getNameUnrestrictedNameParserRuleCall_0_0_0() { return cNameUnrestrictedNameParserRuleCall_0_0_0; }
		
		//('(' ownedMessageSpecification=SpecificationCS ')')?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1_0() { return cLeftParenthesisKeyword_0_1_0; }
		
		//ownedMessageSpecification=SpecificationCS
		public Assignment getOwnedMessageSpecificationAssignment_0_1_1() { return cOwnedMessageSpecificationAssignment_0_1_1; }
		
		//SpecificationCS
		public RuleCall getOwnedMessageSpecificationSpecificationCSParserRuleCall_0_1_1_0() { return cOwnedMessageSpecificationSpecificationCSParserRuleCall_0_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_1_2() { return cRightParenthesisKeyword_0_1_2; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//ownedSpecification=SpecificationCS
		public Assignment getOwnedSpecificationAssignment_2() { return cOwnedSpecificationAssignment_2; }
		
		//SpecificationCS
		public RuleCall getOwnedSpecificationSpecificationCSParserRuleCall_2_0() { return cOwnedSpecificationSpecificationCSParserRuleCall_2_0; }
	}
	public class ContextDeclCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.ContextDeclCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPropertyContextDeclCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassifierContextDeclCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOperationContextDeclCSParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		///*
		// * A Context declaration can be a Classifier, Operation of Property Context declaration.
		// */ ContextDeclCS:
		//	PropertyContextDeclCS
		//	| ClassifierContextDeclCS
		//	| OperationContextDeclCS;
		@Override public ParserRule getRule() { return rule; }
		
		//PropertyContextDeclCS | ClassifierContextDeclCS | OperationContextDeclCS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PropertyContextDeclCS
		public RuleCall getPropertyContextDeclCSParserRuleCall_0() { return cPropertyContextDeclCSParserRuleCall_0; }
		
		//ClassifierContextDeclCS
		public RuleCall getClassifierContextDeclCSParserRuleCall_1() { return cClassifierContextDeclCSParserRuleCall_1; }
		
		//OperationContextDeclCS
		public RuleCall getOperationContextDeclCSParserRuleCall_2() { return cOperationContextDeclCSParserRuleCall_2; }
	}
	public class DefCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.DefCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefOperationCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDefPropertyCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///*
		// * A definition can be an, Operation or Property definition.
		// */ DefCS:
		//	DefOperationCS | DefPropertyCS;
		@Override public ParserRule getRule() { return rule; }
		
		//DefOperationCS | DefPropertyCS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DefOperationCS
		public RuleCall getDefOperationCSParserRuleCall_0() { return cDefOperationCSParserRuleCall_0; }
		
		//DefPropertyCS
		public RuleCall getDefPropertyCSParserRuleCall_1() { return cDefPropertyCSParserRuleCall_1; }
	}
	public class DefOperationCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.DefOperationCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsStaticAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsStaticStaticKeyword_0_0 = (Keyword)cIsStaticAssignment_0.eContents().get(0);
		private final Keyword cDefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cUnrestrictedNameParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOwnedSignatureAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOwnedSignatureTemplateSignatureCSParserRuleCall_4_0 = (RuleCall)cOwnedSignatureAssignment_4.eContents().get(0);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameUnrestrictedNameParserRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cOwnedParametersAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cOwnedParametersDefParameterCSParserRuleCall_7_0_0 = (RuleCall)cOwnedParametersAssignment_7_0.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Keyword cCommaKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cOwnedParametersAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cOwnedParametersDefParameterCSParserRuleCall_7_1_1_0 = (RuleCall)cOwnedParametersAssignment_7_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cColonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cOwnedTypeAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cOwnedTypeTypeExpCSParserRuleCall_10_0 = (RuleCall)cOwnedTypeAssignment_10.eContents().get(0);
		private final Keyword cEqualsSignKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cOwnedSpecificationAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cOwnedSpecificationSpecificationCSParserRuleCall_12_0 = (RuleCall)cOwnedSpecificationAssignment_12.eContents().get(0);
		
		///*
		// * An operation definition provides an additional operation for its classifier context.
		// * 
		// * oclText[static def redundantName: isEven(i : Integer) : Boolean = i mod 2 = 0]
		// * 
		// * comprises at least an operation name, return type and an OCL expression that evaluates the operation value.
		// * The operation may have parameters and may be declared static in which case there is no oclText[self].
		// * 
		// * For compatibility with invariants the definition may have a name that is never used.
		// */ DefOperationCS:
		//	isStatic?='static'? 'def' UnrestrictedName? ':' ownedSignature=TemplateSignatureCS?
		//	name=UnrestrictedName '(' (ownedParameters+=DefParameterCS (',' ownedParameters+=DefParameterCS)*)? ')' ':'
		//	ownedType=TypeExpCS?
		//	'=' ownedSpecification=SpecificationCS;
		@Override public ParserRule getRule() { return rule; }
		
		//isStatic?='static'? 'def' UnrestrictedName? ':' ownedSignature=TemplateSignatureCS? name=UnrestrictedName '('
		//(ownedParameters+=DefParameterCS (',' ownedParameters+=DefParameterCS)*)? ')' ':' ownedType=TypeExpCS? '='
		//ownedSpecification=SpecificationCS
		public Group getGroup() { return cGroup; }
		
		//isStatic?='static'?
		public Assignment getIsStaticAssignment_0() { return cIsStaticAssignment_0; }
		
		//'static'
		public Keyword getIsStaticStaticKeyword_0_0() { return cIsStaticStaticKeyword_0_0; }
		
		//'def'
		public Keyword getDefKeyword_1() { return cDefKeyword_1; }
		
		//UnrestrictedName?
		public RuleCall getUnrestrictedNameParserRuleCall_2() { return cUnrestrictedNameParserRuleCall_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//ownedSignature=TemplateSignatureCS?
		public Assignment getOwnedSignatureAssignment_4() { return cOwnedSignatureAssignment_4; }
		
		//TemplateSignatureCS
		public RuleCall getOwnedSignatureTemplateSignatureCSParserRuleCall_4_0() { return cOwnedSignatureTemplateSignatureCSParserRuleCall_4_0; }
		
		//name=UnrestrictedName
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }
		
		//UnrestrictedName
		public RuleCall getNameUnrestrictedNameParserRuleCall_5_0() { return cNameUnrestrictedNameParserRuleCall_5_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }
		
		//(ownedParameters+=DefParameterCS (',' ownedParameters+=DefParameterCS)*)?
		public Group getGroup_7() { return cGroup_7; }
		
		//ownedParameters+=DefParameterCS
		public Assignment getOwnedParametersAssignment_7_0() { return cOwnedParametersAssignment_7_0; }
		
		//DefParameterCS
		public RuleCall getOwnedParametersDefParameterCSParserRuleCall_7_0_0() { return cOwnedParametersDefParameterCSParserRuleCall_7_0_0; }
		
		//(',' ownedParameters+=DefParameterCS)*
		public Group getGroup_7_1() { return cGroup_7_1; }
		
		//','
		public Keyword getCommaKeyword_7_1_0() { return cCommaKeyword_7_1_0; }
		
		//ownedParameters+=DefParameterCS
		public Assignment getOwnedParametersAssignment_7_1_1() { return cOwnedParametersAssignment_7_1_1; }
		
		//DefParameterCS
		public RuleCall getOwnedParametersDefParameterCSParserRuleCall_7_1_1_0() { return cOwnedParametersDefParameterCSParserRuleCall_7_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
		
		//':'
		public Keyword getColonKeyword_9() { return cColonKeyword_9; }
		
		//ownedType=TypeExpCS?
		public Assignment getOwnedTypeAssignment_10() { return cOwnedTypeAssignment_10; }
		
		//TypeExpCS
		public RuleCall getOwnedTypeTypeExpCSParserRuleCall_10_0() { return cOwnedTypeTypeExpCSParserRuleCall_10_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_11() { return cEqualsSignKeyword_11; }
		
		//ownedSpecification=SpecificationCS
		public Assignment getOwnedSpecificationAssignment_12() { return cOwnedSpecificationAssignment_12; }
		
		//SpecificationCS
		public RuleCall getOwnedSpecificationSpecificationCSParserRuleCall_12_0() { return cOwnedSpecificationSpecificationCSParserRuleCall_12_0; }
	}
	public class DefParameterCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.DefParameterCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameUnrestrictedNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedTypeTypeExpCSParserRuleCall_2_0 = (RuleCall)cOwnedTypeAssignment_2.eContents().get(0);
		
		//DefParameterCS:
		//	name=UnrestrictedName ':' ownedType=TypeExpCS;
		@Override public ParserRule getRule() { return rule; }
		
		//name=UnrestrictedName ':' ownedType=TypeExpCS
		public Group getGroup() { return cGroup; }
		
		//name=UnrestrictedName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//UnrestrictedName
		public RuleCall getNameUnrestrictedNameParserRuleCall_0_0() { return cNameUnrestrictedNameParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//ownedType=TypeExpCS
		public Assignment getOwnedTypeAssignment_2() { return cOwnedTypeAssignment_2; }
		
		//TypeExpCS
		public RuleCall getOwnedTypeTypeExpCSParserRuleCall_2_0() { return cOwnedTypeTypeExpCSParserRuleCall_2_0; }
	}
	public class DefPropertyCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.DefPropertyCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsStaticAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsStaticStaticKeyword_0_0 = (Keyword)cIsStaticAssignment_0.eContents().get(0);
		private final Keyword cDefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cUnrestrictedNameParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameUnrestrictedNameParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOwnedTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOwnedTypeTypeExpCSParserRuleCall_6_0 = (RuleCall)cOwnedTypeAssignment_6.eContents().get(0);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cOwnedSpecificationAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOwnedSpecificationSpecificationCSParserRuleCall_8_0 = (RuleCall)cOwnedSpecificationAssignment_8.eContents().get(0);
		
		///*
		// * A property definition provides an additional property for its classifier context.
		// * 
		// * oclText[static def redundantName: upperCaseName : Boolean = name.toUpperCase()]
		// * 
		// * comprises at least a property name, type and an OCL expression that evaluates the property value.
		// * The property may be declared static in which case there is no oclText[self].
		// * 
		// * For compatibility with invariants the definition may have a name that is never used.
		// */ DefPropertyCS:
		//	isStatic?='static'? 'def' UnrestrictedName? ':' name=UnrestrictedName ':' ownedType=TypeExpCS
		//	'=' ownedSpecification=SpecificationCS;
		@Override public ParserRule getRule() { return rule; }
		
		//isStatic?='static'? 'def' UnrestrictedName? ':' name=UnrestrictedName ':' ownedType=TypeExpCS '='
		//ownedSpecification=SpecificationCS
		public Group getGroup() { return cGroup; }
		
		//isStatic?='static'?
		public Assignment getIsStaticAssignment_0() { return cIsStaticAssignment_0; }
		
		//'static'
		public Keyword getIsStaticStaticKeyword_0_0() { return cIsStaticStaticKeyword_0_0; }
		
		//'def'
		public Keyword getDefKeyword_1() { return cDefKeyword_1; }
		
		//UnrestrictedName?
		public RuleCall getUnrestrictedNameParserRuleCall_2() { return cUnrestrictedNameParserRuleCall_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//name=UnrestrictedName
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//UnrestrictedName
		public RuleCall getNameUnrestrictedNameParserRuleCall_4_0() { return cNameUnrestrictedNameParserRuleCall_4_0; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//ownedType=TypeExpCS
		public Assignment getOwnedTypeAssignment_6() { return cOwnedTypeAssignment_6; }
		
		//TypeExpCS
		public RuleCall getOwnedTypeTypeExpCSParserRuleCall_6_0() { return cOwnedTypeTypeExpCSParserRuleCall_6_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//ownedSpecification=SpecificationCS
		public Assignment getOwnedSpecificationAssignment_8() { return cOwnedSpecificationAssignment_8; }
		
		//SpecificationCS
		public RuleCall getOwnedSpecificationSpecificationCSParserRuleCall_8_0() { return cOwnedSpecificationSpecificationCSParserRuleCall_8_0; }
	}
	public class ImportCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.ImportCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cImportKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cIncludeKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cLibraryKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIdentifierParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOwnedPathNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedPathNameURIPathNameCSParserRuleCall_2_0 = (RuleCall)cOwnedPathNameAssignment_2.eContents().get(0);
		private final Assignment cIsAllAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cIsAllColonColonAsteriskKeyword_3_0 = (Keyword)cIsAllAssignment_3.eContents().get(0);
		
		//ImportCS:
		//	('import' | 'include' | 'library') (name=Identifier ':')? ownedPathName=URIPathNameCS isAll?='::*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//('import' | 'include' | 'library') (name=Identifier ':')? ownedPathName=URIPathNameCS isAll?='::*'?
		public Group getGroup() { return cGroup; }
		
		//'import' | 'include' | 'library'
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'import'
		public Keyword getImportKeyword_0_0() { return cImportKeyword_0_0; }
		
		//'include'
		public Keyword getIncludeKeyword_0_1() { return cIncludeKeyword_0_1; }
		
		//'library'
		public Keyword getLibraryKeyword_0_2() { return cLibraryKeyword_0_2; }
		
		//(name=Identifier ':')?
		public Group getGroup_1() { return cGroup_1; }
		
		//name=Identifier
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0_0() { return cNameIdentifierParserRuleCall_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//ownedPathName=URIPathNameCS
		public Assignment getOwnedPathNameAssignment_2() { return cOwnedPathNameAssignment_2; }
		
		//URIPathNameCS
		public RuleCall getOwnedPathNameURIPathNameCSParserRuleCall_2_0() { return cOwnedPathNameURIPathNameCSParserRuleCall_2_0; }
		
		//isAll?='::*'?
		public Assignment getIsAllAssignment_3() { return cIsAllAssignment_3; }
		
		//'::*'
		public Keyword getIsAllColonColonAsteriskKeyword_3_0() { return cIsAllColonColonAsteriskKeyword_3_0; }
	}
	public class URIPathNameCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.URIPathNameCS");
		private final RuleCall cPathNameCSParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//URIPathNameCS:
		//	pathNameCS;
		@Override public ParserRule getRule() { return rule; }
		
		//pathNameCS
		public RuleCall getPathNameCSParserRuleCall() { return cPathNameCSParserRuleCall; }
	}
	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.Identifier");
		private final RuleCall cSIMPLE_IDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Identifier:
		//	SIMPLE_ID;
		@Override public ParserRule getRule() { return rule; }
		
		//SIMPLE_ID
		public RuleCall getSIMPLE_IDTerminalRuleCall() { return cSIMPLE_IDTerminalRuleCall; }
	}
	public class OperationContextDeclCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.OperationContextDeclCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOwnedSignatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedSignatureTemplateSignatureCSParserRuleCall_1_0 = (RuleCall)cOwnedSignatureAssignment_1.eContents().get(0);
		private final Assignment cOwnedPathNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedPathNamePathNameCSParserRuleCall_2_0 = (RuleCall)cOwnedPathNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cOwnedParametersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cOwnedParametersParameterCSParserRuleCall_4_0_0 = (RuleCall)cOwnedParametersAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cOwnedParametersAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cOwnedParametersParameterCSParserRuleCall_4_1_1_0 = (RuleCall)cOwnedParametersAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cOwnedTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cOwnedTypeTypeExpCSParserRuleCall_7_0 = (RuleCall)cOwnedTypeAssignment_7.eContents().get(0);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Group cGroup_8_0 = (Group)cAlternatives_8.eContents().get(0);
		private final Keyword cPreKeyword_8_0_0 = (Keyword)cGroup_8_0.eContents().get(0);
		private final Assignment cOwnedPreconditionsAssignment_8_0_1 = (Assignment)cGroup_8_0.eContents().get(1);
		private final RuleCall cOwnedPreconditionsConstraintCSParserRuleCall_8_0_1_0 = (RuleCall)cOwnedPreconditionsAssignment_8_0_1.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cAlternatives_8.eContents().get(1);
		private final Keyword cPostKeyword_8_1_0 = (Keyword)cGroup_8_1.eContents().get(0);
		private final Assignment cOwnedPostconditionsAssignment_8_1_1 = (Assignment)cGroup_8_1.eContents().get(1);
		private final RuleCall cOwnedPostconditionsConstraintCSParserRuleCall_8_1_1_0 = (RuleCall)cOwnedPostconditionsAssignment_8_1_1.eContents().get(0);
		private final Group cGroup_8_2 = (Group)cAlternatives_8.eContents().get(2);
		private final Keyword cBodyKeyword_8_2_0 = (Keyword)cGroup_8_2.eContents().get(0);
		private final RuleCall cUnrestrictedNameParserRuleCall_8_2_1 = (RuleCall)cGroup_8_2.eContents().get(1);
		private final Keyword cColonKeyword_8_2_2 = (Keyword)cGroup_8_2.eContents().get(2);
		private final Assignment cOwnedBodiesAssignment_8_2_3 = (Assignment)cGroup_8_2.eContents().get(3);
		private final RuleCall cOwnedBodiesSpecificationCSParserRuleCall_8_2_3_0 = (RuleCall)cOwnedBodiesAssignment_8_2_3.eContents().get(0);
		
		///*
		// * An operation context declaration complements an existing operation with additional details.
		// * 
		// * oclText[context (T) Stack::pop() : T]
		// * oclText[pre NotEmptyPop: size() > 0]
		// * oclText[post: size()@pre = size() + 1]
		// * 
		// * The operation declaration comprises at least an operation name, which must be qualified with at least a
		// * class name. If used outside a package declaration, package name qualification is also needed. 
		// * If the return type is omitted OclVoid is used.
		// * The operation may also have operation parameters and template parameters.
		// * The declaration may be followed by any number of preconditions,
		// * and/or postconditions. It may also be followed by a body expression that defines the evaluation. 
		// * 
		// * For compatibility with invariants the body expression may have a name that is never used.
		// */ OperationContextDeclCS:
		//	'context' ownedSignature=TemplateSignatureCS? ownedPathName=pathNameCS
		//	'(' (ownedParameters+=ParameterCS (',' ownedParameters+=ParameterCS)*)? ')' ':' ownedType=TypeExpCS? ('pre'
		//	ownedPreconditions+=ConstraintCS | 'post' ownedPostconditions+=ConstraintCS | 'body' UnrestrictedName? ':'
		//	ownedBodies+=SpecificationCS)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'context' ownedSignature=TemplateSignatureCS? ownedPathName=pathNameCS '(' (ownedParameters+=ParameterCS (','
		//ownedParameters+=ParameterCS)*)? ')' ':' ownedType=TypeExpCS? ('pre' ownedPreconditions+=ConstraintCS | 'post'
		//ownedPostconditions+=ConstraintCS | 'body' UnrestrictedName? ':' ownedBodies+=SpecificationCS)*
		public Group getGroup() { return cGroup; }
		
		//'context'
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }
		
		//ownedSignature=TemplateSignatureCS?
		public Assignment getOwnedSignatureAssignment_1() { return cOwnedSignatureAssignment_1; }
		
		//TemplateSignatureCS
		public RuleCall getOwnedSignatureTemplateSignatureCSParserRuleCall_1_0() { return cOwnedSignatureTemplateSignatureCSParserRuleCall_1_0; }
		
		//ownedPathName=pathNameCS
		public Assignment getOwnedPathNameAssignment_2() { return cOwnedPathNameAssignment_2; }
		
		//pathNameCS
		public RuleCall getOwnedPathNamePathNameCSParserRuleCall_2_0() { return cOwnedPathNamePathNameCSParserRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(ownedParameters+=ParameterCS (',' ownedParameters+=ParameterCS)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//ownedParameters+=ParameterCS
		public Assignment getOwnedParametersAssignment_4_0() { return cOwnedParametersAssignment_4_0; }
		
		//ParameterCS
		public RuleCall getOwnedParametersParameterCSParserRuleCall_4_0_0() { return cOwnedParametersParameterCSParserRuleCall_4_0_0; }
		
		//(',' ownedParameters+=ParameterCS)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//ownedParameters+=ParameterCS
		public Assignment getOwnedParametersAssignment_4_1_1() { return cOwnedParametersAssignment_4_1_1; }
		
		//ParameterCS
		public RuleCall getOwnedParametersParameterCSParserRuleCall_4_1_1_0() { return cOwnedParametersParameterCSParserRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//ownedType=TypeExpCS?
		public Assignment getOwnedTypeAssignment_7() { return cOwnedTypeAssignment_7; }
		
		//TypeExpCS
		public RuleCall getOwnedTypeTypeExpCSParserRuleCall_7_0() { return cOwnedTypeTypeExpCSParserRuleCall_7_0; }
		
		//('pre' ownedPreconditions+=ConstraintCS | 'post' ownedPostconditions+=ConstraintCS | 'body' UnrestrictedName? ':'
		//ownedBodies+=SpecificationCS)*
		public Alternatives getAlternatives_8() { return cAlternatives_8; }
		
		//'pre' ownedPreconditions+=ConstraintCS
		public Group getGroup_8_0() { return cGroup_8_0; }
		
		//'pre'
		public Keyword getPreKeyword_8_0_0() { return cPreKeyword_8_0_0; }
		
		//ownedPreconditions+=ConstraintCS
		public Assignment getOwnedPreconditionsAssignment_8_0_1() { return cOwnedPreconditionsAssignment_8_0_1; }
		
		//ConstraintCS
		public RuleCall getOwnedPreconditionsConstraintCSParserRuleCall_8_0_1_0() { return cOwnedPreconditionsConstraintCSParserRuleCall_8_0_1_0; }
		
		//'post' ownedPostconditions+=ConstraintCS
		public Group getGroup_8_1() { return cGroup_8_1; }
		
		//'post'
		public Keyword getPostKeyword_8_1_0() { return cPostKeyword_8_1_0; }
		
		//ownedPostconditions+=ConstraintCS
		public Assignment getOwnedPostconditionsAssignment_8_1_1() { return cOwnedPostconditionsAssignment_8_1_1; }
		
		//ConstraintCS
		public RuleCall getOwnedPostconditionsConstraintCSParserRuleCall_8_1_1_0() { return cOwnedPostconditionsConstraintCSParserRuleCall_8_1_1_0; }
		
		//'body' UnrestrictedName? ':' ownedBodies+=SpecificationCS
		public Group getGroup_8_2() { return cGroup_8_2; }
		
		//'body'
		public Keyword getBodyKeyword_8_2_0() { return cBodyKeyword_8_2_0; }
		
		//UnrestrictedName?
		public RuleCall getUnrestrictedNameParserRuleCall_8_2_1() { return cUnrestrictedNameParserRuleCall_8_2_1; }
		
		//':'
		public Keyword getColonKeyword_8_2_2() { return cColonKeyword_8_2_2; }
		
		//ownedBodies+=SpecificationCS
		public Assignment getOwnedBodiesAssignment_8_2_3() { return cOwnedBodiesAssignment_8_2_3; }
		
		//SpecificationCS
		public RuleCall getOwnedBodiesSpecificationCSParserRuleCall_8_2_3_0() { return cOwnedBodiesSpecificationCSParserRuleCall_8_2_3_0; }
	}
	public class PackageDeclarationCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.PackageDeclarationCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOwnedPathNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedPathNamePathNameCSParserRuleCall_1_0 = (RuleCall)cOwnedPathNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cInvKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOwnedInvariantsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOwnedInvariantsConstraintCSParserRuleCall_2_1_0 = (RuleCall)cOwnedInvariantsAssignment_2_1.eContents().get(0);
		private final Assignment cOwnedContextsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedContextsContextDeclCSParserRuleCall_3_0 = (RuleCall)cOwnedContextsAssignment_3.eContents().get(0);
		private final Keyword cEndpackageKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PackageDeclarationCS:
		//	'package' ownedPathName=pathNameCS ('inv' ownedInvariants+=ConstraintCS)* ownedContexts+=ContextDeclCS* 'endpackage';
		@Override public ParserRule getRule() { return rule; }
		
		//'package' ownedPathName=pathNameCS ('inv' ownedInvariants+=ConstraintCS)* ownedContexts+=ContextDeclCS* 'endpackage'
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//ownedPathName=pathNameCS
		public Assignment getOwnedPathNameAssignment_1() { return cOwnedPathNameAssignment_1; }
		
		//pathNameCS
		public RuleCall getOwnedPathNamePathNameCSParserRuleCall_1_0() { return cOwnedPathNamePathNameCSParserRuleCall_1_0; }
		
		//('inv' ownedInvariants+=ConstraintCS)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'inv'
		public Keyword getInvKeyword_2_0() { return cInvKeyword_2_0; }
		
		//ownedInvariants+=ConstraintCS
		public Assignment getOwnedInvariantsAssignment_2_1() { return cOwnedInvariantsAssignment_2_1; }
		
		//ConstraintCS
		public RuleCall getOwnedInvariantsConstraintCSParserRuleCall_2_1_0() { return cOwnedInvariantsConstraintCSParserRuleCall_2_1_0; }
		
		//ownedContexts+=ContextDeclCS*
		public Assignment getOwnedContextsAssignment_3() { return cOwnedContextsAssignment_3; }
		
		//ContextDeclCS
		public RuleCall getOwnedContextsContextDeclCSParserRuleCall_3_0() { return cOwnedContextsContextDeclCSParserRuleCall_3_0; }
		
		//'endpackage'
		public Keyword getEndpackageKeyword_4() { return cEndpackageKeyword_4; }
	}
	public class ParameterCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.ParameterCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameUnrestrictedNameParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cOwnedTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedTypeTypeExpCSParserRuleCall_1_0 = (RuleCall)cOwnedTypeAssignment_1.eContents().get(0);
		
		//ParameterCS:
		//	(name=UnrestrictedName ':')? ownedType=TypeExpCS;
		@Override public ParserRule getRule() { return rule; }
		
		//(name=UnrestrictedName ':')? ownedType=TypeExpCS
		public Group getGroup() { return cGroup; }
		
		//(name=UnrestrictedName ':')?
		public Group getGroup_0() { return cGroup_0; }
		
		//name=UnrestrictedName
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//UnrestrictedName
		public RuleCall getNameUnrestrictedNameParserRuleCall_0_0_0() { return cNameUnrestrictedNameParserRuleCall_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//ownedType=TypeExpCS
		public Assignment getOwnedTypeAssignment_1() { return cOwnedTypeAssignment_1; }
		
		//TypeExpCS
		public RuleCall getOwnedTypeTypeExpCSParserRuleCall_1_0() { return cOwnedTypeTypeExpCSParserRuleCall_1_0; }
	}
	public class PropertyContextDeclCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.PropertyContextDeclCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOwnedPathNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedPathNamePathNameCSParserRuleCall_1_0 = (RuleCall)cOwnedPathNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOwnedTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedTypeTypeExpCSParserRuleCall_3_0 = (RuleCall)cOwnedTypeAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cDeriveKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cOwnedDerivedInvariantsAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cOwnedDerivedInvariantsConstraintCSParserRuleCall_4_0_1_0 = (RuleCall)cOwnedDerivedInvariantsAssignment_4_0_1.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cInitKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Keyword cColonKeyword_4_1_1 = (Keyword)cGroup_4_1.eContents().get(1);
		private final Assignment cOwnedDefaultExpressionsAssignment_4_1_2 = (Assignment)cGroup_4_1.eContents().get(2);
		private final RuleCall cOwnedDefaultExpressionsSpecificationCSParserRuleCall_4_1_2_0 = (RuleCall)cOwnedDefaultExpressionsAssignment_4_1_2.eContents().get(0);
		
		///*
		// * A property context declaration complements an existing property with additional details.
		// * 
		// * oclText[context (T) Stack::isEmpty : Boolean]
		// * oclText[derive IsEmpty: size() = 0]
		// * 
		// * The property declaration comprises at least a property name and type.
		// * The type must be qualified with at least a class name.
		// * If used outside a package declaration, package name qualification is also needed. 
		// * The declaration may be followed by a derive constraint and/or an init expression.
		// * 
		// * A derive constraint provides an alternate mechanism for defining a class invariant;
		// * the only difference is that the property is identified as a constrainedElement. As an
		// * invariant the constraint provides an OCL expression that should always be true.
		// * 
		// * For a non-derived property, an init expression defines the value to be assigned to the property
		// * when its containing object is first created. 
		// * 
		// * For a derived property, an init expression defines the evaluation of the property, which
		// * may vary from access to access even for read-only properties. 
		// */ PropertyContextDeclCS:
		//	'context' ownedPathName=pathNameCS ':' ownedType=TypeExpCS ('derive' ownedDerivedInvariants+=ConstraintCS | 'init'
		//	':' ownedDefaultExpressions+=SpecificationCS)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'context' ownedPathName=pathNameCS ':' ownedType=TypeExpCS ('derive' ownedDerivedInvariants+=ConstraintCS | 'init' ':'
		//ownedDefaultExpressions+=SpecificationCS)*
		public Group getGroup() { return cGroup; }
		
		//'context'
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }
		
		//ownedPathName=pathNameCS
		public Assignment getOwnedPathNameAssignment_1() { return cOwnedPathNameAssignment_1; }
		
		//pathNameCS
		public RuleCall getOwnedPathNamePathNameCSParserRuleCall_1_0() { return cOwnedPathNamePathNameCSParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//ownedType=TypeExpCS
		public Assignment getOwnedTypeAssignment_3() { return cOwnedTypeAssignment_3; }
		
		//TypeExpCS
		public RuleCall getOwnedTypeTypeExpCSParserRuleCall_3_0() { return cOwnedTypeTypeExpCSParserRuleCall_3_0; }
		
		//('derive' ownedDerivedInvariants+=ConstraintCS | 'init' ':' ownedDefaultExpressions+=SpecificationCS)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//'derive' ownedDerivedInvariants+=ConstraintCS
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//'derive'
		public Keyword getDeriveKeyword_4_0_0() { return cDeriveKeyword_4_0_0; }
		
		//ownedDerivedInvariants+=ConstraintCS
		public Assignment getOwnedDerivedInvariantsAssignment_4_0_1() { return cOwnedDerivedInvariantsAssignment_4_0_1; }
		
		//ConstraintCS
		public RuleCall getOwnedDerivedInvariantsConstraintCSParserRuleCall_4_0_1_0() { return cOwnedDerivedInvariantsConstraintCSParserRuleCall_4_0_1_0; }
		
		//'init' ':' ownedDefaultExpressions+=SpecificationCS
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//'init'
		public Keyword getInitKeyword_4_1_0() { return cInitKeyword_4_1_0; }
		
		//':'
		public Keyword getColonKeyword_4_1_1() { return cColonKeyword_4_1_1; }
		
		//ownedDefaultExpressions+=SpecificationCS
		public Assignment getOwnedDefaultExpressionsAssignment_4_1_2() { return cOwnedDefaultExpressionsAssignment_4_1_2; }
		
		//SpecificationCS
		public RuleCall getOwnedDefaultExpressionsSpecificationCSParserRuleCall_4_1_2_0() { return cOwnedDefaultExpressionsSpecificationCSParserRuleCall_4_1_2_0; }
	}
	public class SpecificationCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.SpecificationCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOwnedExpressionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cOwnedExpressionExpCSParserRuleCall_0_0 = (RuleCall)cOwnedExpressionAssignment_0.eContents().get(0);
		private final Assignment cExprStringAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExprStringUNQUOTED_STRINGTerminalRuleCall_1_0 = (RuleCall)cExprStringAssignment_1.eContents().get(0);
		
		//SpecificationCS:
		//	ownedExpression=ExpCS | exprString=UNQUOTED_STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedExpression=ExpCS | exprString=UNQUOTED_STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ownedExpression=ExpCS
		public Assignment getOwnedExpressionAssignment_0() { return cOwnedExpressionAssignment_0; }
		
		//ExpCS
		public RuleCall getOwnedExpressionExpCSParserRuleCall_0_0() { return cOwnedExpressionExpCSParserRuleCall_0_0; }
		
		//exprString=UNQUOTED_STRING
		public Assignment getExprStringAssignment_1() { return cExprStringAssignment_1; }
		
		//UNQUOTED_STRING
		public RuleCall getExprStringUNQUOTED_STRINGTerminalRuleCall_1_0() { return cExprStringUNQUOTED_STRINGTerminalRuleCall_1_0; }
	}
	public class PathNameCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.pathNameCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSimpleNameCSParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cUnrestrictedName2ParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//pathNameCS:
		//	name=simpleNameCS "::" UnrestrictedName2;
		@Override public ParserRule getRule() { return rule; }
		
		//name=simpleNameCS "::" UnrestrictedName2
		public Group getGroup() { return cGroup; }
		
		//name=simpleNameCS
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//simpleNameCS
		public RuleCall getNameSimpleNameCSParserRuleCall_0_0() { return cNameSimpleNameCSParserRuleCall_0_0; }
		
		//"::"
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }
		
		//UnrestrictedName2
		public RuleCall getUnrestrictedName2ParserRuleCall_2() { return cUnrestrictedName2ParserRuleCall_2; }
	}
	public class SimpleNameCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.simpleNameCS");
		private final RuleCall cSIMPLE_IDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//simpleNameCS:
		//	SIMPLE_ID;
		@Override public ParserRule getRule() { return rule; }
		
		//SIMPLE_ID
		public RuleCall getSIMPLE_IDTerminalRuleCall() { return cSIMPLE_IDTerminalRuleCall; }
	}
	public class TemplateSignatureCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.TemplateSignatureCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cOwnedParametersAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOwnedParametersTypeParameterCSParserRuleCall_0_1_0 = (RuleCall)cOwnedParametersAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cOwnedParametersAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cOwnedParametersTypeParameterCSParserRuleCall_0_2_1_0 = (RuleCall)cOwnedParametersAssignment_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedParametersTypeParameterCSParserRuleCall_1_1_0 = (RuleCall)cOwnedParametersAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cOwnedParametersAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cOwnedParametersTypeParameterCSParserRuleCall_1_2_1_0 = (RuleCall)cOwnedParametersAssignment_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		////---------------------------------------------------------------------------------
		////	Base overrides
		////---------------------------------------------------------------------------------
		//TemplateSignatureCS:
		//	'(' ownedParameters+=TypeParameterCS (',' ownedParameters+=TypeParameterCS)* ')' | '<'
		//	ownedParameters+=TypeParameterCS (',' ownedParameters+=TypeParameterCS)* '>';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' ownedParameters+=TypeParameterCS (',' ownedParameters+=TypeParameterCS)* ')' | '<' ownedParameters+=TypeParameterCS
		//(',' ownedParameters+=TypeParameterCS)* '>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' ownedParameters+=TypeParameterCS (',' ownedParameters+=TypeParameterCS)* ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//ownedParameters+=TypeParameterCS
		public Assignment getOwnedParametersAssignment_0_1() { return cOwnedParametersAssignment_0_1; }
		
		//TypeParameterCS
		public RuleCall getOwnedParametersTypeParameterCSParserRuleCall_0_1_0() { return cOwnedParametersTypeParameterCSParserRuleCall_0_1_0; }
		
		//(',' ownedParameters+=TypeParameterCS)*
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//','
		public Keyword getCommaKeyword_0_2_0() { return cCommaKeyword_0_2_0; }
		
		//ownedParameters+=TypeParameterCS
		public Assignment getOwnedParametersAssignment_0_2_1() { return cOwnedParametersAssignment_0_2_1; }
		
		//TypeParameterCS
		public RuleCall getOwnedParametersTypeParameterCSParserRuleCall_0_2_1_0() { return cOwnedParametersTypeParameterCSParserRuleCall_0_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//'<' ownedParameters+=TypeParameterCS (',' ownedParameters+=TypeParameterCS)* '>'
		public Group getGroup_1() { return cGroup_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }
		
		//ownedParameters+=TypeParameterCS
		public Assignment getOwnedParametersAssignment_1_1() { return cOwnedParametersAssignment_1_1; }
		
		//TypeParameterCS
		public RuleCall getOwnedParametersTypeParameterCSParserRuleCall_1_1_0() { return cOwnedParametersTypeParameterCSParserRuleCall_1_1_0; }
		
		//(',' ownedParameters+=TypeParameterCS)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//ownedParameters+=TypeParameterCS
		public Assignment getOwnedParametersAssignment_1_2_1() { return cOwnedParametersAssignment_1_2_1; }
		
		//TypeParameterCS
		public RuleCall getOwnedParametersTypeParameterCSParserRuleCall_1_2_1_0() { return cOwnedParametersTypeParameterCSParserRuleCall_1_2_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }
	}
	public class TypeParameterCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.TypeParameterCS");
		private final RuleCall cPrimitiveTypeCSParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//TypeParameterCS:
		//	PrimitiveTypeCS;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimitiveTypeCS
		public RuleCall getPrimitiveTypeCSParserRuleCall() { return cPrimitiveTypeCSParserRuleCall; }
	}
	public class TypedRefCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.TypedRefCS");
		private final RuleCall cTypeLiteralCSParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//TypedRefCS:
		//	TypeLiteralCS //| TypedTypeRefCS
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//TypeLiteralCS
		public RuleCall getTypeLiteralCSParserRuleCall() { return cTypeLiteralCSParserRuleCall; }
	}
	public class UnrestrictedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.UnrestrictedName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEssentialOCLUnrestrictedNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cImportKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cIncludeKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLibraryKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//UnrestrictedName:
		//	EssentialOCLUnrestrictedName
		//	//| 'body'
		//	//| 'context'
		//	//| 'def'
		//	//| 'derive'
		//	//|	'endpackage'
		//	| 'import'
		//	| 'include'
		//	//| 'init'
		//	//| 'inv'
		//	| 'library'
		//	//|	'package'
		//	//|	'post'
		//	//|	'pre'
		//	//|	'static'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//EssentialOCLUnrestrictedName //| 'body'
		////| 'context'
		////| 'def'
		////| 'derive'
		////|	'endpackage'
		//| 'import' | 'include' //| 'init'
		////| 'inv'
		//| 'library'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EssentialOCLUnrestrictedName
		public RuleCall getEssentialOCLUnrestrictedNameParserRuleCall_0() { return cEssentialOCLUnrestrictedNameParserRuleCall_0; }
		
		//'import'
		public Keyword getImportKeyword_1() { return cImportKeyword_1; }
		
		//'include'
		public Keyword getIncludeKeyword_2() { return cIncludeKeyword_2; }
		
		//'library'
		public Keyword getLibraryKeyword_3() { return cLibraryKeyword_3; }
	}
	public class NavigatingArgExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.NavigatingArgExpCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOCLMessageArgCSAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cExpCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////---------------------------------------------------------------------------------
		////	EssentialOCL overrides
		////---------------------------------------------------------------------------------
		//NavigatingArgExpCS:
		//	{OCLMessageArgCS} '?' | ExpCS;
		@Override public ParserRule getRule() { return rule; }
		
		//{OCLMessageArgCS} '?' | ExpCS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{OCLMessageArgCS} '?'
		public Group getGroup_0() { return cGroup_0; }
		
		//{OCLMessageArgCS}
		public Action getOCLMessageArgCSAction_0_0() { return cOCLMessageArgCSAction_0_0; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_0_1() { return cQuestionMarkKeyword_0_1; }
		
		//ExpCS
		public RuleCall getExpCSParserRuleCall_1() { return cExpCSParserRuleCall_1; }
	}
	public class NavigationOperatorNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.NavigationOperatorName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEssentialOCLNavigationOperatorNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompleteOCLNavigationOperatorNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NavigationOperatorName:
		//	EssentialOCLNavigationOperatorName | CompleteOCLNavigationOperatorName;
		@Override public ParserRule getRule() { return rule; }
		
		//EssentialOCLNavigationOperatorName | CompleteOCLNavigationOperatorName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EssentialOCLNavigationOperatorName
		public RuleCall getEssentialOCLNavigationOperatorNameParserRuleCall_0() { return cEssentialOCLNavigationOperatorNameParserRuleCall_0; }
		
		//CompleteOCLNavigationOperatorName
		public RuleCall getCompleteOCLNavigationOperatorNameParserRuleCall_1() { return cCompleteOCLNavigationOperatorNameParserRuleCall_1; }
	}
	public class EssentialOCLNavigationOperatorNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.EssentialOCLNavigationOperatorName");
		private final RuleCall cEssentialOCLNavigationOperatorParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EssentialOCLNavigationOperatorName:
		//	EssentialOCLNavigationOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//EssentialOCLNavigationOperator
		public RuleCall getEssentialOCLNavigationOperatorParserRuleCall() { return cEssentialOCLNavigationOperatorParserRuleCall; }
	}
	public class EssentialOCLRersevedKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.EssentialOCLRersevedKeyword");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cElseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEndifKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cIfKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cImpliesKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cInKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cLetKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cNotKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cOrKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cThenKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cXorKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		
		//EssentialOCLRersevedKeyword:
		//	'and' | 'else' | 'endif' | 'if' | 'implies' | 'in' | 'let'
		//	| 'not' | 'or' | 'then' | 'xor';
		@Override public ParserRule getRule() { return rule; }
		
		//'and' | 'else' | 'endif' | 'if' | 'implies' | 'in' | 'let' | 'not' | 'or' | 'then' | 'xor'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'and'
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }
		
		//'else'
		public Keyword getElseKeyword_1() { return cElseKeyword_1; }
		
		//'endif'
		public Keyword getEndifKeyword_2() { return cEndifKeyword_2; }
		
		//'if'
		public Keyword getIfKeyword_3() { return cIfKeyword_3; }
		
		//'implies'
		public Keyword getImpliesKeyword_4() { return cImpliesKeyword_4; }
		
		//'in'
		public Keyword getInKeyword_5() { return cInKeyword_5; }
		
		//'let'
		public Keyword getLetKeyword_6() { return cLetKeyword_6; }
		
		//'not'
		public Keyword getNotKeyword_7() { return cNotKeyword_7; }
		
		//'or'
		public Keyword getOrKeyword_8() { return cOrKeyword_8; }
		
		//'then'
		public Keyword getThenKeyword_9() { return cThenKeyword_9; }
		
		//'xor'
		public Keyword getXorKeyword_10() { return cXorKeyword_10; }
	}
	public class EssentialOCLPrefixOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.EssentialOCLPrefixOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cNotKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EssentialOCLPrefixOperator:
		//	'-' | 'not';
		@Override public ParserRule getRule() { return rule; }
		
		//'-' | 'not'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//'not'
		public Keyword getNotKeyword_1() { return cNotKeyword_1; }
	}
	public class EssentialOCLInfixOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.EssentialOCLInfixOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPlusSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLessThanSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cGreaterThanSignEqualsSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cLessThanSignEqualsSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cEqualsSignKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cLessThanSignGreaterThanSignKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cAndKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cOrKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cXorKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cImpliesKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		
		//EssentialOCLInfixOperator:
		//	'*' | '/' | '+' | '-' | '>' | '<' | '>=' | '<=' | '=' | '<>' | 'and'
		//	| 'or' | 'xor' | 'implies';
		@Override public ParserRule getRule() { return rule; }
		
		//'*' | '/' | '+' | '-' | '>' | '<' | '>=' | '<=' | '=' | '<>' | 'and' | 'or' | 'xor' | 'implies'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_2() { return cPlusSignKeyword_2; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_3() { return cHyphenMinusKeyword_3; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
		
		//'<'
		public Keyword getLessThanSignKeyword_5() { return cLessThanSignKeyword_5; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_6() { return cGreaterThanSignEqualsSignKeyword_6; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_7() { return cLessThanSignEqualsSignKeyword_7; }
		
		//'='
		public Keyword getEqualsSignKeyword_8() { return cEqualsSignKeyword_8; }
		
		//'<>'
		public Keyword getLessThanSignGreaterThanSignKeyword_9() { return cLessThanSignGreaterThanSignKeyword_9; }
		
		//'and'
		public Keyword getAndKeyword_10() { return cAndKeyword_10; }
		
		//'or'
		public Keyword getOrKeyword_11() { return cOrKeyword_11; }
		
		//'xor'
		public Keyword getXorKeyword_12() { return cXorKeyword_12; }
		
		//'implies'
		public Keyword getImpliesKeyword_13() { return cImpliesKeyword_13; }
	}
	public class EssentialOCLNavigationOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.EssentialOCLNavigationOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EssentialOCLNavigationOperator:
		//	'.' | '->';
		@Override public ParserRule getRule() { return rule; }
		
		//'.' | '->'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'.'
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
	}
	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.StringLiteral");
		private final RuleCall cSINGLE_QUOTED_STRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//StringLiteral:
		//	SINGLE_QUOTED_STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//SINGLE_QUOTED_STRING
		public RuleCall getSINGLE_QUOTED_STRINGTerminalRuleCall() { return cSINGLE_QUOTED_STRINGTerminalRuleCall; }
	}
	public class PrefixOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.PrefixOperator");
		private final RuleCall cEssentialOCLPrefixOperatorParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PrefixOperator:
		//	EssentialOCLPrefixOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//EssentialOCLPrefixOperator
		public RuleCall getEssentialOCLPrefixOperatorParserRuleCall() { return cEssentialOCLPrefixOperatorParserRuleCall; }
	}
	public class InfixOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.InfixOperator");
		private final RuleCall cEssentialOCLInfixOperatorParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//InfixOperator:
		//	EssentialOCLInfixOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//EssentialOCLInfixOperator
		public RuleCall getEssentialOCLInfixOperatorParserRuleCall() { return cEssentialOCLInfixOperatorParserRuleCall; }
	}
	public class NavigationOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.NavigationOperator");
		private final RuleCall cEssentialOCLNavigationOperatorParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//NavigationOperator:
		//	EssentialOCLNavigationOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//EssentialOCLNavigationOperator
		public RuleCall getEssentialOCLNavigationOperatorParserRuleCall() { return cEssentialOCLNavigationOperatorParserRuleCall; }
	}
	public class EssentialOCLUnrestrictedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.EssentialOCLUnrestrictedName");
		private final RuleCall cSIMPLE_IDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EssentialOCLUnrestrictedName:
		//	SIMPLE_ID;
		@Override public ParserRule getRule() { return rule; }
		
		//SIMPLE_ID
		public RuleCall getSIMPLE_IDTerminalRuleCall() { return cSIMPLE_IDTerminalRuleCall; }
	}
	public class UnrestrictedName2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.UnrestrictedName2");
		private final RuleCall cEssentialOCLUnrestrictedNameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//UnrestrictedName2:
		//	EssentialOCLUnrestrictedName;
		@Override public ParserRule getRule() { return rule; }
		
		//EssentialOCLUnrestrictedName
		public RuleCall getEssentialOCLUnrestrictedNameParserRuleCall() { return cEssentialOCLUnrestrictedNameParserRuleCall; }
	}
	public class EssentialOCLUnreservedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.EssentialOCLUnreservedName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnrestrictedNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCollectionTypeIdentifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPrimitiveTypeIdentifierParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Keyword cTupleKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//EssentialOCLUnreservedName:
		//	UnrestrictedName | CollectionTypeIdentifier | PrimitiveTypeIdentifier | 'Tuple';
		@Override public ParserRule getRule() { return rule; }
		
		//UnrestrictedName | CollectionTypeIdentifier | PrimitiveTypeIdentifier | 'Tuple'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UnrestrictedName
		public RuleCall getUnrestrictedNameParserRuleCall_0() { return cUnrestrictedNameParserRuleCall_0; }
		
		//CollectionTypeIdentifier
		public RuleCall getCollectionTypeIdentifierParserRuleCall_1() { return cCollectionTypeIdentifierParserRuleCall_1; }
		
		//PrimitiveTypeIdentifier
		public RuleCall getPrimitiveTypeIdentifierParserRuleCall_2() { return cPrimitiveTypeIdentifierParserRuleCall_2; }
		
		//'Tuple'
		public Keyword getTupleKeyword_3() { return cTupleKeyword_3; }
	}
	public class UnreservedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.UnreservedName");
		private final RuleCall cEssentialOCLUnreservedNameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//UnreservedName:
		//	EssentialOCLUnreservedName;
		@Override public ParserRule getRule() { return rule; }
		
		//EssentialOCLUnreservedName
		public RuleCall getEssentialOCLUnreservedNameParserRuleCall() { return cEssentialOCLUnreservedNameParserRuleCall; }
	}
	public class PrimitiveTypeIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.PrimitiveTypeIdentifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBooleanKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIntegerKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cRealKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cStringKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cUnlimitedNaturalKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cOclAnyKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cOclInvalidKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cOclVoidKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//PrimitiveTypeIdentifier:
		//	'Boolean' | 'Integer' | 'Real' | 'String' | 'UnlimitedNatural' | 'OclAny'
		//	| 'OclInvalid' | 'OclVoid';
		@Override public ParserRule getRule() { return rule; }
		
		//'Boolean' | 'Integer' | 'Real' | 'String' | 'UnlimitedNatural' | 'OclAny' | 'OclInvalid' | 'OclVoid'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Boolean'
		public Keyword getBooleanKeyword_0() { return cBooleanKeyword_0; }
		
		//'Integer'
		public Keyword getIntegerKeyword_1() { return cIntegerKeyword_1; }
		
		//'Real'
		public Keyword getRealKeyword_2() { return cRealKeyword_2; }
		
		//'String'
		public Keyword getStringKeyword_3() { return cStringKeyword_3; }
		
		//'UnlimitedNatural'
		public Keyword getUnlimitedNaturalKeyword_4() { return cUnlimitedNaturalKeyword_4; }
		
		//'OclAny'
		public Keyword getOclAnyKeyword_5() { return cOclAnyKeyword_5; }
		
		//'OclInvalid'
		public Keyword getOclInvalidKeyword_6() { return cOclInvalidKeyword_6; }
		
		//'OclVoid'
		public Keyword getOclVoidKeyword_7() { return cOclVoidKeyword_7; }
	}
	public class PrimitiveTypeCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.PrimitiveTypeCS");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNamePrimitiveTypeIdentifierParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//PrimitiveTypeCS:
		//	name=PrimitiveTypeIdentifier;
		@Override public ParserRule getRule() { return rule; }
		
		//name=PrimitiveTypeIdentifier
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//PrimitiveTypeIdentifier
		public RuleCall getNamePrimitiveTypeIdentifierParserRuleCall_0() { return cNamePrimitiveTypeIdentifierParserRuleCall_0; }
	}
	public class CollectionTypeIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.CollectionTypeIdentifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cBagKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSequenceKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cCollectionKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cOrderedSetKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//CollectionTypeIdentifier:
		//	'Set' | 'Bag' | 'Sequence' | 'Collection' | 'OrderedSet';
		@Override public ParserRule getRule() { return rule; }
		
		//'Set' | 'Bag' | 'Sequence' | 'Collection' | 'OrderedSet'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Set'
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }
		
		//'Bag'
		public Keyword getBagKeyword_1() { return cBagKeyword_1; }
		
		//'Sequence'
		public Keyword getSequenceKeyword_2() { return cSequenceKeyword_2; }
		
		//'Collection'
		public Keyword getCollectionKeyword_3() { return cCollectionKeyword_3; }
		
		//'OrderedSet'
		public Keyword getOrderedSetKeyword_4() { return cOrderedSetKeyword_4; }
	}
	public class CollectionTypeCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.CollectionTypeCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameCollectionTypeIdentifierParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cOwnedTypeAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cOwnedTypeTypeExpCSParserRuleCall_1_0_1_0 = (RuleCall)cOwnedTypeAssignment_1_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cOwnedTypeAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOwnedTypeTypeExpCSParserRuleCall_1_1_1_0 = (RuleCall)cOwnedTypeAssignment_1_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//CollectionTypeCS:
		//	name=CollectionTypeIdentifier ('(' ownedType=TypeExpCS ')' | '<' ownedType=TypeExpCS '>')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=CollectionTypeIdentifier ('(' ownedType=TypeExpCS ')' | '<' ownedType=TypeExpCS '>')?
		public Group getGroup() { return cGroup; }
		
		//name=CollectionTypeIdentifier
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//CollectionTypeIdentifier
		public RuleCall getNameCollectionTypeIdentifierParserRuleCall_0_0() { return cNameCollectionTypeIdentifierParserRuleCall_0_0; }
		
		//('(' ownedType=TypeExpCS ')' | '<' ownedType=TypeExpCS '>')?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'(' ownedType=TypeExpCS ')'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0_0() { return cLeftParenthesisKeyword_1_0_0; }
		
		//ownedType=TypeExpCS
		public Assignment getOwnedTypeAssignment_1_0_1() { return cOwnedTypeAssignment_1_0_1; }
		
		//TypeExpCS
		public RuleCall getOwnedTypeTypeExpCSParserRuleCall_1_0_1_0() { return cOwnedTypeTypeExpCSParserRuleCall_1_0_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_0_2() { return cRightParenthesisKeyword_1_0_2; }
		
		//'<' ownedType=TypeExpCS '>'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_1_0() { return cLessThanSignKeyword_1_1_0; }
		
		//ownedType=TypeExpCS
		public Assignment getOwnedTypeAssignment_1_1_1() { return cOwnedTypeAssignment_1_1_1; }
		
		//TypeExpCS
		public RuleCall getOwnedTypeTypeExpCSParserRuleCall_1_1_1_0() { return cOwnedTypeTypeExpCSParserRuleCall_1_1_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_1_2() { return cGreaterThanSignKeyword_1_1_2; }
	}
	public class TupleTypeCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.TupleTypeCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameTupleKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Assignment cOwnedPartsAssignment_1_0_1_0 = (Assignment)cGroup_1_0_1.eContents().get(0);
		private final RuleCall cOwnedPartsTuplePartCSParserRuleCall_1_0_1_0_0 = (RuleCall)cOwnedPartsAssignment_1_0_1_0.eContents().get(0);
		private final Group cGroup_1_0_1_1 = (Group)cGroup_1_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_1_1_0 = (Keyword)cGroup_1_0_1_1.eContents().get(0);
		private final Assignment cOwnedPartsAssignment_1_0_1_1_1 = (Assignment)cGroup_1_0_1_1.eContents().get(1);
		private final RuleCall cOwnedPartsTuplePartCSParserRuleCall_1_0_1_1_1_0 = (RuleCall)cOwnedPartsAssignment_1_0_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Assignment cOwnedPartsAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cOwnedPartsTuplePartCSParserRuleCall_1_1_1_0_0 = (RuleCall)cOwnedPartsAssignment_1_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1_1 = (Group)cGroup_1_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_1_0 = (Keyword)cGroup_1_1_1_1.eContents().get(0);
		private final Assignment cOwnedPartsAssignment_1_1_1_1_1 = (Assignment)cGroup_1_1_1_1.eContents().get(1);
		private final RuleCall cOwnedPartsTuplePartCSParserRuleCall_1_1_1_1_1_0 = (RuleCall)cOwnedPartsAssignment_1_1_1_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cBacktrackAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cBacktrackTrueKeyword_2_0 = (Keyword)cBacktrackAssignment_2.eContents().get(0);
		
		//TupleTypeCS:
		//	name='Tuple' ('(' (ownedParts+=tuplePartCS (',' ownedParts+=tuplePartCS)*)? ')' | '<' (ownedParts+=tuplePartCS (','
		//	ownedParts+=tuplePartCS)*)? '>')?
		//	backtrack="true";
		@Override public ParserRule getRule() { return rule; }
		
		//name='Tuple' ('(' (ownedParts+=tuplePartCS (',' ownedParts+=tuplePartCS)*)? ')' | '<' (ownedParts+=tuplePartCS (','
		//ownedParts+=tuplePartCS)*)? '>')? backtrack="true"
		public Group getGroup() { return cGroup; }
		
		//name='Tuple'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'Tuple'
		public Keyword getNameTupleKeyword_0_0() { return cNameTupleKeyword_0_0; }
		
		//('(' (ownedParts+=tuplePartCS (',' ownedParts+=tuplePartCS)*)? ')' | '<' (ownedParts+=tuplePartCS (','
		//ownedParts+=tuplePartCS)*)? '>')?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'(' (ownedParts+=tuplePartCS (',' ownedParts+=tuplePartCS)*)? ')'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0_0() { return cLeftParenthesisKeyword_1_0_0; }
		
		//(ownedParts+=tuplePartCS (',' ownedParts+=tuplePartCS)*)?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//ownedParts+=tuplePartCS
		public Assignment getOwnedPartsAssignment_1_0_1_0() { return cOwnedPartsAssignment_1_0_1_0; }
		
		//tuplePartCS
		public RuleCall getOwnedPartsTuplePartCSParserRuleCall_1_0_1_0_0() { return cOwnedPartsTuplePartCSParserRuleCall_1_0_1_0_0; }
		
		//(',' ownedParts+=tuplePartCS)*
		public Group getGroup_1_0_1_1() { return cGroup_1_0_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_0_1_1_0() { return cCommaKeyword_1_0_1_1_0; }
		
		//ownedParts+=tuplePartCS
		public Assignment getOwnedPartsAssignment_1_0_1_1_1() { return cOwnedPartsAssignment_1_0_1_1_1; }
		
		//tuplePartCS
		public RuleCall getOwnedPartsTuplePartCSParserRuleCall_1_0_1_1_1_0() { return cOwnedPartsTuplePartCSParserRuleCall_1_0_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_0_2() { return cRightParenthesisKeyword_1_0_2; }
		
		//'<' (ownedParts+=tuplePartCS (',' ownedParts+=tuplePartCS)*)? '>'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_1_0() { return cLessThanSignKeyword_1_1_0; }
		
		//(ownedParts+=tuplePartCS (',' ownedParts+=tuplePartCS)*)?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//ownedParts+=tuplePartCS
		public Assignment getOwnedPartsAssignment_1_1_1_0() { return cOwnedPartsAssignment_1_1_1_0; }
		
		//tuplePartCS
		public RuleCall getOwnedPartsTuplePartCSParserRuleCall_1_1_1_0_0() { return cOwnedPartsTuplePartCSParserRuleCall_1_1_1_0_0; }
		
		//(',' ownedParts+=tuplePartCS)*
		public Group getGroup_1_1_1_1() { return cGroup_1_1_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_1_1_0() { return cCommaKeyword_1_1_1_1_0; }
		
		//ownedParts+=tuplePartCS
		public Assignment getOwnedPartsAssignment_1_1_1_1_1() { return cOwnedPartsAssignment_1_1_1_1_1; }
		
		//tuplePartCS
		public RuleCall getOwnedPartsTuplePartCSParserRuleCall_1_1_1_1_1_0() { return cOwnedPartsTuplePartCSParserRuleCall_1_1_1_1_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_1_2() { return cGreaterThanSignKeyword_1_1_2; }
		
		//backtrack="true"
		public Assignment getBacktrackAssignment_2() { return cBacktrackAssignment_2; }
		
		//"true"
		public Keyword getBacktrackTrueKeyword_2_0() { return cBacktrackTrueKeyword_2_0; }
	}
	public class TuplePartCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.tuplePartCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameUnrestrictedNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedTypeTypeExpCSParserRuleCall_2_0 = (RuleCall)cOwnedTypeAssignment_2.eContents().get(0);
		
		//tuplePartCS:
		//	name=UnrestrictedName ':' ownedType=TypeExpCS;
		@Override public ParserRule getRule() { return rule; }
		
		//name=UnrestrictedName ':' ownedType=TypeExpCS
		public Group getGroup() { return cGroup; }
		
		//name=UnrestrictedName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//UnrestrictedName
		public RuleCall getNameUnrestrictedNameParserRuleCall_0_0() { return cNameUnrestrictedNameParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//ownedType=TypeExpCS
		public Assignment getOwnedTypeAssignment_2() { return cOwnedTypeAssignment_2; }
		
		//TypeExpCS
		public RuleCall getOwnedTypeTypeExpCSParserRuleCall_2_0() { return cOwnedTypeTypeExpCSParserRuleCall_2_0; }
	}
	public class CollectionLiteralExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.CollectionLiteralExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedTypeCollectionTypeCSParserRuleCall_0_0 = (RuleCall)cOwnedTypeAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cOwnedPartsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cOwnedPartsCollectionLiteralPartCSParserRuleCall_2_0_0 = (RuleCall)cOwnedPartsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cOwnedPartsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cOwnedPartsCollectionLiteralPartCSParserRuleCall_2_1_1_0 = (RuleCall)cOwnedPartsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CollectionLiteralExpCS:
		//	ownedType=CollectionTypeCS
		//	'{' (ownedParts+=CollectionLiteralPartCS (',' ownedParts+=CollectionLiteralPartCS)*)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//ownedType=CollectionTypeCS '{' (ownedParts+=CollectionLiteralPartCS (',' ownedParts+=CollectionLiteralPartCS)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//ownedType=CollectionTypeCS
		public Assignment getOwnedTypeAssignment_0() { return cOwnedTypeAssignment_0; }
		
		//CollectionTypeCS
		public RuleCall getOwnedTypeCollectionTypeCSParserRuleCall_0_0() { return cOwnedTypeCollectionTypeCSParserRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(ownedParts+=CollectionLiteralPartCS (',' ownedParts+=CollectionLiteralPartCS)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//ownedParts+=CollectionLiteralPartCS
		public Assignment getOwnedPartsAssignment_2_0() { return cOwnedPartsAssignment_2_0; }
		
		//CollectionLiteralPartCS
		public RuleCall getOwnedPartsCollectionLiteralPartCSParserRuleCall_2_0_0() { return cOwnedPartsCollectionLiteralPartCSParserRuleCall_2_0_0; }
		
		//(',' ownedParts+=CollectionLiteralPartCS)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//ownedParts+=CollectionLiteralPartCS
		public Assignment getOwnedPartsAssignment_2_1_1() { return cOwnedPartsAssignment_2_1_1; }
		
		//CollectionLiteralPartCS
		public RuleCall getOwnedPartsCollectionLiteralPartCSParserRuleCall_2_1_1_0() { return cOwnedPartsCollectionLiteralPartCSParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class CollectionLiteralPartCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.CollectionLiteralPartCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionCSAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionCSExpCSParserRuleCall_0_0 = (RuleCall)cExpressionCSAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLastExpressionCSAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLastExpressionCSExpCSParserRuleCall_1_1_0 = (RuleCall)cLastExpressionCSAssignment_1_1.eContents().get(0);
		
		//CollectionLiteralPartCS:
		//	expressionCS=ExpCS ('..' lastExpressionCS=ExpCS)?;
		@Override public ParserRule getRule() { return rule; }
		
		//expressionCS=ExpCS ('..' lastExpressionCS=ExpCS)?
		public Group getGroup() { return cGroup; }
		
		//expressionCS=ExpCS
		public Assignment getExpressionCSAssignment_0() { return cExpressionCSAssignment_0; }
		
		//ExpCS
		public RuleCall getExpressionCSExpCSParserRuleCall_0_0() { return cExpressionCSExpCSParserRuleCall_0_0; }
		
		//('..' lastExpressionCS=ExpCS)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1_0() { return cFullStopFullStopKeyword_1_0; }
		
		//lastExpressionCS=ExpCS
		public Assignment getLastExpressionCSAssignment_1_1() { return cLastExpressionCSAssignment_1_1; }
		
		//ExpCS
		public RuleCall getLastExpressionCSExpCSParserRuleCall_1_1_0() { return cLastExpressionCSExpCSParserRuleCall_1_1_0; }
	}
	public class PrimitiveLiteralExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.PrimitiveLiteralExpCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberLiteralExpCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringLiteralExpCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanLiteralExpCSParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cUnlimitedNaturalLiteralExpCSParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cInvalidLiteralExpCSParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cNullLiteralExpCSParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//PrimitiveLiteralExpCS:
		//	NumberLiteralExpCS | StringLiteralExpCS | BooleanLiteralExpCS
		//	| UnlimitedNaturalLiteralExpCS | InvalidLiteralExpCS | NullLiteralExpCS;
		@Override public ParserRule getRule() { return rule; }
		
		//NumberLiteralExpCS | StringLiteralExpCS | BooleanLiteralExpCS | UnlimitedNaturalLiteralExpCS | InvalidLiteralExpCS |
		//NullLiteralExpCS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NumberLiteralExpCS
		public RuleCall getNumberLiteralExpCSParserRuleCall_0() { return cNumberLiteralExpCSParserRuleCall_0; }
		
		//StringLiteralExpCS
		public RuleCall getStringLiteralExpCSParserRuleCall_1() { return cStringLiteralExpCSParserRuleCall_1; }
		
		//BooleanLiteralExpCS
		public RuleCall getBooleanLiteralExpCSParserRuleCall_2() { return cBooleanLiteralExpCSParserRuleCall_2; }
		
		//UnlimitedNaturalLiteralExpCS
		public RuleCall getUnlimitedNaturalLiteralExpCSParserRuleCall_3() { return cUnlimitedNaturalLiteralExpCSParserRuleCall_3; }
		
		//InvalidLiteralExpCS
		public RuleCall getInvalidLiteralExpCSParserRuleCall_4() { return cInvalidLiteralExpCSParserRuleCall_4; }
		
		//NullLiteralExpCS
		public RuleCall getNullLiteralExpCSParserRuleCall_5() { return cNullLiteralExpCSParserRuleCall_5; }
	}
	public class TupleLiteralExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.TupleLiteralExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTupleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedPartsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedPartsTupleLiteralPartCSParserRuleCall_2_0 = (RuleCall)cOwnedPartsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOwnedPartsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOwnedPartsTupleLiteralPartCSParserRuleCall_3_1_0 = (RuleCall)cOwnedPartsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TupleLiteralExpCS:
		//	'Tuple' '{' ownedParts+=TupleLiteralPartCS (','
		//	ownedParts+=TupleLiteralPartCS)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Tuple' '{' ownedParts+=TupleLiteralPartCS (',' ownedParts+=TupleLiteralPartCS)* '}'
		public Group getGroup() { return cGroup; }
		
		//'Tuple'
		public Keyword getTupleKeyword_0() { return cTupleKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//ownedParts+=TupleLiteralPartCS
		public Assignment getOwnedPartsAssignment_2() { return cOwnedPartsAssignment_2; }
		
		//TupleLiteralPartCS
		public RuleCall getOwnedPartsTupleLiteralPartCSParserRuleCall_2_0() { return cOwnedPartsTupleLiteralPartCSParserRuleCall_2_0; }
		
		//(',' ownedParts+=TupleLiteralPartCS)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//ownedParts+=TupleLiteralPartCS
		public Assignment getOwnedPartsAssignment_3_1() { return cOwnedPartsAssignment_3_1; }
		
		//TupleLiteralPartCS
		public RuleCall getOwnedPartsTupleLiteralPartCSParserRuleCall_3_1_0() { return cOwnedPartsTupleLiteralPartCSParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class TupleLiteralPartCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.TupleLiteralPartCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameUnrestrictedNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedTypeTypeExpCSParserRuleCall_1_1_0 = (RuleCall)cOwnedTypeAssignment_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInitExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInitExpressionExpCSParserRuleCall_3_0 = (RuleCall)cInitExpressionAssignment_3.eContents().get(0);
		
		//TupleLiteralPartCS:
		//	name=UnrestrictedName (':' ownedType=TypeExpCS)? '='
		//	initExpression=ExpCS;
		@Override public ParserRule getRule() { return rule; }
		
		//name=UnrestrictedName (':' ownedType=TypeExpCS)? '=' initExpression=ExpCS
		public Group getGroup() { return cGroup; }
		
		//name=UnrestrictedName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//UnrestrictedName
		public RuleCall getNameUnrestrictedNameParserRuleCall_0_0() { return cNameUnrestrictedNameParserRuleCall_0_0; }
		
		//(':' ownedType=TypeExpCS)?
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//ownedType=TypeExpCS
		public Assignment getOwnedTypeAssignment_1_1() { return cOwnedTypeAssignment_1_1; }
		
		//TypeExpCS
		public RuleCall getOwnedTypeTypeExpCSParserRuleCall_1_1_0() { return cOwnedTypeTypeExpCSParserRuleCall_1_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//initExpression=ExpCS
		public Assignment getInitExpressionAssignment_3() { return cInitExpressionAssignment_3; }
		
		//ExpCS
		public RuleCall getInitExpressionExpCSParserRuleCall_3_0() { return cInitExpressionExpCSParserRuleCall_3_0; }
	}
	public class NumberLiteralExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.NumberLiteralExpCS");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameBIG_INTTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//NumberLiteralExpCS:
		//	name=BIG_INT;
		@Override public ParserRule getRule() { return rule; }
		
		//name=BIG_INT
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//BIG_INT
		public RuleCall getNameBIG_INTTerminalRuleCall_0() { return cNameBIG_INTTerminalRuleCall_0; }
	}
	public class StringLiteralExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.StringLiteralExpCS");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameStringLiteralParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//StringLiteralExpCS:
		//	name+=StringLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//name+=StringLiteral
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//StringLiteral
		public RuleCall getNameStringLiteralParserRuleCall_0() { return cNameStringLiteralParserRuleCall_0; }
	}
	public class BooleanLiteralExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.BooleanLiteralExpCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cNameTrueKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cNameFalseKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		
		//BooleanLiteralExpCS:
		//	name='true' | name='false';
		@Override public ParserRule getRule() { return rule; }
		
		//name='true' | name='false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name='true'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'true'
		public Keyword getNameTrueKeyword_0_0() { return cNameTrueKeyword_0_0; }
		
		//name='false'
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//'false'
		public Keyword getNameFalseKeyword_1_0() { return cNameFalseKeyword_1_0; }
	}
	public class UnlimitedNaturalLiteralExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.UnlimitedNaturalLiteralExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnlimitedNaturalLiteralExpCSAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//UnlimitedNaturalLiteralExpCS:
		//	{UnlimitedNaturalLiteralExpCS} '*';
		@Override public ParserRule getRule() { return rule; }
		
		//{UnlimitedNaturalLiteralExpCS} '*'
		public Group getGroup() { return cGroup; }
		
		//{UnlimitedNaturalLiteralExpCS}
		public Action getUnlimitedNaturalLiteralExpCSAction_0() { return cUnlimitedNaturalLiteralExpCSAction_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}
	public class InvalidLiteralExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.InvalidLiteralExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInvalidLiteralExpCSAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInvalidKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//InvalidLiteralExpCS:
		//	{InvalidLiteralExpCS} 'invalid';
		@Override public ParserRule getRule() { return rule; }
		
		//{InvalidLiteralExpCS} 'invalid'
		public Group getGroup() { return cGroup; }
		
		//{InvalidLiteralExpCS}
		public Action getInvalidLiteralExpCSAction_0() { return cInvalidLiteralExpCSAction_0; }
		
		//'invalid'
		public Keyword getInvalidKeyword_1() { return cInvalidKeyword_1; }
	}
	public class NullLiteralExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.NullLiteralExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNullLiteralExpCSAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NullLiteralExpCS:
		//	{NullLiteralExpCS} 'null';
		@Override public ParserRule getRule() { return rule; }
		
		//{NullLiteralExpCS} 'null'
		public Group getGroup() { return cGroup; }
		
		//{NullLiteralExpCS}
		public Action getNullLiteralExpCSAction_0() { return cNullLiteralExpCSAction_0; }
		
		//'null'
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}
	public class TypeLiteralCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.TypeLiteralCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveTypeCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTupleTypeCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCollectionTypeCSParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TypeLiteralCS:
		//	PrimitiveTypeCS | TupleTypeCS | CollectionTypeCS;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimitiveTypeCS | TupleTypeCS | CollectionTypeCS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimitiveTypeCS
		public RuleCall getPrimitiveTypeCSParserRuleCall_0() { return cPrimitiveTypeCSParserRuleCall_0; }
		
		//TupleTypeCS
		public RuleCall getTupleTypeCSParserRuleCall_1() { return cTupleTypeCSParserRuleCall_1; }
		
		//CollectionTypeCS
		public RuleCall getCollectionTypeCSParserRuleCall_2() { return cCollectionTypeCSParserRuleCall_2; }
	}
	public class TypeLiteralExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.TypeLiteralExpCS");
		private final Assignment cOwnedTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedTypeTypeLiteralCSParserRuleCall_0 = (RuleCall)cOwnedTypeAssignment.eContents().get(0);
		
		//TypeLiteralExpCS:
		//	ownedType=TypeLiteralCS;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedType=TypeLiteralCS
		public Assignment getOwnedTypeAssignment() { return cOwnedTypeAssignment; }
		
		//TypeLiteralCS
		public RuleCall getOwnedTypeTypeLiteralCSParserRuleCall_0() { return cOwnedTypeTypeLiteralCSParserRuleCall_0; }
	}
	public class TypeNameExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.TypeNameExpCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Assignment cNamespaceAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cNamespaceUnrestrictedNameParserRuleCall_0_0_0_0 = (RuleCall)cNamespaceAssignment_0_0_0.eContents().get(0);
		private final Keyword cColonColonKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_0_2 = (Group)cGroup_0_0.eContents().get(2);
		private final Assignment cNamespaceAssignment_0_0_2_0 = (Assignment)cGroup_0_0_2.eContents().get(0);
		private final RuleCall cNamespaceUnreservedNameParserRuleCall_0_0_2_0_0 = (RuleCall)cNamespaceAssignment_0_0_2_0.eContents().get(0);
		private final Keyword cColonColonKeyword_0_0_2_1 = (Keyword)cGroup_0_0_2.eContents().get(1);
		private final Assignment cElementAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cElementUnreservedNameParserRuleCall_0_1_0 = (RuleCall)cElementAssignment_0_1.eContents().get(0);
		private final Assignment cElementAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cElementUnrestrictedNameParserRuleCall_1_0 = (RuleCall)cElementAssignment_1.eContents().get(0);
		
		//TypeNameExpCS:
		//	(namespace+=UnrestrictedName '::' (namespace+=UnreservedName '::')*) element=UnreservedName |
		//	element=UnrestrictedName;
		@Override public ParserRule getRule() { return rule; }
		
		//(namespace+=UnrestrictedName '::' (namespace+=UnreservedName '::')*) element=UnreservedName | element=UnrestrictedName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(namespace+=UnrestrictedName '::' (namespace+=UnreservedName '::')*) element=UnreservedName
		public Group getGroup_0() { return cGroup_0; }
		
		//namespace+=UnrestrictedName '::' (namespace+=UnreservedName '::')*
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//namespace+=UnrestrictedName
		public Assignment getNamespaceAssignment_0_0_0() { return cNamespaceAssignment_0_0_0; }
		
		//UnrestrictedName
		public RuleCall getNamespaceUnrestrictedNameParserRuleCall_0_0_0_0() { return cNamespaceUnrestrictedNameParserRuleCall_0_0_0_0; }
		
		//'::'
		public Keyword getColonColonKeyword_0_0_1() { return cColonColonKeyword_0_0_1; }
		
		//(namespace+=UnreservedName '::')*
		public Group getGroup_0_0_2() { return cGroup_0_0_2; }
		
		//namespace+=UnreservedName
		public Assignment getNamespaceAssignment_0_0_2_0() { return cNamespaceAssignment_0_0_2_0; }
		
		//UnreservedName
		public RuleCall getNamespaceUnreservedNameParserRuleCall_0_0_2_0_0() { return cNamespaceUnreservedNameParserRuleCall_0_0_2_0_0; }
		
		//'::'
		public Keyword getColonColonKeyword_0_0_2_1() { return cColonColonKeyword_0_0_2_1; }
		
		//element=UnreservedName
		public Assignment getElementAssignment_0_1() { return cElementAssignment_0_1; }
		
		//UnreservedName
		public RuleCall getElementUnreservedNameParserRuleCall_0_1_0() { return cElementUnreservedNameParserRuleCall_0_1_0; }
		
		//element=UnrestrictedName
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }
		
		//UnrestrictedName
		public RuleCall getElementUnrestrictedNameParserRuleCall_1_0() { return cElementUnrestrictedNameParserRuleCall_1_0; }
	}
	public class TypeExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.TypeExpCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeNameExpCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeLiteralCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeExpCS:
		//	TypeNameExpCS | TypeLiteralCS;
		@Override public ParserRule getRule() { return rule; }
		
		//TypeNameExpCS | TypeLiteralCS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TypeNameExpCS
		public RuleCall getTypeNameExpCSParserRuleCall_0() { return cTypeNameExpCSParserRuleCall_0; }
		
		//TypeLiteralCS
		public RuleCall getTypeLiteralCSParserRuleCall_1() { return cTypeLiteralCSParserRuleCall_1; }
	}
	public class NavigatingArgCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.NavigatingArgCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNavigatingArgExpCSParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedTypeTypeExpCSParserRuleCall_1_1_0 = (RuleCall)cOwnedTypeAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInitAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInitExpCSParserRuleCall_2_1_0 = (RuleCall)cInitAssignment_2_1.eContents().get(0);
		
		//NavigatingArgCS:
		//	name=NavigatingArgExpCS (':' ownedType=TypeExpCS)? ('=' init=ExpCS)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=NavigatingArgExpCS (':' ownedType=TypeExpCS)? ('=' init=ExpCS)?
		public Group getGroup() { return cGroup; }
		
		//name=NavigatingArgExpCS
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//NavigatingArgExpCS
		public RuleCall getNameNavigatingArgExpCSParserRuleCall_0_0() { return cNameNavigatingArgExpCSParserRuleCall_0_0; }
		
		//(':' ownedType=TypeExpCS)?
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//ownedType=TypeExpCS
		public Assignment getOwnedTypeAssignment_1_1() { return cOwnedTypeAssignment_1_1; }
		
		//TypeExpCS
		public RuleCall getOwnedTypeTypeExpCSParserRuleCall_1_1_0() { return cOwnedTypeTypeExpCSParserRuleCall_1_1_0; }
		
		//('=' init=ExpCS)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//init=ExpCS
		public Assignment getInitAssignment_2_1() { return cInitAssignment_2_1; }
		
		//ExpCS
		public RuleCall getInitExpCSParserRuleCall_2_1_0() { return cInitExpCSParserRuleCall_2_1_0; }
	}
	public class NavigatingBarArgCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.NavigatingBarArgCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrefixAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPrefixVerticalLineKeyword_0_0 = (Keyword)cPrefixAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNavigatingArgExpCSParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOwnedTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOwnedTypeTypeExpCSParserRuleCall_2_1_0 = (RuleCall)cOwnedTypeAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInitAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInitExpCSParserRuleCall_3_1_0 = (RuleCall)cInitAssignment_3_1.eContents().get(0);
		
		//NavigatingBarArgCS:
		//	prefix='|' name=NavigatingArgExpCS (':' ownedType=TypeExpCS)? ('=' init=ExpCS)?;
		@Override public ParserRule getRule() { return rule; }
		
		//prefix='|' name=NavigatingArgExpCS (':' ownedType=TypeExpCS)? ('=' init=ExpCS)?
		public Group getGroup() { return cGroup; }
		
		//prefix='|'
		public Assignment getPrefixAssignment_0() { return cPrefixAssignment_0; }
		
		//'|'
		public Keyword getPrefixVerticalLineKeyword_0_0() { return cPrefixVerticalLineKeyword_0_0; }
		
		//name=NavigatingArgExpCS
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//NavigatingArgExpCS
		public RuleCall getNameNavigatingArgExpCSParserRuleCall_1_0() { return cNameNavigatingArgExpCSParserRuleCall_1_0; }
		
		//(':' ownedType=TypeExpCS)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//ownedType=TypeExpCS
		public Assignment getOwnedTypeAssignment_2_1() { return cOwnedTypeAssignment_2_1; }
		
		//TypeExpCS
		public RuleCall getOwnedTypeTypeExpCSParserRuleCall_2_1_0() { return cOwnedTypeTypeExpCSParserRuleCall_2_1_0; }
		
		//('=' init=ExpCS)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//init=ExpCS
		public Assignment getInitAssignment_3_1() { return cInitAssignment_3_1; }
		
		//ExpCS
		public RuleCall getInitExpCSParserRuleCall_3_1_0() { return cInitExpCSParserRuleCall_3_1_0; }
	}
	public class NavigatingCommaArgCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.NavigatingCommaArgCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrefixAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPrefixCommaKeyword_0_0 = (Keyword)cPrefixAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNavigatingArgExpCSParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOwnedTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOwnedTypeTypeExpCSParserRuleCall_2_1_0 = (RuleCall)cOwnedTypeAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInitAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInitExpCSParserRuleCall_3_1_0 = (RuleCall)cInitAssignment_3_1.eContents().get(0);
		
		//NavigatingCommaArgCS:
		//	prefix=',' name=NavigatingArgExpCS (':' ownedType=TypeExpCS)? ('=' init=ExpCS)?;
		@Override public ParserRule getRule() { return rule; }
		
		//prefix=',' name=NavigatingArgExpCS (':' ownedType=TypeExpCS)? ('=' init=ExpCS)?
		public Group getGroup() { return cGroup; }
		
		//prefix=','
		public Assignment getPrefixAssignment_0() { return cPrefixAssignment_0; }
		
		//','
		public Keyword getPrefixCommaKeyword_0_0() { return cPrefixCommaKeyword_0_0; }
		
		//name=NavigatingArgExpCS
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//NavigatingArgExpCS
		public RuleCall getNameNavigatingArgExpCSParserRuleCall_1_0() { return cNameNavigatingArgExpCSParserRuleCall_1_0; }
		
		//(':' ownedType=TypeExpCS)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//ownedType=TypeExpCS
		public Assignment getOwnedTypeAssignment_2_1() { return cOwnedTypeAssignment_2_1; }
		
		//TypeExpCS
		public RuleCall getOwnedTypeTypeExpCSParserRuleCall_2_1_0() { return cOwnedTypeTypeExpCSParserRuleCall_2_1_0; }
		
		//('=' init=ExpCS)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//init=ExpCS
		public Assignment getInitAssignment_3_1() { return cInitAssignment_3_1; }
		
		//ExpCS
		public RuleCall getInitExpCSParserRuleCall_3_1_0() { return cInitExpCSParserRuleCall_3_1_0; }
	}
	public class NavigatingSemiArgCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.NavigatingSemiArgCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrefixAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPrefixSemicolonKeyword_0_0 = (Keyword)cPrefixAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNavigatingArgExpCSParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOwnedTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOwnedTypeTypeExpCSParserRuleCall_2_1_0 = (RuleCall)cOwnedTypeAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInitAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInitExpCSParserRuleCall_3_1_0 = (RuleCall)cInitAssignment_3_1.eContents().get(0);
		
		//NavigatingSemiArgCS:
		//	prefix=';' name=NavigatingArgExpCS (':' ownedType=TypeExpCS)? ('=' init=ExpCS)?;
		@Override public ParserRule getRule() { return rule; }
		
		//prefix=';' name=NavigatingArgExpCS (':' ownedType=TypeExpCS)? ('=' init=ExpCS)?
		public Group getGroup() { return cGroup; }
		
		//prefix=';'
		public Assignment getPrefixAssignment_0() { return cPrefixAssignment_0; }
		
		//';'
		public Keyword getPrefixSemicolonKeyword_0_0() { return cPrefixSemicolonKeyword_0_0; }
		
		//name=NavigatingArgExpCS
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//NavigatingArgExpCS
		public RuleCall getNameNavigatingArgExpCSParserRuleCall_1_0() { return cNameNavigatingArgExpCSParserRuleCall_1_0; }
		
		//(':' ownedType=TypeExpCS)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//ownedType=TypeExpCS
		public Assignment getOwnedTypeAssignment_2_1() { return cOwnedTypeAssignment_2_1; }
		
		//TypeExpCS
		public RuleCall getOwnedTypeTypeExpCSParserRuleCall_2_1_0() { return cOwnedTypeTypeExpCSParserRuleCall_2_1_0; }
		
		//('=' init=ExpCS)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//init=ExpCS
		public Assignment getInitAssignment_3_1() { return cInitAssignment_3_1; }
		
		//ExpCS
		public RuleCall getInitExpCSParserRuleCall_3_1_0() { return cInitExpCSParserRuleCall_3_1_0; }
	}
	public class IfExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.IfExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExpCSParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenExpressionExpCSParserRuleCall_3_0 = (RuleCall)cThenExpressionAssignment_3.eContents().get(0);
		private final Keyword cElseKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cElseExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElseExpressionExpCSParserRuleCall_5_0 = (RuleCall)cElseExpressionAssignment_5.eContents().get(0);
		private final Keyword cEndifKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//IfExpCS:
		//	'if' condition=ExpCS
		//	'then' thenExpression=ExpCS
		//	'else' elseExpression=ExpCS
		//	'endif';
		@Override public ParserRule getRule() { return rule; }
		
		//'if' condition=ExpCS 'then' thenExpression=ExpCS 'else' elseExpression=ExpCS 'endif'
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//condition=ExpCS
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//ExpCS
		public RuleCall getConditionExpCSParserRuleCall_1_0() { return cConditionExpCSParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//thenExpression=ExpCS
		public Assignment getThenExpressionAssignment_3() { return cThenExpressionAssignment_3; }
		
		//ExpCS
		public RuleCall getThenExpressionExpCSParserRuleCall_3_0() { return cThenExpressionExpCSParserRuleCall_3_0; }
		
		//'else'
		public Keyword getElseKeyword_4() { return cElseKeyword_4; }
		
		//elseExpression=ExpCS
		public Assignment getElseExpressionAssignment_5() { return cElseExpressionAssignment_5; }
		
		//ExpCS
		public RuleCall getElseExpressionExpCSParserRuleCall_5_0() { return cElseExpressionExpCSParserRuleCall_5_0; }
		
		//'endif'
		public Keyword getEndifKeyword_6() { return cEndifKeyword_6; }
	}
	public class LetExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.LetExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableLetVariableCSParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariableAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariableLetVariableCSParserRuleCall_2_1_0 = (RuleCall)cVariableAssignment_2_1.eContents().get(0);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInExpCSParserRuleCall_4_0 = (RuleCall)cInAssignment_4.eContents().get(0);
		
		//LetExpCS:
		//	'let' variable+=LetVariableCS (',' variable+=LetVariableCS)*
		//	'in' in=ExpCS;
		@Override public ParserRule getRule() { return rule; }
		
		//'let' variable+=LetVariableCS (',' variable+=LetVariableCS)* 'in' in=ExpCS
		public Group getGroup() { return cGroup; }
		
		//'let'
		public Keyword getLetKeyword_0() { return cLetKeyword_0; }
		
		//variable+=LetVariableCS
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//LetVariableCS
		public RuleCall getVariableLetVariableCSParserRuleCall_1_0() { return cVariableLetVariableCSParserRuleCall_1_0; }
		
		//(',' variable+=LetVariableCS)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//variable+=LetVariableCS
		public Assignment getVariableAssignment_2_1() { return cVariableAssignment_2_1; }
		
		//LetVariableCS
		public RuleCall getVariableLetVariableCSParserRuleCall_2_1_0() { return cVariableLetVariableCSParserRuleCall_2_1_0; }
		
		//'in'
		public Keyword getInKeyword_3() { return cInKeyword_3; }
		
		//in=ExpCS
		public Assignment getInAssignment_4() { return cInAssignment_4; }
		
		//ExpCS
		public RuleCall getInExpCSParserRuleCall_4_0() { return cInExpCSParserRuleCall_4_0; }
	}
	public class LetVariableCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.LetVariableCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameUnrestrictedNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOwnedTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedTypeTypeExpCSParserRuleCall_1_1_0 = (RuleCall)cOwnedTypeAssignment_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInitExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInitExpressionExpCSParserRuleCall_3_0 = (RuleCall)cInitExpressionAssignment_3.eContents().get(0);
		
		//LetVariableCS:
		//	name=UnrestrictedName (':' ownedType=TypeExpCS)? '='
		//	initExpression=ExpCS;
		@Override public ParserRule getRule() { return rule; }
		
		//name=UnrestrictedName (':' ownedType=TypeExpCS)? '=' initExpression=ExpCS
		public Group getGroup() { return cGroup; }
		
		//name=UnrestrictedName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//UnrestrictedName
		public RuleCall getNameUnrestrictedNameParserRuleCall_0_0() { return cNameUnrestrictedNameParserRuleCall_0_0; }
		
		//(':' ownedType=TypeExpCS)?
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//ownedType=TypeExpCS
		public Assignment getOwnedTypeAssignment_1_1() { return cOwnedTypeAssignment_1_1; }
		
		//TypeExpCS
		public RuleCall getOwnedTypeTypeExpCSParserRuleCall_1_1_0() { return cOwnedTypeTypeExpCSParserRuleCall_1_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//initExpression=ExpCS
		public Assignment getInitExpressionAssignment_3() { return cInitExpressionAssignment_3; }
		
		//ExpCS
		public RuleCall getInitExpressionExpCSParserRuleCall_3_0() { return cInitExpressionExpCSParserRuleCall_3_0; }
	}
	public class NestedExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.NestedExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSourceExpCSParserRuleCall_1_0 = (RuleCall)cSourceAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//NestedExpCS:
		//	'(' source=ExpCS ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' source=ExpCS ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//source=ExpCS
		public Assignment getSourceAssignment_1() { return cSourceAssignment_1; }
		
		//ExpCS
		public RuleCall getSourceExpCSParserRuleCall_1_0() { return cSourceExpCSParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class SelfExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.SelfExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSelfExpCSAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSelfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SelfExpCS:
		//	{SelfExpCS} 'self';
		@Override public ParserRule getRule() { return rule; }
		
		//{SelfExpCS} 'self'
		public Group getGroup() { return cGroup; }
		
		//{SelfExpCS}
		public Action getSelfExpCSAction_0() { return cSelfExpCSAction_0; }
		
		//'self'
		public Keyword getSelfKeyword_1() { return cSelfKeyword_1; }
	}
	public class PrimaryExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.PrimaryExpCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNavigatingExpCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSelfExpCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPrimitiveLiteralExpCSParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTupleLiteralExpCSParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCollectionLiteralExpCSParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cLetExpCSParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cIfExpCSParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cNestedExpCSParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//PrimaryExpCS:
		//	NavigatingExpCS | SelfExpCS | PrimitiveLiteralExpCS | TupleLiteralExpCS | CollectionLiteralExpCS | LetExpCS | IfExpCS
		//	| NestedExpCS;
		@Override public ParserRule getRule() { return rule; }
		
		//NavigatingExpCS | SelfExpCS | PrimitiveLiteralExpCS | TupleLiteralExpCS | CollectionLiteralExpCS | LetExpCS | IfExpCS |
		//NestedExpCS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NavigatingExpCS
		public RuleCall getNavigatingExpCSParserRuleCall_0() { return cNavigatingExpCSParserRuleCall_0; }
		
		//SelfExpCS
		public RuleCall getSelfExpCSParserRuleCall_1() { return cSelfExpCSParserRuleCall_1; }
		
		//PrimitiveLiteralExpCS
		public RuleCall getPrimitiveLiteralExpCSParserRuleCall_2() { return cPrimitiveLiteralExpCSParserRuleCall_2; }
		
		//TupleLiteralExpCS
		public RuleCall getTupleLiteralExpCSParserRuleCall_3() { return cTupleLiteralExpCSParserRuleCall_3; }
		
		//CollectionLiteralExpCS
		public RuleCall getCollectionLiteralExpCSParserRuleCall_4() { return cCollectionLiteralExpCSParserRuleCall_4; }
		
		//LetExpCS
		public RuleCall getLetExpCSParserRuleCall_5() { return cLetExpCSParserRuleCall_5; }
		
		//IfExpCS
		public RuleCall getIfExpCSParserRuleCall_6() { return cIfExpCSParserRuleCall_6; }
		
		//NestedExpCS
		public RuleCall getNestedExpCSParserRuleCall_7() { return cNestedExpCSParserRuleCall_7; }
	}
	public class NameExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.NameExpCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Assignment cNamespaceAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cNamespaceUnrestrictedNameParserRuleCall_0_0_0_0 = (RuleCall)cNamespaceAssignment_0_0_0.eContents().get(0);
		private final Keyword cColonColonKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_0_2 = (Group)cGroup_0_0.eContents().get(2);
		private final Assignment cNamespaceAssignment_0_0_2_0 = (Assignment)cGroup_0_0_2.eContents().get(0);
		private final RuleCall cNamespaceUnreservedNameParserRuleCall_0_0_2_0_0 = (RuleCall)cNamespaceAssignment_0_0_2_0.eContents().get(0);
		private final Keyword cColonColonKeyword_0_0_2_1 = (Keyword)cGroup_0_0_2.eContents().get(1);
		private final Assignment cElementAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cElementUnreservedNameParserRuleCall_0_1_0 = (RuleCall)cElementAssignment_0_1.eContents().get(0);
		private final Assignment cElementAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cElementUnrestrictedNameParserRuleCall_1_0 = (RuleCall)cElementAssignment_1.eContents().get(0);
		
		//NameExpCS:
		//	(namespace+=UnrestrictedName '::' (namespace+=UnreservedName '::')*) element=UnreservedName |
		//	element=UnrestrictedName;
		@Override public ParserRule getRule() { return rule; }
		
		//(namespace+=UnrestrictedName '::' (namespace+=UnreservedName '::')*) element=UnreservedName | element=UnrestrictedName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(namespace+=UnrestrictedName '::' (namespace+=UnreservedName '::')*) element=UnreservedName
		public Group getGroup_0() { return cGroup_0; }
		
		//namespace+=UnrestrictedName '::' (namespace+=UnreservedName '::')*
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//namespace+=UnrestrictedName
		public Assignment getNamespaceAssignment_0_0_0() { return cNamespaceAssignment_0_0_0; }
		
		//UnrestrictedName
		public RuleCall getNamespaceUnrestrictedNameParserRuleCall_0_0_0_0() { return cNamespaceUnrestrictedNameParserRuleCall_0_0_0_0; }
		
		//'::'
		public Keyword getColonColonKeyword_0_0_1() { return cColonColonKeyword_0_0_1; }
		
		//(namespace+=UnreservedName '::')*
		public Group getGroup_0_0_2() { return cGroup_0_0_2; }
		
		//namespace+=UnreservedName
		public Assignment getNamespaceAssignment_0_0_2_0() { return cNamespaceAssignment_0_0_2_0; }
		
		//UnreservedName
		public RuleCall getNamespaceUnreservedNameParserRuleCall_0_0_2_0_0() { return cNamespaceUnreservedNameParserRuleCall_0_0_2_0_0; }
		
		//'::'
		public Keyword getColonColonKeyword_0_0_2_1() { return cColonColonKeyword_0_0_2_1; }
		
		//element=UnreservedName
		public Assignment getElementAssignment_0_1() { return cElementAssignment_0_1; }
		
		//UnreservedName
		public RuleCall getElementUnreservedNameParserRuleCall_0_1_0() { return cElementUnreservedNameParserRuleCall_0_1_0; }
		
		//element=UnrestrictedName
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }
		
		//UnrestrictedName
		public RuleCall getElementUnrestrictedNameParserRuleCall_1_0() { return cElementUnrestrictedNameParserRuleCall_1_0; }
	}
	public class ExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.ExpCS");
		private final RuleCall cInfixedExpCSParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ExpCS:
		//	InfixedExpCS;
		@Override public ParserRule getRule() { return rule; }
		
		//InfixedExpCS
		public RuleCall getInfixedExpCSParserRuleCall() { return cInfixedExpCSParserRuleCall; }
	}
	public class InfixedExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.InfixedExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrefixedExpCSParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cInfixExpCSOwnedExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOwnedOperatorAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOwnedOperatorBinaryOperatorCSParserRuleCall_1_1_0_0 = (RuleCall)cOwnedOperatorAssignment_1_1_0.eContents().get(0);
		private final Assignment cOwnedExpressionAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOwnedExpressionPrefixedExpCSParserRuleCall_1_1_1_0 = (RuleCall)cOwnedExpressionAssignment_1_1_1.eContents().get(0);
		
		//InfixedExpCS:
		//	PrefixedExpCS ({InfixExpCS.ownedExpression+=current} (ownedOperator+=BinaryOperatorCS
		//	ownedExpression+=PrefixedExpCS)+)?;
		@Override public ParserRule getRule() { return rule; }
		
		//PrefixedExpCS ({InfixExpCS.ownedExpression+=current} (ownedOperator+=BinaryOperatorCS ownedExpression+=PrefixedExpCS)+)?
		public Group getGroup() { return cGroup; }
		
		//PrefixedExpCS
		public RuleCall getPrefixedExpCSParserRuleCall_0() { return cPrefixedExpCSParserRuleCall_0; }
		
		//({InfixExpCS.ownedExpression+=current} (ownedOperator+=BinaryOperatorCS ownedExpression+=PrefixedExpCS)+)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{InfixExpCS.ownedExpression+=current}
		public Action getInfixExpCSOwnedExpressionAction_1_0() { return cInfixExpCSOwnedExpressionAction_1_0; }
		
		//(ownedOperator+=BinaryOperatorCS ownedExpression+=PrefixedExpCS)+
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//ownedOperator+=BinaryOperatorCS
		public Assignment getOwnedOperatorAssignment_1_1_0() { return cOwnedOperatorAssignment_1_1_0; }
		
		//BinaryOperatorCS
		public RuleCall getOwnedOperatorBinaryOperatorCSParserRuleCall_1_1_0_0() { return cOwnedOperatorBinaryOperatorCSParserRuleCall_1_1_0_0; }
		
		//ownedExpression+=PrefixedExpCS
		public Assignment getOwnedExpressionAssignment_1_1_1() { return cOwnedExpressionAssignment_1_1_1; }
		
		//PrefixedExpCS
		public RuleCall getOwnedExpressionPrefixedExpCSParserRuleCall_1_1_1_0() { return cOwnedExpressionPrefixedExpCSParserRuleCall_1_1_1_0; }
	}
	public class BinaryOperatorCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.BinaryOperatorCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInfixOperatorCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNavigationOperatorCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BinaryOperatorCS:
		//	InfixOperatorCS | NavigationOperatorCS;
		@Override public ParserRule getRule() { return rule; }
		
		//InfixOperatorCS | NavigationOperatorCS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//InfixOperatorCS
		public RuleCall getInfixOperatorCSParserRuleCall_0() { return cInfixOperatorCSParserRuleCall_0; }
		
		//NavigationOperatorCS
		public RuleCall getNavigationOperatorCSParserRuleCall_1() { return cNavigationOperatorCSParserRuleCall_1; }
	}
	public class InfixOperatorCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.InfixOperatorCS");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameInfixOperatorParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//InfixOperatorCS:
		//	name=InfixOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//name=InfixOperator
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//InfixOperator
		public RuleCall getNameInfixOperatorParserRuleCall_0() { return cNameInfixOperatorParserRuleCall_0; }
	}
	public class NavigationOperatorCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.NavigationOperatorCS");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameNavigationOperatorParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//NavigationOperatorCS:
		//	name=NavigationOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//name=NavigationOperator
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//NavigationOperator
		public RuleCall getNameNavigationOperatorParserRuleCall_0() { return cNameNavigationOperatorParserRuleCall_0; }
	}
	public class PrefixedExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.PrefixedExpCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimaryExpCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cPrefixExpCSAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOwnedOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedOperatorUnaryOperatorCSParserRuleCall_1_1_0 = (RuleCall)cOwnedOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOwnedExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOwnedExpressionPrimaryExpCSParserRuleCall_1_2_0 = (RuleCall)cOwnedExpressionAssignment_1_2.eContents().get(0);
		
		//PrefixedExpCS:
		//	PrimaryExpCS | {PrefixExpCS} ownedOperator+=UnaryOperatorCS+
		//	ownedExpression=PrimaryExpCS;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpCS | {PrefixExpCS} ownedOperator+=UnaryOperatorCS+ ownedExpression=PrimaryExpCS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimaryExpCS
		public RuleCall getPrimaryExpCSParserRuleCall_0() { return cPrimaryExpCSParserRuleCall_0; }
		
		//{PrefixExpCS} ownedOperator+=UnaryOperatorCS+ ownedExpression=PrimaryExpCS
		public Group getGroup_1() { return cGroup_1; }
		
		//{PrefixExpCS}
		public Action getPrefixExpCSAction_1_0() { return cPrefixExpCSAction_1_0; }
		
		//ownedOperator+=UnaryOperatorCS+
		public Assignment getOwnedOperatorAssignment_1_1() { return cOwnedOperatorAssignment_1_1; }
		
		//UnaryOperatorCS
		public RuleCall getOwnedOperatorUnaryOperatorCSParserRuleCall_1_1_0() { return cOwnedOperatorUnaryOperatorCSParserRuleCall_1_1_0; }
		
		//ownedExpression=PrimaryExpCS
		public Assignment getOwnedExpressionAssignment_1_2() { return cOwnedExpressionAssignment_1_2; }
		
		//PrimaryExpCS
		public RuleCall getOwnedExpressionPrimaryExpCSParserRuleCall_1_2_0() { return cOwnedExpressionPrimaryExpCSParserRuleCall_1_2_0; }
	}
	public class UnaryOperatorCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.UnaryOperatorCS");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNamePrefixOperatorParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//UnaryOperatorCS:
		//	name=PrefixOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//name=PrefixOperator
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//PrefixOperator
		public RuleCall getNamePrefixOperatorParserRuleCall_0() { return cNamePrefixOperatorParserRuleCall_0; }
	}
	public class IndexExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.IndexExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNameExpCSParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cIndexExpCSNamedExpAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cFirstIndexesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cFirstIndexesExpCSParserRuleCall_1_2_0 = (RuleCall)cFirstIndexesAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cCommaKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cFirstIndexesAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cFirstIndexesExpCSParserRuleCall_1_3_1_0 = (RuleCall)cFirstIndexesAssignment_1_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_1_5 = (Group)cGroup_1.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_1_5_0 = (Keyword)cGroup_1_5.eContents().get(0);
		private final Assignment cSecondIndexesAssignment_1_5_1 = (Assignment)cGroup_1_5.eContents().get(1);
		private final RuleCall cSecondIndexesExpCSParserRuleCall_1_5_1_0 = (RuleCall)cSecondIndexesAssignment_1_5_1.eContents().get(0);
		private final Group cGroup_1_5_2 = (Group)cGroup_1_5.eContents().get(2);
		private final Keyword cCommaKeyword_1_5_2_0 = (Keyword)cGroup_1_5_2.eContents().get(0);
		private final Assignment cSecondIndexesAssignment_1_5_2_1 = (Assignment)cGroup_1_5_2.eContents().get(1);
		private final RuleCall cSecondIndexesExpCSParserRuleCall_1_5_2_1_0 = (RuleCall)cSecondIndexesAssignment_1_5_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_5_3 = (Keyword)cGroup_1_5.eContents().get(3);
		
		//IndexExpCS:
		//	NameExpCS ({IndexExpCS.namedExp=current}
		//	'[' firstIndexes+=ExpCS (',' firstIndexes+=ExpCS)* ']' ('[' secondIndexes+=ExpCS (',' secondIndexes+=ExpCS)* ']')?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//NameExpCS ({IndexExpCS.namedExp=current} '[' firstIndexes+=ExpCS (',' firstIndexes+=ExpCS)* ']' ('['
		//secondIndexes+=ExpCS (',' secondIndexes+=ExpCS)* ']')?)?
		public Group getGroup() { return cGroup; }
		
		//NameExpCS
		public RuleCall getNameExpCSParserRuleCall_0() { return cNameExpCSParserRuleCall_0; }
		
		//({IndexExpCS.namedExp=current} '[' firstIndexes+=ExpCS (',' firstIndexes+=ExpCS)* ']' ('[' secondIndexes+=ExpCS (','
		//secondIndexes+=ExpCS)* ']')?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{IndexExpCS.namedExp=current}
		public Action getIndexExpCSNamedExpAction_1_0() { return cIndexExpCSNamedExpAction_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_1() { return cLeftSquareBracketKeyword_1_1; }
		
		//firstIndexes+=ExpCS
		public Assignment getFirstIndexesAssignment_1_2() { return cFirstIndexesAssignment_1_2; }
		
		//ExpCS
		public RuleCall getFirstIndexesExpCSParserRuleCall_1_2_0() { return cFirstIndexesExpCSParserRuleCall_1_2_0; }
		
		//(',' firstIndexes+=ExpCS)*
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//','
		public Keyword getCommaKeyword_1_3_0() { return cCommaKeyword_1_3_0; }
		
		//firstIndexes+=ExpCS
		public Assignment getFirstIndexesAssignment_1_3_1() { return cFirstIndexesAssignment_1_3_1; }
		
		//ExpCS
		public RuleCall getFirstIndexesExpCSParserRuleCall_1_3_1_0() { return cFirstIndexesExpCSParserRuleCall_1_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_4() { return cRightSquareBracketKeyword_1_4; }
		
		//('[' secondIndexes+=ExpCS (',' secondIndexes+=ExpCS)* ']')?
		public Group getGroup_1_5() { return cGroup_1_5; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_5_0() { return cLeftSquareBracketKeyword_1_5_0; }
		
		//secondIndexes+=ExpCS
		public Assignment getSecondIndexesAssignment_1_5_1() { return cSecondIndexesAssignment_1_5_1; }
		
		//ExpCS
		public RuleCall getSecondIndexesExpCSParserRuleCall_1_5_1_0() { return cSecondIndexesExpCSParserRuleCall_1_5_1_0; }
		
		//(',' secondIndexes+=ExpCS)*
		public Group getGroup_1_5_2() { return cGroup_1_5_2; }
		
		//','
		public Keyword getCommaKeyword_1_5_2_0() { return cCommaKeyword_1_5_2_0; }
		
		//secondIndexes+=ExpCS
		public Assignment getSecondIndexesAssignment_1_5_2_1() { return cSecondIndexesAssignment_1_5_2_1; }
		
		//ExpCS
		public RuleCall getSecondIndexesExpCSParserRuleCall_1_5_2_1_0() { return cSecondIndexesExpCSParserRuleCall_1_5_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_5_3() { return cRightSquareBracketKeyword_1_5_3; }
	}
	public class NavigatingExpCS_BaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.NavigatingExpCS_Base");
		private final RuleCall cIndexExpCSParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//NavigatingExpCS_Base:
		//	IndexExpCS;
		@Override public ParserRule getRule() { return rule; }
		
		//IndexExpCS
		public RuleCall getIndexExpCSParserRuleCall() { return cIndexExpCSParserRuleCall; }
	}
	public class NavigatingExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.NavigatingExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNavigatingExpCS_BaseParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cNavigatingExpCSNamedExpAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Assignment cArgumentAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cArgumentNavigatingArgCSParserRuleCall_1_2_0_0 = (RuleCall)cArgumentAssignment_1_2_0.eContents().get(0);
		private final Assignment cArgumentAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cArgumentNavigatingCommaArgCSParserRuleCall_1_2_1_0 = (RuleCall)cArgumentAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_1_2_2 = (Group)cGroup_1_2.eContents().get(2);
		private final Assignment cArgumentAssignment_1_2_2_0 = (Assignment)cGroup_1_2_2.eContents().get(0);
		private final RuleCall cArgumentNavigatingSemiArgCSParserRuleCall_1_2_2_0_0 = (RuleCall)cArgumentAssignment_1_2_2_0.eContents().get(0);
		private final Assignment cArgumentAssignment_1_2_2_1 = (Assignment)cGroup_1_2_2.eContents().get(1);
		private final RuleCall cArgumentNavigatingCommaArgCSParserRuleCall_1_2_2_1_0 = (RuleCall)cArgumentAssignment_1_2_2_1.eContents().get(0);
		private final Group cGroup_1_2_3 = (Group)cGroup_1_2.eContents().get(3);
		private final Assignment cArgumentAssignment_1_2_3_0 = (Assignment)cGroup_1_2_3.eContents().get(0);
		private final RuleCall cArgumentNavigatingBarArgCSParserRuleCall_1_2_3_0_0 = (RuleCall)cArgumentAssignment_1_2_3_0.eContents().get(0);
		private final Assignment cArgumentAssignment_1_2_3_1 = (Assignment)cGroup_1_2_3.eContents().get(1);
		private final RuleCall cArgumentNavigatingCommaArgCSParserRuleCall_1_2_3_1_0 = (RuleCall)cArgumentAssignment_1_2_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//NavigatingExpCS:
		//	NavigatingExpCS_Base ({NavigatingExpCS.namedExp=current}
		//	'(' (argument+=NavigatingArgCS argument+=NavigatingCommaArgCS* (argument+=NavigatingSemiArgCS
		//	argument+=NavigatingCommaArgCS*)? (argument+=NavigatingBarArgCS argument+=NavigatingCommaArgCS*)?)? ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//NavigatingExpCS_Base ({NavigatingExpCS.namedExp=current} '(' (argument+=NavigatingArgCS argument+=NavigatingCommaArgCS*
		//(argument+=NavigatingSemiArgCS argument+=NavigatingCommaArgCS*)? (argument+=NavigatingBarArgCS
		//argument+=NavigatingCommaArgCS*)?)? ')')?
		public Group getGroup() { return cGroup; }
		
		//NavigatingExpCS_Base
		public RuleCall getNavigatingExpCS_BaseParserRuleCall_0() { return cNavigatingExpCS_BaseParserRuleCall_0; }
		
		//({NavigatingExpCS.namedExp=current} '(' (argument+=NavigatingArgCS argument+=NavigatingCommaArgCS*
		//(argument+=NavigatingSemiArgCS argument+=NavigatingCommaArgCS*)? (argument+=NavigatingBarArgCS
		//argument+=NavigatingCommaArgCS*)?)? ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//{NavigatingExpCS.namedExp=current}
		public Action getNavigatingExpCSNamedExpAction_1_0() { return cNavigatingExpCSNamedExpAction_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//(argument+=NavigatingArgCS argument+=NavigatingCommaArgCS* (argument+=NavigatingSemiArgCS
		//argument+=NavigatingCommaArgCS*)? (argument+=NavigatingBarArgCS argument+=NavigatingCommaArgCS*)?)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//argument+=NavigatingArgCS
		public Assignment getArgumentAssignment_1_2_0() { return cArgumentAssignment_1_2_0; }
		
		//NavigatingArgCS
		public RuleCall getArgumentNavigatingArgCSParserRuleCall_1_2_0_0() { return cArgumentNavigatingArgCSParserRuleCall_1_2_0_0; }
		
		//argument+=NavigatingCommaArgCS*
		public Assignment getArgumentAssignment_1_2_1() { return cArgumentAssignment_1_2_1; }
		
		//NavigatingCommaArgCS
		public RuleCall getArgumentNavigatingCommaArgCSParserRuleCall_1_2_1_0() { return cArgumentNavigatingCommaArgCSParserRuleCall_1_2_1_0; }
		
		//(argument+=NavigatingSemiArgCS argument+=NavigatingCommaArgCS*)?
		public Group getGroup_1_2_2() { return cGroup_1_2_2; }
		
		//argument+=NavigatingSemiArgCS
		public Assignment getArgumentAssignment_1_2_2_0() { return cArgumentAssignment_1_2_2_0; }
		
		//NavigatingSemiArgCS
		public RuleCall getArgumentNavigatingSemiArgCSParserRuleCall_1_2_2_0_0() { return cArgumentNavigatingSemiArgCSParserRuleCall_1_2_2_0_0; }
		
		//argument+=NavigatingCommaArgCS*
		public Assignment getArgumentAssignment_1_2_2_1() { return cArgumentAssignment_1_2_2_1; }
		
		//NavigatingCommaArgCS
		public RuleCall getArgumentNavigatingCommaArgCSParserRuleCall_1_2_2_1_0() { return cArgumentNavigatingCommaArgCSParserRuleCall_1_2_2_1_0; }
		
		//(argument+=NavigatingBarArgCS argument+=NavigatingCommaArgCS*)?
		public Group getGroup_1_2_3() { return cGroup_1_2_3; }
		
		//argument+=NavigatingBarArgCS
		public Assignment getArgumentAssignment_1_2_3_0() { return cArgumentAssignment_1_2_3_0; }
		
		//NavigatingBarArgCS
		public RuleCall getArgumentNavigatingBarArgCSParserRuleCall_1_2_3_0_0() { return cArgumentNavigatingBarArgCSParserRuleCall_1_2_3_0_0; }
		
		//argument+=NavigatingCommaArgCS*
		public Assignment getArgumentAssignment_1_2_3_1() { return cArgumentAssignment_1_2_3_1; }
		
		//NavigatingCommaArgCS
		public RuleCall getArgumentNavigatingCommaArgCSParserRuleCall_1_2_3_1_0() { return cArgumentNavigatingCommaArgCSParserRuleCall_1_2_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	
	
	private final CompleteOCLDocumentCSElements pCompleteOCLDocumentCS;
	private final ClassifierContextDeclCSElements pClassifierContextDeclCS;
	private final TerminalRule tUNQUOTED_STRING;
	private final CompleteOCLNavigationOperatorNameElements pCompleteOCLNavigationOperatorName;
	private final ConstraintCSElements pConstraintCS;
	private final ContextDeclCSElements pContextDeclCS;
	private final DefCSElements pDefCS;
	private final DefOperationCSElements pDefOperationCS;
	private final DefParameterCSElements pDefParameterCS;
	private final DefPropertyCSElements pDefPropertyCS;
	private final ImportCSElements pImportCS;
	private final URIPathNameCSElements pURIPathNameCS;
	private final IdentifierElements pIdentifier;
	private final OperationContextDeclCSElements pOperationContextDeclCS;
	private final PackageDeclarationCSElements pPackageDeclarationCS;
	private final ParameterCSElements pParameterCS;
	private final PropertyContextDeclCSElements pPropertyContextDeclCS;
	private final SpecificationCSElements pSpecificationCS;
	private final PathNameCSElements pPathNameCS;
	private final SimpleNameCSElements pSimpleNameCS;
	private final TemplateSignatureCSElements pTemplateSignatureCS;
	private final TypeParameterCSElements pTypeParameterCS;
	private final TypedRefCSElements pTypedRefCS;
	private final UnrestrictedNameElements pUnrestrictedName;
	private final NavigatingArgExpCSElements pNavigatingArgExpCS;
	private final NavigationOperatorNameElements pNavigationOperatorName;
	private final EssentialOCLNavigationOperatorNameElements pEssentialOCLNavigationOperatorName;
	private final TerminalRule tDOUBLE_QUOTED_STRING;
	private final TerminalRule tSINGLE_QUOTED_STRING;
	private final TerminalRule tML_SINGLE_QUOTED_STRING;
	private final TerminalRule tSIMPLE_ID;
	private final TerminalRule tBIG_INT;
	private final TerminalRule tDOCUMENTATION;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	private final EssentialOCLRersevedKeywordElements pEssentialOCLRersevedKeyword;
	private final EssentialOCLPrefixOperatorElements pEssentialOCLPrefixOperator;
	private final EssentialOCLInfixOperatorElements pEssentialOCLInfixOperator;
	private final EssentialOCLNavigationOperatorElements pEssentialOCLNavigationOperator;
	private final StringLiteralElements pStringLiteral;
	private final PrefixOperatorElements pPrefixOperator;
	private final InfixOperatorElements pInfixOperator;
	private final NavigationOperatorElements pNavigationOperator;
	private final EssentialOCLUnrestrictedNameElements pEssentialOCLUnrestrictedName;
	private final UnrestrictedName2Elements pUnrestrictedName2;
	private final EssentialOCLUnreservedNameElements pEssentialOCLUnreservedName;
	private final UnreservedNameElements pUnreservedName;
	private final PrimitiveTypeIdentifierElements pPrimitiveTypeIdentifier;
	private final PrimitiveTypeCSElements pPrimitiveTypeCS;
	private final CollectionTypeIdentifierElements pCollectionTypeIdentifier;
	private final CollectionTypeCSElements pCollectionTypeCS;
	private final TupleTypeCSElements pTupleTypeCS;
	private final TuplePartCSElements pTuplePartCS;
	private final CollectionLiteralExpCSElements pCollectionLiteralExpCS;
	private final CollectionLiteralPartCSElements pCollectionLiteralPartCS;
	private final PrimitiveLiteralExpCSElements pPrimitiveLiteralExpCS;
	private final TupleLiteralExpCSElements pTupleLiteralExpCS;
	private final TupleLiteralPartCSElements pTupleLiteralPartCS;
	private final NumberLiteralExpCSElements pNumberLiteralExpCS;
	private final StringLiteralExpCSElements pStringLiteralExpCS;
	private final BooleanLiteralExpCSElements pBooleanLiteralExpCS;
	private final UnlimitedNaturalLiteralExpCSElements pUnlimitedNaturalLiteralExpCS;
	private final InvalidLiteralExpCSElements pInvalidLiteralExpCS;
	private final NullLiteralExpCSElements pNullLiteralExpCS;
	private final TypeLiteralCSElements pTypeLiteralCS;
	private final TypeLiteralExpCSElements pTypeLiteralExpCS;
	private final TypeNameExpCSElements pTypeNameExpCS;
	private final TypeExpCSElements pTypeExpCS;
	private final NavigatingArgCSElements pNavigatingArgCS;
	private final NavigatingBarArgCSElements pNavigatingBarArgCS;
	private final NavigatingCommaArgCSElements pNavigatingCommaArgCS;
	private final NavigatingSemiArgCSElements pNavigatingSemiArgCS;
	private final IfExpCSElements pIfExpCS;
	private final LetExpCSElements pLetExpCS;
	private final LetVariableCSElements pLetVariableCS;
	private final NestedExpCSElements pNestedExpCS;
	private final SelfExpCSElements pSelfExpCS;
	private final PrimaryExpCSElements pPrimaryExpCS;
	private final NameExpCSElements pNameExpCS;
	private final ExpCSElements pExpCS;
	private final InfixedExpCSElements pInfixedExpCS;
	private final BinaryOperatorCSElements pBinaryOperatorCS;
	private final InfixOperatorCSElements pInfixOperatorCS;
	private final NavigationOperatorCSElements pNavigationOperatorCS;
	private final PrefixedExpCSElements pPrefixedExpCS;
	private final UnaryOperatorCSElements pUnaryOperatorCS;
	private final IndexExpCSElements pIndexExpCS;
	private final NavigatingExpCS_BaseElements pNavigatingExpCS_Base;
	private final NavigatingExpCSElements pNavigatingExpCS;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyOclGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pCompleteOCLDocumentCS = new CompleteOCLDocumentCSElements();
		this.pClassifierContextDeclCS = new ClassifierContextDeclCSElements();
		this.tUNQUOTED_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.UNQUOTED_STRING");
		this.pCompleteOCLNavigationOperatorName = new CompleteOCLNavigationOperatorNameElements();
		this.pConstraintCS = new ConstraintCSElements();
		this.pContextDeclCS = new ContextDeclCSElements();
		this.pDefCS = new DefCSElements();
		this.pDefOperationCS = new DefOperationCSElements();
		this.pDefParameterCS = new DefParameterCSElements();
		this.pDefPropertyCS = new DefPropertyCSElements();
		this.pImportCS = new ImportCSElements();
		this.pURIPathNameCS = new URIPathNameCSElements();
		this.pIdentifier = new IdentifierElements();
		this.pOperationContextDeclCS = new OperationContextDeclCSElements();
		this.pPackageDeclarationCS = new PackageDeclarationCSElements();
		this.pParameterCS = new ParameterCSElements();
		this.pPropertyContextDeclCS = new PropertyContextDeclCSElements();
		this.pSpecificationCS = new SpecificationCSElements();
		this.pPathNameCS = new PathNameCSElements();
		this.pSimpleNameCS = new SimpleNameCSElements();
		this.pTemplateSignatureCS = new TemplateSignatureCSElements();
		this.pTypeParameterCS = new TypeParameterCSElements();
		this.pTypedRefCS = new TypedRefCSElements();
		this.pUnrestrictedName = new UnrestrictedNameElements();
		this.pNavigatingArgExpCS = new NavigatingArgExpCSElements();
		this.pNavigationOperatorName = new NavigationOperatorNameElements();
		this.pEssentialOCLNavigationOperatorName = new EssentialOCLNavigationOperatorNameElements();
		this.tDOUBLE_QUOTED_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.DOUBLE_QUOTED_STRING");
		this.tSINGLE_QUOTED_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.SINGLE_QUOTED_STRING");
		this.tML_SINGLE_QUOTED_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.ML_SINGLE_QUOTED_STRING");
		this.tSIMPLE_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.SIMPLE_ID");
		this.tBIG_INT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.BIG_INT");
		this.tDOCUMENTATION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.DOCUMENTATION");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyOcl.ANY_OTHER");
		this.pEssentialOCLRersevedKeyword = new EssentialOCLRersevedKeywordElements();
		this.pEssentialOCLPrefixOperator = new EssentialOCLPrefixOperatorElements();
		this.pEssentialOCLInfixOperator = new EssentialOCLInfixOperatorElements();
		this.pEssentialOCLNavigationOperator = new EssentialOCLNavigationOperatorElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pPrefixOperator = new PrefixOperatorElements();
		this.pInfixOperator = new InfixOperatorElements();
		this.pNavigationOperator = new NavigationOperatorElements();
		this.pEssentialOCLUnrestrictedName = new EssentialOCLUnrestrictedNameElements();
		this.pUnrestrictedName2 = new UnrestrictedName2Elements();
		this.pEssentialOCLUnreservedName = new EssentialOCLUnreservedNameElements();
		this.pUnreservedName = new UnreservedNameElements();
		this.pPrimitiveTypeIdentifier = new PrimitiveTypeIdentifierElements();
		this.pPrimitiveTypeCS = new PrimitiveTypeCSElements();
		this.pCollectionTypeIdentifier = new CollectionTypeIdentifierElements();
		this.pCollectionTypeCS = new CollectionTypeCSElements();
		this.pTupleTypeCS = new TupleTypeCSElements();
		this.pTuplePartCS = new TuplePartCSElements();
		this.pCollectionLiteralExpCS = new CollectionLiteralExpCSElements();
		this.pCollectionLiteralPartCS = new CollectionLiteralPartCSElements();
		this.pPrimitiveLiteralExpCS = new PrimitiveLiteralExpCSElements();
		this.pTupleLiteralExpCS = new TupleLiteralExpCSElements();
		this.pTupleLiteralPartCS = new TupleLiteralPartCSElements();
		this.pNumberLiteralExpCS = new NumberLiteralExpCSElements();
		this.pStringLiteralExpCS = new StringLiteralExpCSElements();
		this.pBooleanLiteralExpCS = new BooleanLiteralExpCSElements();
		this.pUnlimitedNaturalLiteralExpCS = new UnlimitedNaturalLiteralExpCSElements();
		this.pInvalidLiteralExpCS = new InvalidLiteralExpCSElements();
		this.pNullLiteralExpCS = new NullLiteralExpCSElements();
		this.pTypeLiteralCS = new TypeLiteralCSElements();
		this.pTypeLiteralExpCS = new TypeLiteralExpCSElements();
		this.pTypeNameExpCS = new TypeNameExpCSElements();
		this.pTypeExpCS = new TypeExpCSElements();
		this.pNavigatingArgCS = new NavigatingArgCSElements();
		this.pNavigatingBarArgCS = new NavigatingBarArgCSElements();
		this.pNavigatingCommaArgCS = new NavigatingCommaArgCSElements();
		this.pNavigatingSemiArgCS = new NavigatingSemiArgCSElements();
		this.pIfExpCS = new IfExpCSElements();
		this.pLetExpCS = new LetExpCSElements();
		this.pLetVariableCS = new LetVariableCSElements();
		this.pNestedExpCS = new NestedExpCSElements();
		this.pSelfExpCS = new SelfExpCSElements();
		this.pPrimaryExpCS = new PrimaryExpCSElements();
		this.pNameExpCS = new NameExpCSElements();
		this.pExpCS = new ExpCSElements();
		this.pInfixedExpCS = new InfixedExpCSElements();
		this.pBinaryOperatorCS = new BinaryOperatorCSElements();
		this.pInfixOperatorCS = new InfixOperatorCSElements();
		this.pNavigationOperatorCS = new NavigationOperatorCSElements();
		this.pPrefixedExpCS = new PrefixedExpCSElements();
		this.pUnaryOperatorCS = new UnaryOperatorCSElements();
		this.pIndexExpCS = new IndexExpCSElements();
		this.pNavigatingExpCS_Base = new NavigatingExpCS_BaseElements();
		this.pNavigatingExpCS = new NavigatingExpCSElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyOcl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//CompleteOCLDocumentCS:
	//	ownedImports+=ImportCS* (ownedPackages+=PackageDeclarationCS | ownedContexts+=ContextDeclCS)*;
	public CompleteOCLDocumentCSElements getCompleteOCLDocumentCSAccess() {
		return pCompleteOCLDocumentCS;
	}
	
	public ParserRule getCompleteOCLDocumentCSRule() {
		return getCompleteOCLDocumentCSAccess().getRule();
	}
	
	//ClassifierContextDeclCS:
	//	'context' ownedSignature=TemplateSignatureCS? selfName=UnrestrictedName?
	//	ownedPathName=pathNameCS ('inv' ownedInvariants+=ConstraintCS | ownedDefinitions+=DefCS)+;
	public ClassifierContextDeclCSElements getClassifierContextDeclCSAccess() {
		return pClassifierContextDeclCS;
	}
	
	public ParserRule getClassifierContextDeclCSRule() {
		return getClassifierContextDeclCSAccess().getRule();
	}
	
	//terminal UNQUOTED_STRING:
	//	'£$%^£$%^';
	public TerminalRule getUNQUOTED_STRINGRule() {
		return tUNQUOTED_STRING;
	}
	
	//CompleteOCLNavigationOperatorName:
	//	'^' | '^^';
	public CompleteOCLNavigationOperatorNameElements getCompleteOCLNavigationOperatorNameAccess() {
		return pCompleteOCLNavigationOperatorName;
	}
	
	public ParserRule getCompleteOCLNavigationOperatorNameRule() {
		return getCompleteOCLNavigationOperatorNameAccess().getRule();
	}
	
	///*
	// * A Constraint such as 
	// * 
	// * oclText[IsNull('should be null') : self = null]
	// * 
	// * comprises at least the OCL specification of the constraint. The constraint may
	// * additionally have a name which may be followed by a parenthesized expression defining an OCL
	// * expression to be evaluated to provide an error message.
	// */ ConstraintCS:
	//	(name=UnrestrictedName ('(' ownedMessageSpecification=SpecificationCS ')')?)? ':' ownedSpecification=SpecificationCS;
	public ConstraintCSElements getConstraintCSAccess() {
		return pConstraintCS;
	}
	
	public ParserRule getConstraintCSRule() {
		return getConstraintCSAccess().getRule();
	}
	
	///*
	// * A Context declaration can be a Classifier, Operation of Property Context declaration.
	// */ ContextDeclCS:
	//	PropertyContextDeclCS
	//	| ClassifierContextDeclCS
	//	| OperationContextDeclCS;
	public ContextDeclCSElements getContextDeclCSAccess() {
		return pContextDeclCS;
	}
	
	public ParserRule getContextDeclCSRule() {
		return getContextDeclCSAccess().getRule();
	}
	
	///*
	// * A definition can be an, Operation or Property definition.
	// */ DefCS:
	//	DefOperationCS | DefPropertyCS;
	public DefCSElements getDefCSAccess() {
		return pDefCS;
	}
	
	public ParserRule getDefCSRule() {
		return getDefCSAccess().getRule();
	}
	
	///*
	// * An operation definition provides an additional operation for its classifier context.
	// * 
	// * oclText[static def redundantName: isEven(i : Integer) : Boolean = i mod 2 = 0]
	// * 
	// * comprises at least an operation name, return type and an OCL expression that evaluates the operation value.
	// * The operation may have parameters and may be declared static in which case there is no oclText[self].
	// * 
	// * For compatibility with invariants the definition may have a name that is never used.
	// */ DefOperationCS:
	//	isStatic?='static'? 'def' UnrestrictedName? ':' ownedSignature=TemplateSignatureCS?
	//	name=UnrestrictedName '(' (ownedParameters+=DefParameterCS (',' ownedParameters+=DefParameterCS)*)? ')' ':'
	//	ownedType=TypeExpCS?
	//	'=' ownedSpecification=SpecificationCS;
	public DefOperationCSElements getDefOperationCSAccess() {
		return pDefOperationCS;
	}
	
	public ParserRule getDefOperationCSRule() {
		return getDefOperationCSAccess().getRule();
	}
	
	//DefParameterCS:
	//	name=UnrestrictedName ':' ownedType=TypeExpCS;
	public DefParameterCSElements getDefParameterCSAccess() {
		return pDefParameterCS;
	}
	
	public ParserRule getDefParameterCSRule() {
		return getDefParameterCSAccess().getRule();
	}
	
	///*
	// * A property definition provides an additional property for its classifier context.
	// * 
	// * oclText[static def redundantName: upperCaseName : Boolean = name.toUpperCase()]
	// * 
	// * comprises at least a property name, type and an OCL expression that evaluates the property value.
	// * The property may be declared static in which case there is no oclText[self].
	// * 
	// * For compatibility with invariants the definition may have a name that is never used.
	// */ DefPropertyCS:
	//	isStatic?='static'? 'def' UnrestrictedName? ':' name=UnrestrictedName ':' ownedType=TypeExpCS
	//	'=' ownedSpecification=SpecificationCS;
	public DefPropertyCSElements getDefPropertyCSAccess() {
		return pDefPropertyCS;
	}
	
	public ParserRule getDefPropertyCSRule() {
		return getDefPropertyCSAccess().getRule();
	}
	
	//ImportCS:
	//	('import' | 'include' | 'library') (name=Identifier ':')? ownedPathName=URIPathNameCS isAll?='::*'?;
	public ImportCSElements getImportCSAccess() {
		return pImportCS;
	}
	
	public ParserRule getImportCSRule() {
		return getImportCSAccess().getRule();
	}
	
	//URIPathNameCS:
	//	pathNameCS;
	public URIPathNameCSElements getURIPathNameCSAccess() {
		return pURIPathNameCS;
	}
	
	public ParserRule getURIPathNameCSRule() {
		return getURIPathNameCSAccess().getRule();
	}
	
	//Identifier:
	//	SIMPLE_ID;
	public IdentifierElements getIdentifierAccess() {
		return pIdentifier;
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}
	
	///*
	// * An operation context declaration complements an existing operation with additional details.
	// * 
	// * oclText[context (T) Stack::pop() : T]
	// * oclText[pre NotEmptyPop: size() > 0]
	// * oclText[post: size()@pre = size() + 1]
	// * 
	// * The operation declaration comprises at least an operation name, which must be qualified with at least a
	// * class name. If used outside a package declaration, package name qualification is also needed. 
	// * If the return type is omitted OclVoid is used.
	// * The operation may also have operation parameters and template parameters.
	// * The declaration may be followed by any number of preconditions,
	// * and/or postconditions. It may also be followed by a body expression that defines the evaluation. 
	// * 
	// * For compatibility with invariants the body expression may have a name that is never used.
	// */ OperationContextDeclCS:
	//	'context' ownedSignature=TemplateSignatureCS? ownedPathName=pathNameCS
	//	'(' (ownedParameters+=ParameterCS (',' ownedParameters+=ParameterCS)*)? ')' ':' ownedType=TypeExpCS? ('pre'
	//	ownedPreconditions+=ConstraintCS | 'post' ownedPostconditions+=ConstraintCS | 'body' UnrestrictedName? ':'
	//	ownedBodies+=SpecificationCS)*;
	public OperationContextDeclCSElements getOperationContextDeclCSAccess() {
		return pOperationContextDeclCS;
	}
	
	public ParserRule getOperationContextDeclCSRule() {
		return getOperationContextDeclCSAccess().getRule();
	}
	
	//PackageDeclarationCS:
	//	'package' ownedPathName=pathNameCS ('inv' ownedInvariants+=ConstraintCS)* ownedContexts+=ContextDeclCS* 'endpackage';
	public PackageDeclarationCSElements getPackageDeclarationCSAccess() {
		return pPackageDeclarationCS;
	}
	
	public ParserRule getPackageDeclarationCSRule() {
		return getPackageDeclarationCSAccess().getRule();
	}
	
	//ParameterCS:
	//	(name=UnrestrictedName ':')? ownedType=TypeExpCS;
	public ParameterCSElements getParameterCSAccess() {
		return pParameterCS;
	}
	
	public ParserRule getParameterCSRule() {
		return getParameterCSAccess().getRule();
	}
	
	///*
	// * A property context declaration complements an existing property with additional details.
	// * 
	// * oclText[context (T) Stack::isEmpty : Boolean]
	// * oclText[derive IsEmpty: size() = 0]
	// * 
	// * The property declaration comprises at least a property name and type.
	// * The type must be qualified with at least a class name.
	// * If used outside a package declaration, package name qualification is also needed. 
	// * The declaration may be followed by a derive constraint and/or an init expression.
	// * 
	// * A derive constraint provides an alternate mechanism for defining a class invariant;
	// * the only difference is that the property is identified as a constrainedElement. As an
	// * invariant the constraint provides an OCL expression that should always be true.
	// * 
	// * For a non-derived property, an init expression defines the value to be assigned to the property
	// * when its containing object is first created. 
	// * 
	// * For a derived property, an init expression defines the evaluation of the property, which
	// * may vary from access to access even for read-only properties. 
	// */ PropertyContextDeclCS:
	//	'context' ownedPathName=pathNameCS ':' ownedType=TypeExpCS ('derive' ownedDerivedInvariants+=ConstraintCS | 'init'
	//	':' ownedDefaultExpressions+=SpecificationCS)*;
	public PropertyContextDeclCSElements getPropertyContextDeclCSAccess() {
		return pPropertyContextDeclCS;
	}
	
	public ParserRule getPropertyContextDeclCSRule() {
		return getPropertyContextDeclCSAccess().getRule();
	}
	
	//SpecificationCS:
	//	ownedExpression=ExpCS | exprString=UNQUOTED_STRING;
	public SpecificationCSElements getSpecificationCSAccess() {
		return pSpecificationCS;
	}
	
	public ParserRule getSpecificationCSRule() {
		return getSpecificationCSAccess().getRule();
	}
	
	//pathNameCS:
	//	name=simpleNameCS "::" UnrestrictedName2;
	public PathNameCSElements getPathNameCSAccess() {
		return pPathNameCS;
	}
	
	public ParserRule getPathNameCSRule() {
		return getPathNameCSAccess().getRule();
	}
	
	//simpleNameCS:
	//	SIMPLE_ID;
	public SimpleNameCSElements getSimpleNameCSAccess() {
		return pSimpleNameCS;
	}
	
	public ParserRule getSimpleNameCSRule() {
		return getSimpleNameCSAccess().getRule();
	}
	
	////---------------------------------------------------------------------------------
	////	Base overrides
	////---------------------------------------------------------------------------------
	//TemplateSignatureCS:
	//	'(' ownedParameters+=TypeParameterCS (',' ownedParameters+=TypeParameterCS)* ')' | '<'
	//	ownedParameters+=TypeParameterCS (',' ownedParameters+=TypeParameterCS)* '>';
	public TemplateSignatureCSElements getTemplateSignatureCSAccess() {
		return pTemplateSignatureCS;
	}
	
	public ParserRule getTemplateSignatureCSRule() {
		return getTemplateSignatureCSAccess().getRule();
	}
	
	//TypeParameterCS:
	//	PrimitiveTypeCS;
	public TypeParameterCSElements getTypeParameterCSAccess() {
		return pTypeParameterCS;
	}
	
	public ParserRule getTypeParameterCSRule() {
		return getTypeParameterCSAccess().getRule();
	}
	
	//TypedRefCS:
	//	TypeLiteralCS //| TypedTypeRefCS
	//;
	public TypedRefCSElements getTypedRefCSAccess() {
		return pTypedRefCS;
	}
	
	public ParserRule getTypedRefCSRule() {
		return getTypedRefCSAccess().getRule();
	}
	
	//UnrestrictedName:
	//	EssentialOCLUnrestrictedName
	//	//| 'body'
	//	//| 'context'
	//	//| 'def'
	//	//| 'derive'
	//	//|	'endpackage'
	//	| 'import'
	//	| 'include'
	//	//| 'init'
	//	//| 'inv'
	//	| 'library'
	//	//|	'package'
	//	//|	'post'
	//	//|	'pre'
	//	//|	'static'
	//;
	public UnrestrictedNameElements getUnrestrictedNameAccess() {
		return pUnrestrictedName;
	}
	
	public ParserRule getUnrestrictedNameRule() {
		return getUnrestrictedNameAccess().getRule();
	}
	
	////---------------------------------------------------------------------------------
	////	EssentialOCL overrides
	////---------------------------------------------------------------------------------
	//NavigatingArgExpCS:
	//	{OCLMessageArgCS} '?' | ExpCS;
	public NavigatingArgExpCSElements getNavigatingArgExpCSAccess() {
		return pNavigatingArgExpCS;
	}
	
	public ParserRule getNavigatingArgExpCSRule() {
		return getNavigatingArgExpCSAccess().getRule();
	}
	
	//NavigationOperatorName:
	//	EssentialOCLNavigationOperatorName | CompleteOCLNavigationOperatorName;
	public NavigationOperatorNameElements getNavigationOperatorNameAccess() {
		return pNavigationOperatorName;
	}
	
	public ParserRule getNavigationOperatorNameRule() {
		return getNavigationOperatorNameAccess().getRule();
	}
	
	//EssentialOCLNavigationOperatorName:
	//	EssentialOCLNavigationOperator;
	public EssentialOCLNavigationOperatorNameElements getEssentialOCLNavigationOperatorNameAccess() {
		return pEssentialOCLNavigationOperatorName;
	}
	
	public ParserRule getEssentialOCLNavigationOperatorNameRule() {
		return getEssentialOCLNavigationOperatorNameAccess().getRule();
	}
	
	//terminal DOUBLE_QUOTED_STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'"
	//	| '\\') | !('\\' | '"'))* '"';
	public TerminalRule getDOUBLE_QUOTED_STRINGRule() {
		return tDOUBLE_QUOTED_STRING;
	}
	
	//terminal SINGLE_QUOTED_STRING:
	//	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'"
	//	| '\\') | !('\\' | "'"))* "'";
	public TerminalRule getSINGLE_QUOTED_STRINGRule() {
		return tSINGLE_QUOTED_STRING;
	}
	
	//terminal ML_SINGLE_QUOTED_STRING:
	//	"/'"->"'/";
	public TerminalRule getML_SINGLE_QUOTED_STRINGRule() {
		return tML_SINGLE_QUOTED_STRING;
	}
	
	//terminal SIMPLE_ID:
	//	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getSIMPLE_IDRule() {
		return tSIMPLE_ID;
	}
	
	//terminal BIG_INT:
	//	'0'..'9'+;
	public TerminalRule getBIG_INTRule() {
		return tBIG_INT;
	}
	
	//terminal DOCUMENTATION:
	//	'/**'->'*/';
	public TerminalRule getDOCUMENTATIONRule() {
		return tDOCUMENTATION;
	}
	
	//@ Override terminal ML_COMMENT:
	//	'/*' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//@ Override terminal SL_COMMENT:
	//	'--' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//@ Override terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//@ Override terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
	
	//EssentialOCLRersevedKeyword:
	//	'and' | 'else' | 'endif' | 'if' | 'implies' | 'in' | 'let'
	//	| 'not' | 'or' | 'then' | 'xor';
	public EssentialOCLRersevedKeywordElements getEssentialOCLRersevedKeywordAccess() {
		return pEssentialOCLRersevedKeyword;
	}
	
	public ParserRule getEssentialOCLRersevedKeywordRule() {
		return getEssentialOCLRersevedKeywordAccess().getRule();
	}
	
	//EssentialOCLPrefixOperator:
	//	'-' | 'not';
	public EssentialOCLPrefixOperatorElements getEssentialOCLPrefixOperatorAccess() {
		return pEssentialOCLPrefixOperator;
	}
	
	public ParserRule getEssentialOCLPrefixOperatorRule() {
		return getEssentialOCLPrefixOperatorAccess().getRule();
	}
	
	//EssentialOCLInfixOperator:
	//	'*' | '/' | '+' | '-' | '>' | '<' | '>=' | '<=' | '=' | '<>' | 'and'
	//	| 'or' | 'xor' | 'implies';
	public EssentialOCLInfixOperatorElements getEssentialOCLInfixOperatorAccess() {
		return pEssentialOCLInfixOperator;
	}
	
	public ParserRule getEssentialOCLInfixOperatorRule() {
		return getEssentialOCLInfixOperatorAccess().getRule();
	}
	
	//EssentialOCLNavigationOperator:
	//	'.' | '->';
	public EssentialOCLNavigationOperatorElements getEssentialOCLNavigationOperatorAccess() {
		return pEssentialOCLNavigationOperator;
	}
	
	public ParserRule getEssentialOCLNavigationOperatorRule() {
		return getEssentialOCLNavigationOperatorAccess().getRule();
	}
	
	//StringLiteral:
	//	SINGLE_QUOTED_STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	//PrefixOperator:
	//	EssentialOCLPrefixOperator;
	public PrefixOperatorElements getPrefixOperatorAccess() {
		return pPrefixOperator;
	}
	
	public ParserRule getPrefixOperatorRule() {
		return getPrefixOperatorAccess().getRule();
	}
	
	//InfixOperator:
	//	EssentialOCLInfixOperator;
	public InfixOperatorElements getInfixOperatorAccess() {
		return pInfixOperator;
	}
	
	public ParserRule getInfixOperatorRule() {
		return getInfixOperatorAccess().getRule();
	}
	
	//NavigationOperator:
	//	EssentialOCLNavigationOperator;
	public NavigationOperatorElements getNavigationOperatorAccess() {
		return pNavigationOperator;
	}
	
	public ParserRule getNavigationOperatorRule() {
		return getNavigationOperatorAccess().getRule();
	}
	
	//EssentialOCLUnrestrictedName:
	//	SIMPLE_ID;
	public EssentialOCLUnrestrictedNameElements getEssentialOCLUnrestrictedNameAccess() {
		return pEssentialOCLUnrestrictedName;
	}
	
	public ParserRule getEssentialOCLUnrestrictedNameRule() {
		return getEssentialOCLUnrestrictedNameAccess().getRule();
	}
	
	//UnrestrictedName2:
	//	EssentialOCLUnrestrictedName;
	public UnrestrictedName2Elements getUnrestrictedName2Access() {
		return pUnrestrictedName2;
	}
	
	public ParserRule getUnrestrictedName2Rule() {
		return getUnrestrictedName2Access().getRule();
	}
	
	//EssentialOCLUnreservedName:
	//	UnrestrictedName | CollectionTypeIdentifier | PrimitiveTypeIdentifier | 'Tuple';
	public EssentialOCLUnreservedNameElements getEssentialOCLUnreservedNameAccess() {
		return pEssentialOCLUnreservedName;
	}
	
	public ParserRule getEssentialOCLUnreservedNameRule() {
		return getEssentialOCLUnreservedNameAccess().getRule();
	}
	
	//UnreservedName:
	//	EssentialOCLUnreservedName;
	public UnreservedNameElements getUnreservedNameAccess() {
		return pUnreservedName;
	}
	
	public ParserRule getUnreservedNameRule() {
		return getUnreservedNameAccess().getRule();
	}
	
	//PrimitiveTypeIdentifier:
	//	'Boolean' | 'Integer' | 'Real' | 'String' | 'UnlimitedNatural' | 'OclAny'
	//	| 'OclInvalid' | 'OclVoid';
	public PrimitiveTypeIdentifierElements getPrimitiveTypeIdentifierAccess() {
		return pPrimitiveTypeIdentifier;
	}
	
	public ParserRule getPrimitiveTypeIdentifierRule() {
		return getPrimitiveTypeIdentifierAccess().getRule();
	}
	
	//PrimitiveTypeCS:
	//	name=PrimitiveTypeIdentifier;
	public PrimitiveTypeCSElements getPrimitiveTypeCSAccess() {
		return pPrimitiveTypeCS;
	}
	
	public ParserRule getPrimitiveTypeCSRule() {
		return getPrimitiveTypeCSAccess().getRule();
	}
	
	//CollectionTypeIdentifier:
	//	'Set' | 'Bag' | 'Sequence' | 'Collection' | 'OrderedSet';
	public CollectionTypeIdentifierElements getCollectionTypeIdentifierAccess() {
		return pCollectionTypeIdentifier;
	}
	
	public ParserRule getCollectionTypeIdentifierRule() {
		return getCollectionTypeIdentifierAccess().getRule();
	}
	
	//CollectionTypeCS:
	//	name=CollectionTypeIdentifier ('(' ownedType=TypeExpCS ')' | '<' ownedType=TypeExpCS '>')?;
	public CollectionTypeCSElements getCollectionTypeCSAccess() {
		return pCollectionTypeCS;
	}
	
	public ParserRule getCollectionTypeCSRule() {
		return getCollectionTypeCSAccess().getRule();
	}
	
	//TupleTypeCS:
	//	name='Tuple' ('(' (ownedParts+=tuplePartCS (',' ownedParts+=tuplePartCS)*)? ')' | '<' (ownedParts+=tuplePartCS (','
	//	ownedParts+=tuplePartCS)*)? '>')?
	//	backtrack="true";
	public TupleTypeCSElements getTupleTypeCSAccess() {
		return pTupleTypeCS;
	}
	
	public ParserRule getTupleTypeCSRule() {
		return getTupleTypeCSAccess().getRule();
	}
	
	//tuplePartCS:
	//	name=UnrestrictedName ':' ownedType=TypeExpCS;
	public TuplePartCSElements getTuplePartCSAccess() {
		return pTuplePartCS;
	}
	
	public ParserRule getTuplePartCSRule() {
		return getTuplePartCSAccess().getRule();
	}
	
	//CollectionLiteralExpCS:
	//	ownedType=CollectionTypeCS
	//	'{' (ownedParts+=CollectionLiteralPartCS (',' ownedParts+=CollectionLiteralPartCS)*)? '}';
	public CollectionLiteralExpCSElements getCollectionLiteralExpCSAccess() {
		return pCollectionLiteralExpCS;
	}
	
	public ParserRule getCollectionLiteralExpCSRule() {
		return getCollectionLiteralExpCSAccess().getRule();
	}
	
	//CollectionLiteralPartCS:
	//	expressionCS=ExpCS ('..' lastExpressionCS=ExpCS)?;
	public CollectionLiteralPartCSElements getCollectionLiteralPartCSAccess() {
		return pCollectionLiteralPartCS;
	}
	
	public ParserRule getCollectionLiteralPartCSRule() {
		return getCollectionLiteralPartCSAccess().getRule();
	}
	
	//PrimitiveLiteralExpCS:
	//	NumberLiteralExpCS | StringLiteralExpCS | BooleanLiteralExpCS
	//	| UnlimitedNaturalLiteralExpCS | InvalidLiteralExpCS | NullLiteralExpCS;
	public PrimitiveLiteralExpCSElements getPrimitiveLiteralExpCSAccess() {
		return pPrimitiveLiteralExpCS;
	}
	
	public ParserRule getPrimitiveLiteralExpCSRule() {
		return getPrimitiveLiteralExpCSAccess().getRule();
	}
	
	//TupleLiteralExpCS:
	//	'Tuple' '{' ownedParts+=TupleLiteralPartCS (','
	//	ownedParts+=TupleLiteralPartCS)* '}';
	public TupleLiteralExpCSElements getTupleLiteralExpCSAccess() {
		return pTupleLiteralExpCS;
	}
	
	public ParserRule getTupleLiteralExpCSRule() {
		return getTupleLiteralExpCSAccess().getRule();
	}
	
	//TupleLiteralPartCS:
	//	name=UnrestrictedName (':' ownedType=TypeExpCS)? '='
	//	initExpression=ExpCS;
	public TupleLiteralPartCSElements getTupleLiteralPartCSAccess() {
		return pTupleLiteralPartCS;
	}
	
	public ParserRule getTupleLiteralPartCSRule() {
		return getTupleLiteralPartCSAccess().getRule();
	}
	
	//NumberLiteralExpCS:
	//	name=BIG_INT;
	public NumberLiteralExpCSElements getNumberLiteralExpCSAccess() {
		return pNumberLiteralExpCS;
	}
	
	public ParserRule getNumberLiteralExpCSRule() {
		return getNumberLiteralExpCSAccess().getRule();
	}
	
	//StringLiteralExpCS:
	//	name+=StringLiteral;
	public StringLiteralExpCSElements getStringLiteralExpCSAccess() {
		return pStringLiteralExpCS;
	}
	
	public ParserRule getStringLiteralExpCSRule() {
		return getStringLiteralExpCSAccess().getRule();
	}
	
	//BooleanLiteralExpCS:
	//	name='true' | name='false';
	public BooleanLiteralExpCSElements getBooleanLiteralExpCSAccess() {
		return pBooleanLiteralExpCS;
	}
	
	public ParserRule getBooleanLiteralExpCSRule() {
		return getBooleanLiteralExpCSAccess().getRule();
	}
	
	//UnlimitedNaturalLiteralExpCS:
	//	{UnlimitedNaturalLiteralExpCS} '*';
	public UnlimitedNaturalLiteralExpCSElements getUnlimitedNaturalLiteralExpCSAccess() {
		return pUnlimitedNaturalLiteralExpCS;
	}
	
	public ParserRule getUnlimitedNaturalLiteralExpCSRule() {
		return getUnlimitedNaturalLiteralExpCSAccess().getRule();
	}
	
	//InvalidLiteralExpCS:
	//	{InvalidLiteralExpCS} 'invalid';
	public InvalidLiteralExpCSElements getInvalidLiteralExpCSAccess() {
		return pInvalidLiteralExpCS;
	}
	
	public ParserRule getInvalidLiteralExpCSRule() {
		return getInvalidLiteralExpCSAccess().getRule();
	}
	
	//NullLiteralExpCS:
	//	{NullLiteralExpCS} 'null';
	public NullLiteralExpCSElements getNullLiteralExpCSAccess() {
		return pNullLiteralExpCS;
	}
	
	public ParserRule getNullLiteralExpCSRule() {
		return getNullLiteralExpCSAccess().getRule();
	}
	
	//TypeLiteralCS:
	//	PrimitiveTypeCS | TupleTypeCS | CollectionTypeCS;
	public TypeLiteralCSElements getTypeLiteralCSAccess() {
		return pTypeLiteralCS;
	}
	
	public ParserRule getTypeLiteralCSRule() {
		return getTypeLiteralCSAccess().getRule();
	}
	
	//TypeLiteralExpCS:
	//	ownedType=TypeLiteralCS;
	public TypeLiteralExpCSElements getTypeLiteralExpCSAccess() {
		return pTypeLiteralExpCS;
	}
	
	public ParserRule getTypeLiteralExpCSRule() {
		return getTypeLiteralExpCSAccess().getRule();
	}
	
	//TypeNameExpCS:
	//	(namespace+=UnrestrictedName '::' (namespace+=UnreservedName '::')*) element=UnreservedName |
	//	element=UnrestrictedName;
	public TypeNameExpCSElements getTypeNameExpCSAccess() {
		return pTypeNameExpCS;
	}
	
	public ParserRule getTypeNameExpCSRule() {
		return getTypeNameExpCSAccess().getRule();
	}
	
	//TypeExpCS:
	//	TypeNameExpCS | TypeLiteralCS;
	public TypeExpCSElements getTypeExpCSAccess() {
		return pTypeExpCS;
	}
	
	public ParserRule getTypeExpCSRule() {
		return getTypeExpCSAccess().getRule();
	}
	
	//NavigatingArgCS:
	//	name=NavigatingArgExpCS (':' ownedType=TypeExpCS)? ('=' init=ExpCS)?;
	public NavigatingArgCSElements getNavigatingArgCSAccess() {
		return pNavigatingArgCS;
	}
	
	public ParserRule getNavigatingArgCSRule() {
		return getNavigatingArgCSAccess().getRule();
	}
	
	//NavigatingBarArgCS:
	//	prefix='|' name=NavigatingArgExpCS (':' ownedType=TypeExpCS)? ('=' init=ExpCS)?;
	public NavigatingBarArgCSElements getNavigatingBarArgCSAccess() {
		return pNavigatingBarArgCS;
	}
	
	public ParserRule getNavigatingBarArgCSRule() {
		return getNavigatingBarArgCSAccess().getRule();
	}
	
	//NavigatingCommaArgCS:
	//	prefix=',' name=NavigatingArgExpCS (':' ownedType=TypeExpCS)? ('=' init=ExpCS)?;
	public NavigatingCommaArgCSElements getNavigatingCommaArgCSAccess() {
		return pNavigatingCommaArgCS;
	}
	
	public ParserRule getNavigatingCommaArgCSRule() {
		return getNavigatingCommaArgCSAccess().getRule();
	}
	
	//NavigatingSemiArgCS:
	//	prefix=';' name=NavigatingArgExpCS (':' ownedType=TypeExpCS)? ('=' init=ExpCS)?;
	public NavigatingSemiArgCSElements getNavigatingSemiArgCSAccess() {
		return pNavigatingSemiArgCS;
	}
	
	public ParserRule getNavigatingSemiArgCSRule() {
		return getNavigatingSemiArgCSAccess().getRule();
	}
	
	//IfExpCS:
	//	'if' condition=ExpCS
	//	'then' thenExpression=ExpCS
	//	'else' elseExpression=ExpCS
	//	'endif';
	public IfExpCSElements getIfExpCSAccess() {
		return pIfExpCS;
	}
	
	public ParserRule getIfExpCSRule() {
		return getIfExpCSAccess().getRule();
	}
	
	//LetExpCS:
	//	'let' variable+=LetVariableCS (',' variable+=LetVariableCS)*
	//	'in' in=ExpCS;
	public LetExpCSElements getLetExpCSAccess() {
		return pLetExpCS;
	}
	
	public ParserRule getLetExpCSRule() {
		return getLetExpCSAccess().getRule();
	}
	
	//LetVariableCS:
	//	name=UnrestrictedName (':' ownedType=TypeExpCS)? '='
	//	initExpression=ExpCS;
	public LetVariableCSElements getLetVariableCSAccess() {
		return pLetVariableCS;
	}
	
	public ParserRule getLetVariableCSRule() {
		return getLetVariableCSAccess().getRule();
	}
	
	//NestedExpCS:
	//	'(' source=ExpCS ')';
	public NestedExpCSElements getNestedExpCSAccess() {
		return pNestedExpCS;
	}
	
	public ParserRule getNestedExpCSRule() {
		return getNestedExpCSAccess().getRule();
	}
	
	//SelfExpCS:
	//	{SelfExpCS} 'self';
	public SelfExpCSElements getSelfExpCSAccess() {
		return pSelfExpCS;
	}
	
	public ParserRule getSelfExpCSRule() {
		return getSelfExpCSAccess().getRule();
	}
	
	//PrimaryExpCS:
	//	NavigatingExpCS | SelfExpCS | PrimitiveLiteralExpCS | TupleLiteralExpCS | CollectionLiteralExpCS | LetExpCS | IfExpCS
	//	| NestedExpCS;
	public PrimaryExpCSElements getPrimaryExpCSAccess() {
		return pPrimaryExpCS;
	}
	
	public ParserRule getPrimaryExpCSRule() {
		return getPrimaryExpCSAccess().getRule();
	}
	
	//NameExpCS:
	//	(namespace+=UnrestrictedName '::' (namespace+=UnreservedName '::')*) element=UnreservedName |
	//	element=UnrestrictedName;
	public NameExpCSElements getNameExpCSAccess() {
		return pNameExpCS;
	}
	
	public ParserRule getNameExpCSRule() {
		return getNameExpCSAccess().getRule();
	}
	
	//ExpCS:
	//	InfixedExpCS;
	public ExpCSElements getExpCSAccess() {
		return pExpCS;
	}
	
	public ParserRule getExpCSRule() {
		return getExpCSAccess().getRule();
	}
	
	//InfixedExpCS:
	//	PrefixedExpCS ({InfixExpCS.ownedExpression+=current} (ownedOperator+=BinaryOperatorCS
	//	ownedExpression+=PrefixedExpCS)+)?;
	public InfixedExpCSElements getInfixedExpCSAccess() {
		return pInfixedExpCS;
	}
	
	public ParserRule getInfixedExpCSRule() {
		return getInfixedExpCSAccess().getRule();
	}
	
	//BinaryOperatorCS:
	//	InfixOperatorCS | NavigationOperatorCS;
	public BinaryOperatorCSElements getBinaryOperatorCSAccess() {
		return pBinaryOperatorCS;
	}
	
	public ParserRule getBinaryOperatorCSRule() {
		return getBinaryOperatorCSAccess().getRule();
	}
	
	//InfixOperatorCS:
	//	name=InfixOperator;
	public InfixOperatorCSElements getInfixOperatorCSAccess() {
		return pInfixOperatorCS;
	}
	
	public ParserRule getInfixOperatorCSRule() {
		return getInfixOperatorCSAccess().getRule();
	}
	
	//NavigationOperatorCS:
	//	name=NavigationOperator;
	public NavigationOperatorCSElements getNavigationOperatorCSAccess() {
		return pNavigationOperatorCS;
	}
	
	public ParserRule getNavigationOperatorCSRule() {
		return getNavigationOperatorCSAccess().getRule();
	}
	
	//PrefixedExpCS:
	//	PrimaryExpCS | {PrefixExpCS} ownedOperator+=UnaryOperatorCS+
	//	ownedExpression=PrimaryExpCS;
	public PrefixedExpCSElements getPrefixedExpCSAccess() {
		return pPrefixedExpCS;
	}
	
	public ParserRule getPrefixedExpCSRule() {
		return getPrefixedExpCSAccess().getRule();
	}
	
	//UnaryOperatorCS:
	//	name=PrefixOperator;
	public UnaryOperatorCSElements getUnaryOperatorCSAccess() {
		return pUnaryOperatorCS;
	}
	
	public ParserRule getUnaryOperatorCSRule() {
		return getUnaryOperatorCSAccess().getRule();
	}
	
	//IndexExpCS:
	//	NameExpCS ({IndexExpCS.namedExp=current}
	//	'[' firstIndexes+=ExpCS (',' firstIndexes+=ExpCS)* ']' ('[' secondIndexes+=ExpCS (',' secondIndexes+=ExpCS)* ']')?)?;
	public IndexExpCSElements getIndexExpCSAccess() {
		return pIndexExpCS;
	}
	
	public ParserRule getIndexExpCSRule() {
		return getIndexExpCSAccess().getRule();
	}
	
	//NavigatingExpCS_Base:
	//	IndexExpCS;
	public NavigatingExpCS_BaseElements getNavigatingExpCS_BaseAccess() {
		return pNavigatingExpCS_Base;
	}
	
	public ParserRule getNavigatingExpCS_BaseRule() {
		return getNavigatingExpCS_BaseAccess().getRule();
	}
	
	//NavigatingExpCS:
	//	NavigatingExpCS_Base ({NavigatingExpCS.namedExp=current}
	//	'(' (argument+=NavigatingArgCS argument+=NavigatingCommaArgCS* (argument+=NavigatingSemiArgCS
	//	argument+=NavigatingCommaArgCS*)? (argument+=NavigatingBarArgCS argument+=NavigatingCommaArgCS*)?)? ')')?;
	public NavigatingExpCSElements getNavigatingExpCSAccess() {
		return pNavigatingExpCS;
	}
	
	public ParserRule getNavigatingExpCSRule() {
		return getNavigatingExpCSAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
}
