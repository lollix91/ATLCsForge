/**
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.myOcl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.myOcl.ConstraintCS;
import org.xtext.example.mydsl.myOcl.MyOclPackage;
import org.xtext.example.mydsl.myOcl.PropertyContextDeclCS;
import org.xtext.example.mydsl.myOcl.SpecificationCS;
import org.xtext.example.mydsl.myOcl.TypeExpCS;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Property Context Decl CS</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myOcl.impl.PropertyContextDeclCSImpl#getOwnedType <em>Owned Type</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myOcl.impl.PropertyContextDeclCSImpl#getOwnedDerivedInvariants <em>Owned Derived Invariants</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myOcl.impl.PropertyContextDeclCSImpl#getOwnedDefaultExpressions <em>Owned Default Expressions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PropertyContextDeclCSImpl extends ContextDeclCSImpl implements PropertyContextDeclCS
{
  /**
   * The cached value of the '{@link #getOwnedType() <em>Owned Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOwnedType()
   * @generated
   * @ordered
   */
  protected TypeExpCS ownedType;

  /**
   * The cached value of the '{@link #getOwnedDerivedInvariants() <em>Owned Derived Invariants</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOwnedDerivedInvariants()
   * @generated
   * @ordered
   */
  protected EList<ConstraintCS> ownedDerivedInvariants;

  /**
   * The cached value of the '{@link #getOwnedDefaultExpressions() <em>Owned Default Expressions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOwnedDefaultExpressions()
   * @generated
   * @ordered
   */
  protected EList<SpecificationCS> ownedDefaultExpressions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PropertyContextDeclCSImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyOclPackage.Literals.PROPERTY_CONTEXT_DECL_CS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeExpCS getOwnedType()
  {
    return ownedType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOwnedType(TypeExpCS newOwnedType, NotificationChain msgs)
  {
    TypeExpCS oldOwnedType = ownedType;
    ownedType = newOwnedType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyOclPackage.PROPERTY_CONTEXT_DECL_CS__OWNED_TYPE, oldOwnedType, newOwnedType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOwnedType(TypeExpCS newOwnedType)
  {
    if (newOwnedType != ownedType)
    {
      NotificationChain msgs = null;
      if (ownedType != null)
        msgs = ((InternalEObject)ownedType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyOclPackage.PROPERTY_CONTEXT_DECL_CS__OWNED_TYPE, null, msgs);
      if (newOwnedType != null)
        msgs = ((InternalEObject)newOwnedType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyOclPackage.PROPERTY_CONTEXT_DECL_CS__OWNED_TYPE, null, msgs);
      msgs = basicSetOwnedType(newOwnedType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyOclPackage.PROPERTY_CONTEXT_DECL_CS__OWNED_TYPE, newOwnedType, newOwnedType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ConstraintCS> getOwnedDerivedInvariants()
  {
    if (ownedDerivedInvariants == null)
    {
      ownedDerivedInvariants = new EObjectContainmentEList<ConstraintCS>(ConstraintCS.class, this, MyOclPackage.PROPERTY_CONTEXT_DECL_CS__OWNED_DERIVED_INVARIANTS);
    }
    return ownedDerivedInvariants;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<SpecificationCS> getOwnedDefaultExpressions()
  {
    if (ownedDefaultExpressions == null)
    {
      ownedDefaultExpressions = new EObjectContainmentEList<SpecificationCS>(SpecificationCS.class, this, MyOclPackage.PROPERTY_CONTEXT_DECL_CS__OWNED_DEFAULT_EXPRESSIONS);
    }
    return ownedDefaultExpressions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyOclPackage.PROPERTY_CONTEXT_DECL_CS__OWNED_TYPE:
        return basicSetOwnedType(null, msgs);
      case MyOclPackage.PROPERTY_CONTEXT_DECL_CS__OWNED_DERIVED_INVARIANTS:
        return ((InternalEList<?>)getOwnedDerivedInvariants()).basicRemove(otherEnd, msgs);
      case MyOclPackage.PROPERTY_CONTEXT_DECL_CS__OWNED_DEFAULT_EXPRESSIONS:
        return ((InternalEList<?>)getOwnedDefaultExpressions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyOclPackage.PROPERTY_CONTEXT_DECL_CS__OWNED_TYPE:
        return getOwnedType();
      case MyOclPackage.PROPERTY_CONTEXT_DECL_CS__OWNED_DERIVED_INVARIANTS:
        return getOwnedDerivedInvariants();
      case MyOclPackage.PROPERTY_CONTEXT_DECL_CS__OWNED_DEFAULT_EXPRESSIONS:
        return getOwnedDefaultExpressions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyOclPackage.PROPERTY_CONTEXT_DECL_CS__OWNED_TYPE:
        setOwnedType((TypeExpCS)newValue);
        return;
      case MyOclPackage.PROPERTY_CONTEXT_DECL_CS__OWNED_DERIVED_INVARIANTS:
        getOwnedDerivedInvariants().clear();
        getOwnedDerivedInvariants().addAll((Collection<? extends ConstraintCS>)newValue);
        return;
      case MyOclPackage.PROPERTY_CONTEXT_DECL_CS__OWNED_DEFAULT_EXPRESSIONS:
        getOwnedDefaultExpressions().clear();
        getOwnedDefaultExpressions().addAll((Collection<? extends SpecificationCS>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyOclPackage.PROPERTY_CONTEXT_DECL_CS__OWNED_TYPE:
        setOwnedType((TypeExpCS)null);
        return;
      case MyOclPackage.PROPERTY_CONTEXT_DECL_CS__OWNED_DERIVED_INVARIANTS:
        getOwnedDerivedInvariants().clear();
        return;
      case MyOclPackage.PROPERTY_CONTEXT_DECL_CS__OWNED_DEFAULT_EXPRESSIONS:
        getOwnedDefaultExpressions().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyOclPackage.PROPERTY_CONTEXT_DECL_CS__OWNED_TYPE:
        return ownedType != null;
      case MyOclPackage.PROPERTY_CONTEXT_DECL_CS__OWNED_DERIVED_INVARIANTS:
        return ownedDerivedInvariants != null && !ownedDerivedInvariants.isEmpty();
      case MyOclPackage.PROPERTY_CONTEXT_DECL_CS__OWNED_DEFAULT_EXPRESSIONS:
        return ownedDefaultExpressions != null && !ownedDefaultExpressions.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //PropertyContextDeclCSImpl
