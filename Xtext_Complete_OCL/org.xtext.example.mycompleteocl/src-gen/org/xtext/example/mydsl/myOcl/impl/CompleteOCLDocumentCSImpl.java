/**
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.myOcl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.myOcl.CompleteOCLDocumentCS;
import org.xtext.example.mydsl.myOcl.ContextDeclCS;
import org.xtext.example.mydsl.myOcl.ImportCS;
import org.xtext.example.mydsl.myOcl.MyOclPackage;
import org.xtext.example.mydsl.myOcl.PackageDeclarationCS;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Complete OCL Document CS</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myOcl.impl.CompleteOCLDocumentCSImpl#getOwnedImports <em>Owned Imports</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myOcl.impl.CompleteOCLDocumentCSImpl#getOwnedPackages <em>Owned Packages</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myOcl.impl.CompleteOCLDocumentCSImpl#getOwnedContexts <em>Owned Contexts</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CompleteOCLDocumentCSImpl extends MinimalEObjectImpl.Container implements CompleteOCLDocumentCS
{
  /**
   * The cached value of the '{@link #getOwnedImports() <em>Owned Imports</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOwnedImports()
   * @generated
   * @ordered
   */
  protected EList<ImportCS> ownedImports;

  /**
   * The cached value of the '{@link #getOwnedPackages() <em>Owned Packages</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOwnedPackages()
   * @generated
   * @ordered
   */
  protected EList<PackageDeclarationCS> ownedPackages;

  /**
   * The cached value of the '{@link #getOwnedContexts() <em>Owned Contexts</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOwnedContexts()
   * @generated
   * @ordered
   */
  protected EList<ContextDeclCS> ownedContexts;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CompleteOCLDocumentCSImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyOclPackage.Literals.COMPLETE_OCL_DOCUMENT_CS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ImportCS> getOwnedImports()
  {
    if (ownedImports == null)
    {
      ownedImports = new EObjectContainmentEList<ImportCS>(ImportCS.class, this, MyOclPackage.COMPLETE_OCL_DOCUMENT_CS__OWNED_IMPORTS);
    }
    return ownedImports;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<PackageDeclarationCS> getOwnedPackages()
  {
    if (ownedPackages == null)
    {
      ownedPackages = new EObjectContainmentEList<PackageDeclarationCS>(PackageDeclarationCS.class, this, MyOclPackage.COMPLETE_OCL_DOCUMENT_CS__OWNED_PACKAGES);
    }
    return ownedPackages;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ContextDeclCS> getOwnedContexts()
  {
    if (ownedContexts == null)
    {
      ownedContexts = new EObjectContainmentEList<ContextDeclCS>(ContextDeclCS.class, this, MyOclPackage.COMPLETE_OCL_DOCUMENT_CS__OWNED_CONTEXTS);
    }
    return ownedContexts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyOclPackage.COMPLETE_OCL_DOCUMENT_CS__OWNED_IMPORTS:
        return ((InternalEList<?>)getOwnedImports()).basicRemove(otherEnd, msgs);
      case MyOclPackage.COMPLETE_OCL_DOCUMENT_CS__OWNED_PACKAGES:
        return ((InternalEList<?>)getOwnedPackages()).basicRemove(otherEnd, msgs);
      case MyOclPackage.COMPLETE_OCL_DOCUMENT_CS__OWNED_CONTEXTS:
        return ((InternalEList<?>)getOwnedContexts()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyOclPackage.COMPLETE_OCL_DOCUMENT_CS__OWNED_IMPORTS:
        return getOwnedImports();
      case MyOclPackage.COMPLETE_OCL_DOCUMENT_CS__OWNED_PACKAGES:
        return getOwnedPackages();
      case MyOclPackage.COMPLETE_OCL_DOCUMENT_CS__OWNED_CONTEXTS:
        return getOwnedContexts();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyOclPackage.COMPLETE_OCL_DOCUMENT_CS__OWNED_IMPORTS:
        getOwnedImports().clear();
        getOwnedImports().addAll((Collection<? extends ImportCS>)newValue);
        return;
      case MyOclPackage.COMPLETE_OCL_DOCUMENT_CS__OWNED_PACKAGES:
        getOwnedPackages().clear();
        getOwnedPackages().addAll((Collection<? extends PackageDeclarationCS>)newValue);
        return;
      case MyOclPackage.COMPLETE_OCL_DOCUMENT_CS__OWNED_CONTEXTS:
        getOwnedContexts().clear();
        getOwnedContexts().addAll((Collection<? extends ContextDeclCS>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyOclPackage.COMPLETE_OCL_DOCUMENT_CS__OWNED_IMPORTS:
        getOwnedImports().clear();
        return;
      case MyOclPackage.COMPLETE_OCL_DOCUMENT_CS__OWNED_PACKAGES:
        getOwnedPackages().clear();
        return;
      case MyOclPackage.COMPLETE_OCL_DOCUMENT_CS__OWNED_CONTEXTS:
        getOwnedContexts().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyOclPackage.COMPLETE_OCL_DOCUMENT_CS__OWNED_IMPORTS:
        return ownedImports != null && !ownedImports.isEmpty();
      case MyOclPackage.COMPLETE_OCL_DOCUMENT_CS__OWNED_PACKAGES:
        return ownedPackages != null && !ownedPackages.isEmpty();
      case MyOclPackage.COMPLETE_OCL_DOCUMENT_CS__OWNED_CONTEXTS:
        return ownedContexts != null && !ownedContexts.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //CompleteOCLDocumentCSImpl
