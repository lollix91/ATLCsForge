/**
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.myOcl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.myOcl.ConstraintCS;
import org.xtext.example.mydsl.myOcl.ContextDeclCS;
import org.xtext.example.mydsl.myOcl.MyOclPackage;
import org.xtext.example.mydsl.myOcl.PackageDeclarationCS;
import org.xtext.example.mydsl.myOcl.pathNameCS;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Package Declaration CS</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myOcl.impl.PackageDeclarationCSImpl#getOwnedPathName <em>Owned Path Name</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myOcl.impl.PackageDeclarationCSImpl#getOwnedInvariants <em>Owned Invariants</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myOcl.impl.PackageDeclarationCSImpl#getOwnedContexts <em>Owned Contexts</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PackageDeclarationCSImpl extends MinimalEObjectImpl.Container implements PackageDeclarationCS
{
  /**
   * The cached value of the '{@link #getOwnedPathName() <em>Owned Path Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOwnedPathName()
   * @generated
   * @ordered
   */
  protected pathNameCS ownedPathName;

  /**
   * The cached value of the '{@link #getOwnedInvariants() <em>Owned Invariants</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOwnedInvariants()
   * @generated
   * @ordered
   */
  protected EList<ConstraintCS> ownedInvariants;

  /**
   * The cached value of the '{@link #getOwnedContexts() <em>Owned Contexts</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOwnedContexts()
   * @generated
   * @ordered
   */
  protected EList<ContextDeclCS> ownedContexts;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PackageDeclarationCSImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyOclPackage.Literals.PACKAGE_DECLARATION_CS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public pathNameCS getOwnedPathName()
  {
    return ownedPathName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOwnedPathName(pathNameCS newOwnedPathName, NotificationChain msgs)
  {
    pathNameCS oldOwnedPathName = ownedPathName;
    ownedPathName = newOwnedPathName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyOclPackage.PACKAGE_DECLARATION_CS__OWNED_PATH_NAME, oldOwnedPathName, newOwnedPathName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOwnedPathName(pathNameCS newOwnedPathName)
  {
    if (newOwnedPathName != ownedPathName)
    {
      NotificationChain msgs = null;
      if (ownedPathName != null)
        msgs = ((InternalEObject)ownedPathName).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyOclPackage.PACKAGE_DECLARATION_CS__OWNED_PATH_NAME, null, msgs);
      if (newOwnedPathName != null)
        msgs = ((InternalEObject)newOwnedPathName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyOclPackage.PACKAGE_DECLARATION_CS__OWNED_PATH_NAME, null, msgs);
      msgs = basicSetOwnedPathName(newOwnedPathName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyOclPackage.PACKAGE_DECLARATION_CS__OWNED_PATH_NAME, newOwnedPathName, newOwnedPathName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ConstraintCS> getOwnedInvariants()
  {
    if (ownedInvariants == null)
    {
      ownedInvariants = new EObjectContainmentEList<ConstraintCS>(ConstraintCS.class, this, MyOclPackage.PACKAGE_DECLARATION_CS__OWNED_INVARIANTS);
    }
    return ownedInvariants;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ContextDeclCS> getOwnedContexts()
  {
    if (ownedContexts == null)
    {
      ownedContexts = new EObjectContainmentEList<ContextDeclCS>(ContextDeclCS.class, this, MyOclPackage.PACKAGE_DECLARATION_CS__OWNED_CONTEXTS);
    }
    return ownedContexts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyOclPackage.PACKAGE_DECLARATION_CS__OWNED_PATH_NAME:
        return basicSetOwnedPathName(null, msgs);
      case MyOclPackage.PACKAGE_DECLARATION_CS__OWNED_INVARIANTS:
        return ((InternalEList<?>)getOwnedInvariants()).basicRemove(otherEnd, msgs);
      case MyOclPackage.PACKAGE_DECLARATION_CS__OWNED_CONTEXTS:
        return ((InternalEList<?>)getOwnedContexts()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyOclPackage.PACKAGE_DECLARATION_CS__OWNED_PATH_NAME:
        return getOwnedPathName();
      case MyOclPackage.PACKAGE_DECLARATION_CS__OWNED_INVARIANTS:
        return getOwnedInvariants();
      case MyOclPackage.PACKAGE_DECLARATION_CS__OWNED_CONTEXTS:
        return getOwnedContexts();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyOclPackage.PACKAGE_DECLARATION_CS__OWNED_PATH_NAME:
        setOwnedPathName((pathNameCS)newValue);
        return;
      case MyOclPackage.PACKAGE_DECLARATION_CS__OWNED_INVARIANTS:
        getOwnedInvariants().clear();
        getOwnedInvariants().addAll((Collection<? extends ConstraintCS>)newValue);
        return;
      case MyOclPackage.PACKAGE_DECLARATION_CS__OWNED_CONTEXTS:
        getOwnedContexts().clear();
        getOwnedContexts().addAll((Collection<? extends ContextDeclCS>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyOclPackage.PACKAGE_DECLARATION_CS__OWNED_PATH_NAME:
        setOwnedPathName((pathNameCS)null);
        return;
      case MyOclPackage.PACKAGE_DECLARATION_CS__OWNED_INVARIANTS:
        getOwnedInvariants().clear();
        return;
      case MyOclPackage.PACKAGE_DECLARATION_CS__OWNED_CONTEXTS:
        getOwnedContexts().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyOclPackage.PACKAGE_DECLARATION_CS__OWNED_PATH_NAME:
        return ownedPathName != null;
      case MyOclPackage.PACKAGE_DECLARATION_CS__OWNED_INVARIANTS:
        return ownedInvariants != null && !ownedInvariants.isEmpty();
      case MyOclPackage.PACKAGE_DECLARATION_CS__OWNED_CONTEXTS:
        return ownedContexts != null && !ownedContexts.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //PackageDeclarationCSImpl
