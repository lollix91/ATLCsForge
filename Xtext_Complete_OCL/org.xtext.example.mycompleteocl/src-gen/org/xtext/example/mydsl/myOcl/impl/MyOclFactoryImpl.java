/**
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.myOcl.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.mydsl.myOcl.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MyOclFactoryImpl extends EFactoryImpl implements MyOclFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MyOclFactory init()
  {
    try
    {
      MyOclFactory theMyOclFactory = (MyOclFactory)EPackage.Registry.INSTANCE.getEFactory(MyOclPackage.eNS_URI);
      if (theMyOclFactory != null)
      {
        return theMyOclFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MyOclFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyOclFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MyOclPackage.COMPLETE_OCL_DOCUMENT_CS: return createCompleteOCLDocumentCS();
      case MyOclPackage.CLASSIFIER_CONTEXT_DECL_CS: return createClassifierContextDeclCS();
      case MyOclPackage.CONSTRAINT_CS: return createConstraintCS();
      case MyOclPackage.CONTEXT_DECL_CS: return createContextDeclCS();
      case MyOclPackage.DEF_CS: return createDefCS();
      case MyOclPackage.DEF_OPERATION_CS: return createDefOperationCS();
      case MyOclPackage.DEF_PARAMETER_CS: return createDefParameterCS();
      case MyOclPackage.DEF_PROPERTY_CS: return createDefPropertyCS();
      case MyOclPackage.IMPORT_CS: return createImportCS();
      case MyOclPackage.URI_PATH_NAME_CS: return createURIPathNameCS();
      case MyOclPackage.OPERATION_CONTEXT_DECL_CS: return createOperationContextDeclCS();
      case MyOclPackage.PACKAGE_DECLARATION_CS: return createPackageDeclarationCS();
      case MyOclPackage.PARAMETER_CS: return createParameterCS();
      case MyOclPackage.PROPERTY_CONTEXT_DECL_CS: return createPropertyContextDeclCS();
      case MyOclPackage.SPECIFICATION_CS: return createSpecificationCS();
      case MyOclPackage.PATH_NAME_CS: return createpathNameCS();
      case MyOclPackage.TEMPLATE_SIGNATURE_CS: return createTemplateSignatureCS();
      case MyOclPackage.TYPE_PARAMETER_CS: return createTypeParameterCS();
      case MyOclPackage.TYPED_REF_CS: return createTypedRefCS();
      case MyOclPackage.NAVIGATING_ARG_EXP_CS: return createNavigatingArgExpCS();
      case MyOclPackage.PRIMITIVE_TYPE_CS: return createPrimitiveTypeCS();
      case MyOclPackage.COLLECTION_TYPE_CS: return createCollectionTypeCS();
      case MyOclPackage.TUPLE_TYPE_CS: return createTupleTypeCS();
      case MyOclPackage.TUPLE_PART_CS: return createtuplePartCS();
      case MyOclPackage.COLLECTION_LITERAL_EXP_CS: return createCollectionLiteralExpCS();
      case MyOclPackage.COLLECTION_LITERAL_PART_CS: return createCollectionLiteralPartCS();
      case MyOclPackage.PRIMITIVE_LITERAL_EXP_CS: return createPrimitiveLiteralExpCS();
      case MyOclPackage.TUPLE_LITERAL_EXP_CS: return createTupleLiteralExpCS();
      case MyOclPackage.TUPLE_LITERAL_PART_CS: return createTupleLiteralPartCS();
      case MyOclPackage.NUMBER_LITERAL_EXP_CS: return createNumberLiteralExpCS();
      case MyOclPackage.STRING_LITERAL_EXP_CS: return createStringLiteralExpCS();
      case MyOclPackage.BOOLEAN_LITERAL_EXP_CS: return createBooleanLiteralExpCS();
      case MyOclPackage.UNLIMITED_NATURAL_LITERAL_EXP_CS: return createUnlimitedNaturalLiteralExpCS();
      case MyOclPackage.INVALID_LITERAL_EXP_CS: return createInvalidLiteralExpCS();
      case MyOclPackage.NULL_LITERAL_EXP_CS: return createNullLiteralExpCS();
      case MyOclPackage.TYPE_LITERAL_CS: return createTypeLiteralCS();
      case MyOclPackage.TYPE_LITERAL_EXP_CS: return createTypeLiteralExpCS();
      case MyOclPackage.TYPE_NAME_EXP_CS: return createTypeNameExpCS();
      case MyOclPackage.TYPE_EXP_CS: return createTypeExpCS();
      case MyOclPackage.NAVIGATING_ARG_CS: return createNavigatingArgCS();
      case MyOclPackage.NAVIGATING_BAR_ARG_CS: return createNavigatingBarArgCS();
      case MyOclPackage.NAVIGATING_COMMA_ARG_CS: return createNavigatingCommaArgCS();
      case MyOclPackage.NAVIGATING_SEMI_ARG_CS: return createNavigatingSemiArgCS();
      case MyOclPackage.IF_EXP_CS: return createIfExpCS();
      case MyOclPackage.LET_EXP_CS: return createLetExpCS();
      case MyOclPackage.LET_VARIABLE_CS: return createLetVariableCS();
      case MyOclPackage.NESTED_EXP_CS: return createNestedExpCS();
      case MyOclPackage.SELF_EXP_CS: return createSelfExpCS();
      case MyOclPackage.PRIMARY_EXP_CS: return createPrimaryExpCS();
      case MyOclPackage.NAME_EXP_CS: return createNameExpCS();
      case MyOclPackage.EXP_CS: return createExpCS();
      case MyOclPackage.INFIXED_EXP_CS: return createInfixedExpCS();
      case MyOclPackage.BINARY_OPERATOR_CS: return createBinaryOperatorCS();
      case MyOclPackage.INFIX_OPERATOR_CS: return createInfixOperatorCS();
      case MyOclPackage.NAVIGATION_OPERATOR_CS: return createNavigationOperatorCS();
      case MyOclPackage.PREFIXED_EXP_CS: return createPrefixedExpCS();
      case MyOclPackage.UNARY_OPERATOR_CS: return createUnaryOperatorCS();
      case MyOclPackage.INDEX_EXP_CS: return createIndexExpCS();
      case MyOclPackage.NAVIGATING_EXP_CS_BASE: return createNavigatingExpCS_Base();
      case MyOclPackage.NAVIGATING_EXP_CS: return createNavigatingExpCS();
      case MyOclPackage.OCL_MESSAGE_ARG_CS: return createOCLMessageArgCS();
      case MyOclPackage.INFIX_EXP_CS: return createInfixExpCS();
      case MyOclPackage.PREFIX_EXP_CS: return createPrefixExpCS();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CompleteOCLDocumentCS createCompleteOCLDocumentCS()
  {
    CompleteOCLDocumentCSImpl completeOCLDocumentCS = new CompleteOCLDocumentCSImpl();
    return completeOCLDocumentCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ClassifierContextDeclCS createClassifierContextDeclCS()
  {
    ClassifierContextDeclCSImpl classifierContextDeclCS = new ClassifierContextDeclCSImpl();
    return classifierContextDeclCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConstraintCS createConstraintCS()
  {
    ConstraintCSImpl constraintCS = new ConstraintCSImpl();
    return constraintCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ContextDeclCS createContextDeclCS()
  {
    ContextDeclCSImpl contextDeclCS = new ContextDeclCSImpl();
    return contextDeclCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DefCS createDefCS()
  {
    DefCSImpl defCS = new DefCSImpl();
    return defCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DefOperationCS createDefOperationCS()
  {
    DefOperationCSImpl defOperationCS = new DefOperationCSImpl();
    return defOperationCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DefParameterCS createDefParameterCS()
  {
    DefParameterCSImpl defParameterCS = new DefParameterCSImpl();
    return defParameterCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DefPropertyCS createDefPropertyCS()
  {
    DefPropertyCSImpl defPropertyCS = new DefPropertyCSImpl();
    return defPropertyCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImportCS createImportCS()
  {
    ImportCSImpl importCS = new ImportCSImpl();
    return importCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public URIPathNameCS createURIPathNameCS()
  {
    URIPathNameCSImpl uriPathNameCS = new URIPathNameCSImpl();
    return uriPathNameCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OperationContextDeclCS createOperationContextDeclCS()
  {
    OperationContextDeclCSImpl operationContextDeclCS = new OperationContextDeclCSImpl();
    return operationContextDeclCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PackageDeclarationCS createPackageDeclarationCS()
  {
    PackageDeclarationCSImpl packageDeclarationCS = new PackageDeclarationCSImpl();
    return packageDeclarationCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ParameterCS createParameterCS()
  {
    ParameterCSImpl parameterCS = new ParameterCSImpl();
    return parameterCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PropertyContextDeclCS createPropertyContextDeclCS()
  {
    PropertyContextDeclCSImpl propertyContextDeclCS = new PropertyContextDeclCSImpl();
    return propertyContextDeclCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SpecificationCS createSpecificationCS()
  {
    SpecificationCSImpl specificationCS = new SpecificationCSImpl();
    return specificationCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public pathNameCS createpathNameCS()
  {
    pathNameCSImpl pathNameCS = new pathNameCSImpl();
    return pathNameCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TemplateSignatureCS createTemplateSignatureCS()
  {
    TemplateSignatureCSImpl templateSignatureCS = new TemplateSignatureCSImpl();
    return templateSignatureCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeParameterCS createTypeParameterCS()
  {
    TypeParameterCSImpl typeParameterCS = new TypeParameterCSImpl();
    return typeParameterCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypedRefCS createTypedRefCS()
  {
    TypedRefCSImpl typedRefCS = new TypedRefCSImpl();
    return typedRefCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NavigatingArgExpCS createNavigatingArgExpCS()
  {
    NavigatingArgExpCSImpl navigatingArgExpCS = new NavigatingArgExpCSImpl();
    return navigatingArgExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PrimitiveTypeCS createPrimitiveTypeCS()
  {
    PrimitiveTypeCSImpl primitiveTypeCS = new PrimitiveTypeCSImpl();
    return primitiveTypeCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CollectionTypeCS createCollectionTypeCS()
  {
    CollectionTypeCSImpl collectionTypeCS = new CollectionTypeCSImpl();
    return collectionTypeCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TupleTypeCS createTupleTypeCS()
  {
    TupleTypeCSImpl tupleTypeCS = new TupleTypeCSImpl();
    return tupleTypeCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public tuplePartCS createtuplePartCS()
  {
    tuplePartCSImpl tuplePartCS = new tuplePartCSImpl();
    return tuplePartCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CollectionLiteralExpCS createCollectionLiteralExpCS()
  {
    CollectionLiteralExpCSImpl collectionLiteralExpCS = new CollectionLiteralExpCSImpl();
    return collectionLiteralExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CollectionLiteralPartCS createCollectionLiteralPartCS()
  {
    CollectionLiteralPartCSImpl collectionLiteralPartCS = new CollectionLiteralPartCSImpl();
    return collectionLiteralPartCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PrimitiveLiteralExpCS createPrimitiveLiteralExpCS()
  {
    PrimitiveLiteralExpCSImpl primitiveLiteralExpCS = new PrimitiveLiteralExpCSImpl();
    return primitiveLiteralExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TupleLiteralExpCS createTupleLiteralExpCS()
  {
    TupleLiteralExpCSImpl tupleLiteralExpCS = new TupleLiteralExpCSImpl();
    return tupleLiteralExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TupleLiteralPartCS createTupleLiteralPartCS()
  {
    TupleLiteralPartCSImpl tupleLiteralPartCS = new TupleLiteralPartCSImpl();
    return tupleLiteralPartCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NumberLiteralExpCS createNumberLiteralExpCS()
  {
    NumberLiteralExpCSImpl numberLiteralExpCS = new NumberLiteralExpCSImpl();
    return numberLiteralExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StringLiteralExpCS createStringLiteralExpCS()
  {
    StringLiteralExpCSImpl stringLiteralExpCS = new StringLiteralExpCSImpl();
    return stringLiteralExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BooleanLiteralExpCS createBooleanLiteralExpCS()
  {
    BooleanLiteralExpCSImpl booleanLiteralExpCS = new BooleanLiteralExpCSImpl();
    return booleanLiteralExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UnlimitedNaturalLiteralExpCS createUnlimitedNaturalLiteralExpCS()
  {
    UnlimitedNaturalLiteralExpCSImpl unlimitedNaturalLiteralExpCS = new UnlimitedNaturalLiteralExpCSImpl();
    return unlimitedNaturalLiteralExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InvalidLiteralExpCS createInvalidLiteralExpCS()
  {
    InvalidLiteralExpCSImpl invalidLiteralExpCS = new InvalidLiteralExpCSImpl();
    return invalidLiteralExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NullLiteralExpCS createNullLiteralExpCS()
  {
    NullLiteralExpCSImpl nullLiteralExpCS = new NullLiteralExpCSImpl();
    return nullLiteralExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeLiteralCS createTypeLiteralCS()
  {
    TypeLiteralCSImpl typeLiteralCS = new TypeLiteralCSImpl();
    return typeLiteralCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeLiteralExpCS createTypeLiteralExpCS()
  {
    TypeLiteralExpCSImpl typeLiteralExpCS = new TypeLiteralExpCSImpl();
    return typeLiteralExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeNameExpCS createTypeNameExpCS()
  {
    TypeNameExpCSImpl typeNameExpCS = new TypeNameExpCSImpl();
    return typeNameExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeExpCS createTypeExpCS()
  {
    TypeExpCSImpl typeExpCS = new TypeExpCSImpl();
    return typeExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NavigatingArgCS createNavigatingArgCS()
  {
    NavigatingArgCSImpl navigatingArgCS = new NavigatingArgCSImpl();
    return navigatingArgCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NavigatingBarArgCS createNavigatingBarArgCS()
  {
    NavigatingBarArgCSImpl navigatingBarArgCS = new NavigatingBarArgCSImpl();
    return navigatingBarArgCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NavigatingCommaArgCS createNavigatingCommaArgCS()
  {
    NavigatingCommaArgCSImpl navigatingCommaArgCS = new NavigatingCommaArgCSImpl();
    return navigatingCommaArgCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NavigatingSemiArgCS createNavigatingSemiArgCS()
  {
    NavigatingSemiArgCSImpl navigatingSemiArgCS = new NavigatingSemiArgCSImpl();
    return navigatingSemiArgCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IfExpCS createIfExpCS()
  {
    IfExpCSImpl ifExpCS = new IfExpCSImpl();
    return ifExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LetExpCS createLetExpCS()
  {
    LetExpCSImpl letExpCS = new LetExpCSImpl();
    return letExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LetVariableCS createLetVariableCS()
  {
    LetVariableCSImpl letVariableCS = new LetVariableCSImpl();
    return letVariableCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NestedExpCS createNestedExpCS()
  {
    NestedExpCSImpl nestedExpCS = new NestedExpCSImpl();
    return nestedExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SelfExpCS createSelfExpCS()
  {
    SelfExpCSImpl selfExpCS = new SelfExpCSImpl();
    return selfExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PrimaryExpCS createPrimaryExpCS()
  {
    PrimaryExpCSImpl primaryExpCS = new PrimaryExpCSImpl();
    return primaryExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NameExpCS createNameExpCS()
  {
    NameExpCSImpl nameExpCS = new NameExpCSImpl();
    return nameExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpCS createExpCS()
  {
    ExpCSImpl expCS = new ExpCSImpl();
    return expCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InfixedExpCS createInfixedExpCS()
  {
    InfixedExpCSImpl infixedExpCS = new InfixedExpCSImpl();
    return infixedExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BinaryOperatorCS createBinaryOperatorCS()
  {
    BinaryOperatorCSImpl binaryOperatorCS = new BinaryOperatorCSImpl();
    return binaryOperatorCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InfixOperatorCS createInfixOperatorCS()
  {
    InfixOperatorCSImpl infixOperatorCS = new InfixOperatorCSImpl();
    return infixOperatorCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NavigationOperatorCS createNavigationOperatorCS()
  {
    NavigationOperatorCSImpl navigationOperatorCS = new NavigationOperatorCSImpl();
    return navigationOperatorCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PrefixedExpCS createPrefixedExpCS()
  {
    PrefixedExpCSImpl prefixedExpCS = new PrefixedExpCSImpl();
    return prefixedExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UnaryOperatorCS createUnaryOperatorCS()
  {
    UnaryOperatorCSImpl unaryOperatorCS = new UnaryOperatorCSImpl();
    return unaryOperatorCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IndexExpCS createIndexExpCS()
  {
    IndexExpCSImpl indexExpCS = new IndexExpCSImpl();
    return indexExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NavigatingExpCS_Base createNavigatingExpCS_Base()
  {
    NavigatingExpCS_BaseImpl navigatingExpCS_Base = new NavigatingExpCS_BaseImpl();
    return navigatingExpCS_Base;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NavigatingExpCS createNavigatingExpCS()
  {
    NavigatingExpCSImpl navigatingExpCS = new NavigatingExpCSImpl();
    return navigatingExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OCLMessageArgCS createOCLMessageArgCS()
  {
    OCLMessageArgCSImpl oclMessageArgCS = new OCLMessageArgCSImpl();
    return oclMessageArgCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InfixExpCS createInfixExpCS()
  {
    InfixExpCSImpl infixExpCS = new InfixExpCSImpl();
    return infixExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PrefixExpCS createPrefixExpCS()
  {
    PrefixExpCSImpl prefixExpCS = new PrefixExpCSImpl();
    return prefixExpCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyOclPackage getMyOclPackage()
  {
    return (MyOclPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MyOclPackage getPackage()
  {
    return MyOclPackage.eINSTANCE;
  }

} //MyOclFactoryImpl
